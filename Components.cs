using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Special;
using MathParserNet;
using MongoDB.Bson;
using MongoDB.Driver;
using Rhino.Geometry;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Windows.Forms;
using System.Xml;


namespace SIMComponents
{
    public class Paras : GH_Component
    {
        private static ParasForm f;
        public Paras() : base("Paras", "Paras", "Paras", "SIM", "Merge") 
        {
        }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("Datas", "Datas", "Datas", GH_ParamAccess.item);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("D1", "D1", "D1", GH_ParamAccess.item);
            pManager.AddNumberParameter("D2", "D2", "D2", GH_ParamAccess.item);
            pManager.AddNumberParameter("D3", "D3", "D3", GH_ParamAccess.item);
            pManager.AddNumberParameter("D4", "D4", "D4", GH_ParamAccess.item);
            pManager.AddNumberParameter("D5", "D5", "D5", GH_ParamAccess.item);
            pManager.AddNumberParameter("D6", "D6", "D6", GH_ParamAccess.item);
            pManager.AddNumberParameter("D7", "D7", "D7", GH_ParamAccess.item);
            pManager.AddNumberParameter("D8", "D8", "D8", GH_ParamAccess.item);
            pManager.AddNumberParameter("D9", "D9", "D9", GH_ParamAccess.item);
            pManager.AddNumberParameter("D10", "D10", "D10", GH_ParamAccess.item);
            pManager.AddNumberParameter("D11", "D11", "D11", GH_ParamAccess.item);
            pManager.AddNumberParameter("D12", "D12", "D12", GH_ParamAccess.item);
            pManager.AddTextParameter("PARAMETER", "PARAMETER", "", GH_ParamAccess.item);
        }
        protected override void AppendAdditionalComponentMenuItems(System.Windows.Forms.ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            Menu_AppendItem(menu, "Input", INPUT_DoClick);
            Menu_AppendItem(menu, "Clear", CLEAR_DoClick);
        }
        private void INPUT_DoClick(object sender, EventArgs e)
        {
            f = new ParasForm(this);
            f.ShowDialog();
        }
        private void CLEAR_DoClick(object sender, EventArgs e)
        {
            Params.Output[12].Description = "";
            ExpireSolution(true);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Params.Output[0].NickName = "D1";
            Params.Output[1].NickName = "D2";
            Params.Output[2].NickName = "D3";
            Params.Output[3].NickName = "D4";
            Params.Output[4].NickName = "D5";
            Params.Output[5].NickName = "D6";
            Params.Output[6].NickName = "D7";
            Params.Output[7].NickName = "D8";
            Params.Output[8].NickName = "D9";
            Params.Output[9].NickName = "D10";
            Params.Output[10].NickName = "D11";
            Params.Output[11].NickName = "D12";
            string Datas = "";
            DA.GetData(0, ref Datas);
            List<string> DatasList = new List<string>() { };
            DatasList = Datas.Split('\n').ToList();
            List<string> temp = new List<string>() { };
            for (int i = 0; i < DatasList.Count; i++)
            {
                if (!DatasList[i].StartsWith("#"))
                {
                    temp.Add(DatasList[i]);
                }
            }
            List<string> desc = Params.Output[12].Description.Split('\n').ToList();
            if (Params.Output[12].Description != "PARAMETER" && Params.Output[12].Description != "")
            {
                DatasList = desc;
            }
            string result = "";
            int count = 0;
            for (int i = 0; i < DatasList.Count; i++)
            {
                if (!DatasList[i].StartsWith("#") && DatasList[i].Split('=')[0] != "")
                {
                    if (DatasList[i].Split('=').Length == 2)
                    {
                        DA.SetData(count, Convert.ToDouble(DatasList[i].Split('=')[1]));
                    }
                    else
                    {
                        DA.SetData(count, 0.01);
                    }
                    Params.Output[count].Name = DatasList[i].Split('=')[0];
                    Params.Output[count].NickName = DatasList[i].Split('=')[0];
                    Params.Output[count].Description = DatasList[i].Split('=')[0];
                    if (i < DatasList.Count - 1)
                    {
                        result += DatasList[i] + "\n";
                    }
                    else
                    {
                        result += DatasList[i];
                    }
                    count++;
                }
            }
            DA.SetData(12, result);
            Params.Output[12].Description = result;
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Paras;
            }
        }
        public override Guid ComponentGuid => new Guid("AE2D9963-F783-446C-BB9C-9E458A2F8788");
    }
    public partial class ParasForm : Form
    {
        private string MyParas = "";
        public string atts = "";
        Paras Component;
        public ParasForm(Paras MyOwner)
        {
            Component = MyOwner;
            InitializeComponent();
        }
        private void Form2_Load(object sender, EventArgs e)
        {
            if (Component.Params.Output[12].Description == "")
            {
                string temp = ((GH_Panel)Component.Params.Input[0].Sources[0]).UserText;
                foreach (string i in temp.Split('\n'))
                {
                    if (!i.StartsWith("#") && i.Contains("="))
                    {
                        MyParas += i + "\n";
                    }
                }
            }
            else
            {
                string temp = ((GH_Panel)Component.Params.Input[0].Sources[0]).UserText;
                string temp1 = Component.Params.Output[12].Description;
                List<string> temp2 = temp1.Split('\n').ToList();
                Dictionary<string, string> temp3 = new Dictionary<string, string>() { };
                foreach (string j in temp2)
                {
                    if (j.Contains("="))
                    {
                        List<string> temp4 = j.Split('=').ToList();
                        temp3.Add(temp4[0], temp4[1]);
                    }
                }
                foreach (string i in temp.Split('\n'))
                {
                    if (!i.StartsWith("#") && i.Contains("="))
                    {
                        if (temp3.ContainsKey(i.Split('=')[0].Replace(" ", "")))
                        {
                            MyParas += i.Split('=')[0].Replace(" ", "") + "=" + temp3[i.Split('=')[0].Replace(" ", "")] + "\n";
                        }
                        else
                        {
                            MyParas += i + "\n";
                        }
                    }
                }
            }
            DataTable MyDataTable = new DataTable();
            List<string> Paras = MyParas.Split('\n').ToList();
            if (Paras[Paras.Count - 1] == "")
            {
                Paras.RemoveAt(Paras.Count - 1);
            }
            MyDataTable.Columns.Add("参数名", typeof(String));
            MyDataTable.Columns.Add("参数值", typeof(String));
            for (int i = 0; i < Paras.Count; i++)
            {
                DataRow MyDataRow = MyDataTable.NewRow();
                MyDataRow[0] = Paras[i].Split('=')[0];
                try
                {
                    MyDataRow[1] = Paras[i].Split('=')[1];
                }
                catch
                {
                    MyDataRow[1] = "";
                }
                MyDataTable.Rows.Add(MyDataRow);
            }
            this.dataGridView1.DataSource = MyDataTable;
        }
        private void Button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
        }
        private void button1_Click(object sender, EventArgs e)
        {
        }
        private void button1_Click_1(object sender, EventArgs e)
        {
            this.Close();
        }
        private void button2_Click(object sender, EventArgs e)
        {
            string att = "";
            int count = dataGridView1.RowCount;
            for (int i = 0; i < count - 1; i++)
            {
                if (dataGridView1.Rows[i].Cells[1].Value == null)
                {
                    att = att + dataGridView1.Rows[i].Cells[0].Value.ToString().Replace("\r", "") + "=\n";
                }
                else
                {
                    att = att + dataGridView1.Rows[i].Cells[0].Value.ToString().Replace("\r", "") + "=" + dataGridView1.Rows[i].Cells[1].Value + "\n";
                }
            }
            atts = att;
            Component.Params.Output[12].Description = atts;
            //MessageBox.Show(att);
            Component.ExpireSolution(true);
        }
        private void InitializeComponent()
        {
            this.dataGridView1 = new System.Windows.Forms.DataGridView();
            this.button1 = new System.Windows.Forms.Button();
            this.button2 = new System.Windows.Forms.Button();
            ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).BeginInit();
            this.SuspendLayout();
            this.dataGridView1.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dataGridView1.Location = new System.Drawing.Point(12, 12);
            this.dataGridView1.Name = "dataGridView1";
            this.dataGridView1.RowHeadersWidth = 51;
            this.dataGridView1.RowTemplate.Height = 27;
            this.dataGridView1.Size = new System.Drawing.Size(776, 376);
            this.dataGridView1.TabIndex = 0;
            this.dataGridView1.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.dataGridView1_CellContentClick);
            this.button1.BackColor = System.Drawing.Color.Gray;
            this.button1.Location = new System.Drawing.Point(713, 394);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(75, 52);
            this.button1.TabIndex = 1;
            this.button1.Text = "Exit";
            this.button1.UseVisualStyleBackColor = false;
            this.button1.Click += new System.EventHandler(this.button1_Click_1);
            this.button2.BackColor = System.Drawing.Color.Gray;
            this.button2.Location = new System.Drawing.Point(619, 394);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(75, 51);
            this.button2.TabIndex = 2;
            this.button2.Text = "Update";
            this.button2.UseVisualStyleBackColor = false;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.ControlBox = false;
            this.Controls.Add(this.button2);
            this.Controls.Add(this.button1);
            this.Controls.Add(this.dataGridView1);
            this.Name = "ATTRIBUTE_FORM";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "PARAMETER";
            this.Load += new System.EventHandler(this.Form2_Load);
            ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).EndInit();
            this.ResumeLayout(false);
        }
        private System.Windows.Forms.DataGridView dataGridView1;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Button button2;
    }
    public class HEADER : GH_Component
    {
        public static string userData;
        public static string Att = "";
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        private static HeaderForm f;
        public HEADER() : base(name, name, name, "SIM", "File")
        {
            userData = "";
            Att = "GUID\nTMPRef\nName\nVersion\nDescription\nDateTime";
        }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            //pManager.AddTextParameter("Variables", "Variables", "Variables", GH_ParamAccess.item, "Variable");
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("HEADER", "HEADER", "GUID=\nTMPRef=\nName=\nVersion=\nDescription=\nDateTime=", GH_ParamAccess.item);
        }
        protected override void AppendAdditionalComponentMenuItems(System.Windows.Forms.ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            Menu_AppendItem(menu, "AddValue", AV_DoClick);
        }
        private void AV_DoClick(object sender, EventArgs e)
        {
            f = new HeaderForm(this);
            f.ShowDialog();
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            //string Attribute = "GUID\nTMPRef\nName\nVersion\nDescription\nDateTime";
            //DA.GetData(0, ref Attribute);
            //string att = String.Format("{0}", Att);
            //userData = att;
            //if (Params.Output[0].Description == "")
            //{
            DA.SetData(0, Params.Output[0].Description);
            //}
            //else
            //{
                //DA.SetData(0, Params.Output[0].Description);
            //}
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Header;
            }
        }
        public override Guid ComponentGuid => new Guid("D6A12263-F783-4A6D-BE8C-AE458C5F8EA8");

        public static implicit operator Form(HEADER v)
        {
            throw new NotImplementedException();
        }
    }
    //public class Header : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    //private static HeaderForm f;
    //    public Header() : base(name, name, name, "SIM", "File") { }
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.item, Guid.NewGuid().ToString());
    //        pManager.AddTextParameter("TMPRef", "TMPRef", "TMPRef", GH_ParamAccess.item, "TMPRef=NAME(GUID)");
    //        pManager.AddTextParameter("Name", "Name", "Name", GH_ParamAccess.item, "");
    //        pManager.AddTextParameter("Version", "Version", "Version", GH_ParamAccess.item, "");
    //        pManager.AddTextParameter("Description", "Description", "Description", GH_ParamAccess.item, "");
    //        pManager.AddTextParameter("DateTime", "DateTime", "DateTime", GH_ParamAccess.item, DateTime.Now.ToString());
    //    }
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("Header", "Header", "Header", GH_ParamAccess.item);
    //    }
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        string GUID = "";
    //        string TMPRef = "";
    //        string Name = "";
    //        string Version = "";
    //        string Description = "";
    //        string dateTime = "";
    //        DA.GetData(0, ref GUID);
    //        DA.GetData(1, ref TMPRef);
    //        DA.GetData(2, ref Name);
    //        DA.GetData(3, ref Version);
    //        DA.GetData(4, ref Description);
    //        DA.GetData(5, ref dateTime);
    //        string header = String.Format("[HEADER]\nGUID={0}\n{1}\nName={2}\nVersion={3}\nDescription={4}\nDateTime={5}\n[ENDHEADER]", GUID, TMPRef, Name, Version, Description, dateTime);
    //        DA.SetData(0, header);
    //    }
    //    public override GH_Exposure Exposure => GH_Exposure.primary;
    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.Header;
    //        }
    //    }
    //    public override Guid ComponentGuid => new Guid("D6A12263-F783-496D-BD5C-9E458C5F8E88");
    //}
    public partial class HeaderForm : Form
    {
        private string MyParas = "";
        public string atts = "";
        HEADER Component;
        public HeaderForm(HEADER MyOwner)
        {
            Component = MyOwner;
            InitializeComponent();
        }
        private void Form2_Load(object sender, EventArgs e)
        {
            string temp = Component.Params.Output[0].Description;
            MyParas = temp;
            DataTable MyDataTable = new DataTable();
            List<string> Paras = MyParas.Split('\n').ToList();
            MyDataTable.Columns.Add("参数名", typeof(String));
            MyDataTable.Columns.Add("参数值", typeof(String));
            for (int i = 0; i < Paras.Count; i++)
            {
                DataRow MyDataRow = MyDataTable.NewRow();
                if (Paras[i].Split('=')[0] != "" || Paras[i].Split('=')[0] != "\r")
                {
                    MyDataRow[0] = Paras[i].Split('=')[0];
                    try
                    {
                        MyDataRow[1] = Paras[i].Split('=')[1];
                    }
                    catch
                    {
                        MyDataRow[1] = "";
                    }
                }
                MyDataTable.Rows.Add(MyDataRow);
            }
            this.dataGridView1.DataSource = MyDataTable;
        }
        private void Button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
        }
        private void button1_Click(object sender, EventArgs e)
        {
        }
        private void button1_Click_1(object sender, EventArgs e)
        {
            this.Close();
        }
        private void button2_Click(object sender, EventArgs e)
        {
            string att = "";
            int count = dataGridView1.RowCount;
            for (int i = 0; i < count - 1; i++)
            {
                if (dataGridView1.Rows[i].Cells[1].Value == null)
                {
                    att = att + dataGridView1.Rows[i].Cells[0].Value.ToString().Replace("\r", "") + "=\n";
                }
                else
                {
                    att = att + dataGridView1.Rows[i].Cells[0].Value.ToString().Replace("\r", "") + "=" + dataGridView1.Rows[i].Cells[1].Value + "\n";
                }
            }
            atts = att;
            Component.Params.Output[0].Description = atts;
            //MessageBox.Show(att);
            Component.ExpireSolution(true);
        }
        private void InitializeComponent()
        {
            this.dataGridView1 = new System.Windows.Forms.DataGridView();
            this.button1 = new System.Windows.Forms.Button();
            this.button2 = new System.Windows.Forms.Button();
            ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).BeginInit();
            this.SuspendLayout();
            this.dataGridView1.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dataGridView1.Location = new System.Drawing.Point(12, 12);
            this.dataGridView1.Name = "dataGridView1";
            this.dataGridView1.RowHeadersWidth = 51;
            this.dataGridView1.RowTemplate.Height = 27;
            this.dataGridView1.Size = new System.Drawing.Size(776, 376);
            this.dataGridView1.TabIndex = 0;
            this.dataGridView1.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.dataGridView1_CellContentClick);
            this.button1.BackColor = System.Drawing.Color.Gray;
            this.button1.Location = new System.Drawing.Point(713, 394);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(75, 52);
            this.button1.TabIndex = 1;
            this.button1.Text = "Exit";
            this.button1.UseVisualStyleBackColor = false;
            this.button1.Click += new System.EventHandler(this.button1_Click_1);
            this.button2.BackColor = System.Drawing.Color.Gray;
            this.button2.Location = new System.Drawing.Point(619, 394);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(75, 51);
            this.button2.TabIndex = 2;
            this.button2.Text = "Update";
            this.button2.UseVisualStyleBackColor = false;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.ControlBox = false;
            this.Controls.Add(this.button2);
            this.Controls.Add(this.button1);
            this.Controls.Add(this.dataGridView1);
            this.Name = "ATTRIBUTE_FORM";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "HEADER";
            this.Load += new System.EventHandler(this.Form2_Load);
            ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).EndInit();
            this.ResumeLayout(false);
        }
        private System.Windows.Forms.DataGridView dataGridView1;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Button button2;
    }

    public class TMPRef : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public TMPRef() : base(name, name, name, "SIM", "File") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.item, Guid.NewGuid().ToString());
            pManager.AddTextParameter("Name", "Name", "Name", GH_ParamAccess.item, "");
            pManager.AddTextParameter("Version", "Version", "Version", GH_ParamAccess.item, "V1.0");
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("TMPRef", "TMPRef", "TMPRef", GH_ParamAccess.item);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string GUID = "";
            string Name = "";
            string Version = "";
            DA.GetData(0, ref GUID);
            DA.GetData(1, ref Name);
            DA.GetData(2, ref Version);
            string tmpRef = String.Format("TMPRef={0}({1})", Name, GUID);
            DA.SetData(0, tmpRef);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.TMPref;
            }
        }
        public override Guid ComponentGuid => new Guid("D6A12263-F783-496D-BD5C-9E458C5F8EB8");
    }
    public class ATTRIBUTE : GH_Component
    {
        public static string userData;
        public static string Att = "";
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        private static AttsForm f;
        public ATTRIBUTE() : base(name, name, name, "SIM", "File") 
        {
            userData = "";
        }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("Keys", "Keys", "Keys", GH_ParamAccess.item, "Key");
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("ATTRIBUTE", "ATTRIBUTE", "", GH_ParamAccess.item);
        }
        protected override void AppendAdditionalComponentMenuItems(System.Windows.Forms.ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            Menu_AppendItem(menu, "AddValue", AV_DoClick);
        }
        private void AV_DoClick(object sender, EventArgs e)
        {
            f = new AttsForm(this);
            f.ShowDialog();
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string Attribute = "";
            DA.GetData(0, ref Attribute);
            string att = String.Format("{0}", Attribute);
            userData = att;
            if (Params.Output[0].Description == "")
            {
                DA.SetData(0, userData);
            }
            else
            {
                DA.SetData(0, Params.Output[0].Description);
            }
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.ATTpng;
            }
        }
        public override Guid ComponentGuid => new Guid("D6A12263-F783-4A6D-BE8C-9E458C5F8EA8");

        public static implicit operator Form(ATTRIBUTE v)
        {
            throw new NotImplementedException();
        }
    }
    public partial class AttsForm : Form
    {
        private string myKeys = "";
        public string atts = "";
        ATTRIBUTE comp;
        public AttsForm(ATTRIBUTE myOwner)
        {
            comp = myOwner;
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            if (comp.Params.Output[0].Description == "" || comp.Params.Output[0].Description == "ATTRIBUTE")
            {
                myKeys = ((GH_Panel)comp.Params.Input[0].Sources[0]).UserText;
            }
            else
            {
                string temp = ((GH_Panel)comp.Params.Input[0].Sources[0]).UserText;
                string temp1 = comp.Params.Output[0].Description;
                List<string> temp2 = temp1.Split('\n').ToList();
                Dictionary<string, string> temp3 = new Dictionary<string, string>() { };
                foreach (string j in temp2)
                {
                    if (j.Contains("="))
                    {
                        List<string> temp4 = j.Split('=').ToList();
                        temp3.Add(temp4[0], temp4[1]);
                    }
                }
                foreach (string i in temp.Split('\n'))
                {
                    if (i.Replace(" ", "") != "")
                    {
                        if (temp3.ContainsKey(i.Replace(" ", "")))
                        {
                            myKeys += i.Replace(" ", "") + "=" + temp3[i.Replace(" ", "")] + "\n";
                        }
                        else
                        {
                            myKeys += i + "\n";
                        }
                    }
                }
                //myKeys = comp.Params.Output[0].Description;
            }
            DataTable dt = new DataTable();
            List<string> key = myKeys.Split('\n').ToList();
            if (key[key.Count - 1] == "")
            {
                key.RemoveAt(key.Count - 1);
            }
            dt.Columns.Add("Key", typeof(String));
            dt.Columns.Add("Value", typeof(String));
            for (int i = 0; i < key.Count; i++)
            {
                DataRow dr = dt.NewRow();
                dr[0] = key[i].Split('=')[0];
                try
                {
                    dr[1] = key[i].Split('=')[1];
                }
                catch
                {
                    dr[1] = "";
                }
                dt.Rows.Add(dr);
            }
            this.dataGridView1.DataSource = dt;
        }
        private void Button1_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
        }
        private void button1_Click(object sender, EventArgs e)
        {
        }
        private void button1_Click_1(object sender, EventArgs e)
        {
            this.Close();
        }
        private void button2_Click(object sender, EventArgs e)
        {
            string att = "";
            int count = dataGridView1.RowCount;
            for (int i = 0; i < count - 1; i++)
            {
                if (dataGridView1.Rows[i].Cells[1].Value == null)
                {
                    att = att + dataGridView1.Rows[i].Cells[0].Value.ToString().Replace("\r", "") + "=\n";
                }
                else
                {
                    if (dataGridView1.Rows[i].Cells[1].Value.ToString() != "")
                    {
                        att = att + dataGridView1.Rows[i].Cells[0].Value.ToString().Replace("\r", "") + "=" + dataGridView1.Rows[i].Cells[1].Value + "\n";
                    }
                }
            }
            atts = att;
            comp.Params.Output[0].Description = atts;
            comp.ExpireSolution(true);
        }

        private void InitializeComponent()
        {
            this.dataGridView1 = new System.Windows.Forms.DataGridView();
            this.button1 = new System.Windows.Forms.Button();
            this.button2 = new System.Windows.Forms.Button();
            ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).BeginInit();
            this.SuspendLayout();
            this.dataGridView1.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dataGridView1.Location = new System.Drawing.Point(12, 12);
            this.dataGridView1.Name = "dataGridView1";
            this.dataGridView1.RowHeadersWidth = 51;
            this.dataGridView1.RowTemplate.Height = 27;
            this.dataGridView1.Size = new System.Drawing.Size(776, 376);
            this.dataGridView1.TabIndex = 0;
            this.dataGridView1.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.dataGridView1_CellContentClick);
            this.button1.BackColor = System.Drawing.Color.Gray;
            this.button1.Location = new System.Drawing.Point(713, 394);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(75, 52);
            this.button1.TabIndex = 1;
            this.button1.Text = "Exit";
            this.button1.UseVisualStyleBackColor = false;
            this.button1.Click += new System.EventHandler(this.button1_Click_1);
            this.button2.BackColor = System.Drawing.Color.Gray;
            this.button2.Location = new System.Drawing.Point(619, 394);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(75, 51);
            this.button2.TabIndex = 2;
            this.button2.Text = "Update";
            this.button2.UseVisualStyleBackColor = false;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.ControlBox = false;
            this.Controls.Add(this.button2);
            this.Controls.Add(this.button1);
            this.Controls.Add(this.dataGridView1);
            this.Name = "ATTRIBUTE_FORM";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "ATTRIBUTE";
            this.Load += new System.EventHandler(this.Form1_Load);
            ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).EndInit();
            this.ResumeLayout(false);
        }
        private System.Windows.Forms.DataGridView dataGridView1;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.Button button2;
    }
    public class SIM : GH_Component
    {
        public static string file = "";
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public SIM() : base(name, name, name, "SIM", "File") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("COMMENT", "COMMENT", "COMMENT", GH_ParamAccess.item, "注释");
            pManager.AddTextParameter("HEADER", "HEADER", "HEADER", GH_ParamAccess.item, "[HEADER]\n[ENDHEADER]");
            pManager.AddTextParameter("PARAMETER", "PARAMETER", "PARAMETER", GH_ParamAccess.item, "[PARAMETER]\n[ENDPARAMETER]");
            pManager.AddTextParameter("ATTRIBUTE", "ATTRIBUTE", "ATTRIBUTE", GH_ParamAccess.item, "[ATTRIBUTE]\n[ENDATTRIBUTE]");
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("SIM", "SIM", "SIM", GH_ParamAccess.item);
        }
        protected override void AppendAdditionalComponentMenuItems(System.Windows.Forms.ToolStripDropDown menu)
        {
            base.AppendAdditionalComponentMenuItems(menu);
            Menu_AppendItem(menu, "Save", CM_DoClick);
        }
        private void CM_DoClick(object sender, EventArgs e)
        {
            SaveFileDialog s = new SaveFileDialog();
            s.Filter = "SIM文件|*.sim";

            s.Title = "Save";
            s.DefaultExt = "SIM文件|*.sim";

            if (s.ShowDialog() == DialogResult.OK)
            {
                System.IO.File.WriteAllText(s.FileName, file);
            }

            string str = s.FileName;

        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string Comment = "";
            string Header = "";
            string Parameter = "";
            string Attribute = "";
            DA.GetData(0, ref Comment);
            DA.GetData(1, ref Header);
            DA.GetData(2, ref Parameter);
            DA.GetData(3, ref Attribute);
            Parameter = String.Join("\n", Parameter.Split('\n').Where<string>(i => !i.StartsWith("=") && !i.StartsWith("\n")));
            Header = String.Join("\n", Header.Split('\n').Where<string>(i => !i.StartsWith("=") && !i.StartsWith("\n")));
            Attribute = String.Join("\n", Attribute.Split('\n').Where<string>(i => !i.StartsWith("=") && !i.StartsWith("\n")));
            string sim = String.Format("[COMMENT]\n{0}\n[ENDCOMMENT]\n[HEADER]\n{1}\n[ENDHEADER]\n[PARAMETER]\n{2}[ENDPARAMETER]\n[ATTRIBUTE]\n{3}[ENDATTRIBUTE]", Comment, Header, Parameter, Attribute);
            file = sim;
            DA.SetData(0, sim);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.SIMpng;
            }
        }

        public override Guid ComponentGuid => new Guid("D6A12263-F783-4A6D-BE8C-9E458C5F8E88");
    }

    public class XAxis : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public XAxis() : base(name, name, name, "SIM", "Axis") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager) { }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter(name, name, name, GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            DA.SetDataList(0, new List<double>() { 1, 0, 0 });
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.XAxis;
            }
        }
        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-9E458A2A8788");
    }
    public class YAxis : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public YAxis() : base(name, name, name, "SIM", "Axis") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager) { }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter(name, name, name, GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            DA.SetDataList(0, new List<double>() { 0, 1, 0 });
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.YAxis;
            }
        }
        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-9E458B2A8788");
    }
    public class ZAxis : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public ZAxis() : base(name, name, name, "SIM", "Axis") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager) { }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter(name, name, name, GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            DA.SetDataList(0, new List<double>() { 0, 0, 1 });
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.ZAxis;
            }
        }
        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-9E458C2A8788");
    }
    public class XYZ2List : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public XYZ2List() : base(name, name, name, "SIM", "Axis") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager) 
        {
            pManager.AddNumberParameter("X", "X", "X", GH_ParamAccess.item, 0);
            pManager.AddNumberParameter("Y", "Y", "Y", GH_ParamAccess.item, 0);
            pManager.AddNumberParameter("Z", "Z", "Z", GH_ParamAccess.item, 0);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("XYZ", "XYZ", "XYZ", GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            double X = 0;
            double Y = 0;
            double Z = 0;
            DA.GetData(0, ref X);
            DA.GetData(1, ref Y);
            DA.GetData(2, ref Z);
            DA.SetDataList(0, new List<double>() { X, Y, Z });
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.XYZ2List;
            }
        }
        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-9E458D2A8788");
    }
    public class List2XYZ : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public List2XYZ() : base(name, name, name, "SIM", "Axis") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("XYZ", "XYZ", "XYZ", GH_ParamAccess.list, new List<double>() { 0, 0, 0 });
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("X", "X", "X", GH_ParamAccess.item);
            pManager.AddNumberParameter("Y", "Y", "Y", GH_ParamAccess.item);
            pManager.AddNumberParameter("Z", "Z", "Z", GH_ParamAccess.item);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            List<double> XYZ = new List<double>() { 0, 0, 0 };
            DA.GetDataList(0, XYZ);
            DA.SetData(0, XYZ[0]);
            DA.SetData(1, XYZ[1]);
            DA.SetData(2, XYZ[2]);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.List2XYZ;
            }
        }
        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-9E458E2A8788");
    }
    public class D2R : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public D2R() : base(name, name, name, "SIM", "Formula") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("D", "D", "D", GH_ParamAccess.item);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("R", "R", "R", GH_ParamAccess.item);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            double D = 0.00;
            DA.GetData(0, ref D);
            DA.SetData(0, D / 2);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.D2R;
            }
        }
        public override Guid ComponentGuid => new Guid("16A12263-F783-446C-BB5C-9E458E2A8788");
    }
    public class Merge2Number : GH_Component
    {
        public Merge2Number()
          : base("Merge2Number", "Merge2Number",
            "Merge 2 number streams",
            "SIM", "Merge")
        {
        }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("Data1", "D1", "The 1st data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data2", "D2", "The 2nd data of a list", GH_ParamAccess.item, 3.1415926536);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("Result", "R", "Result for merge number", GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            double d1 = 3.1415926536;
            double d2 = 3.1415926536;
            List<double> result = new List<double>();
            if (Params.Input[0].SourceCount == 1)
            {
                DA.GetData(0, ref d1);
                result.Add(d1);
            }
            if (Params.Input[1].SourceCount == 1)
            {
                DA.GetData(1, ref d2);
                result.Add(d2);
            }
            int Pcount = result.Count;
            if (Pcount == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "All parameters have no source or have more than one source");
                return;
            }
            DA.SetDataList(0, result);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.MergeNumber;
            }
        }
        public override Guid ComponentGuid => new Guid("2E2D9963-F783-446C-BB5C-9E458A2F8788");
    }
    public class CircleArray : GH_Component
    {
        public CircleArray()
          : base("CircleArray", "CircleArray",
            "CircleArray",
            "SIM", "Assembly")
        {
        }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddIntegerParameter("N", "N", "N", GH_ParamAccess.item, 12);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddNumberParameter("D", "D", "D", GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            int N = 12;
            DA.GetData(0, ref N);
            if (N < 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "N is no less than 0");
                return;
            }
            List<double> breps = new List<double>();
            for (int i = 0; i < N; i++)
            {
                double angle = 360 / N * i;
                breps.Add(angle);
            }
            DA.SetDataList(0, breps);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Circle2Array;
            }
        }
        public override Guid ComponentGuid => new Guid("3ED12263-F783-446C-BD5C-9E458A2F8A88");
    }
    public class OneCutMore : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public OneCutMore()
          : base("OneCutMore", "OneCutMore",
            "OneCutMore",
            "SIM", "Boolean")
        {
        }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep1", "Brep1", "Brep to be cut", GH_ParamAccess.item);
            pManager.AddBrepParameter("Brep2", "Brep2", "Brep to cut", GH_ParamAccess.list);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "Brep", "Brep", GH_ParamAccess.item);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep Brep1 = null;
            List<Brep> Brep2 = new List<Brep>();
            if (!DA.GetData(0, ref Brep1)) return;
            if (!DA.GetDataList(1, Brep2)) return;
            Brep cut = Brep1;
            foreach (Brep i in Brep2)
            {
                cut = Brep.CreateBooleanDifference(cut, i, 0.01)[0];
            }
            DA.SetData(0, cut);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Cut;
            }
        }
        public override Guid ComponentGuid => new Guid("96A12263-F783-446C-BB5C-9E458A2F8788");
    }
    public class Pyramid : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public Pyramid() : base(name, name, name, "SIM", "Primitive") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("P1", "P1", "P1", GH_ParamAccess.list, new List<double>() { 0, - 100, 0 });
            pManager.AddNumberParameter("P2", "P2", "P2", GH_ParamAccess.list, new List<double>() { 0, 100, 0 });
            pManager.AddNumberParameter("P3", "P3", "P3", GH_ParamAccess.list, new List<double>() { 300, 100, 0 });
            pManager.AddNumberParameter("P4", "P4", "P4", GH_ParamAccess.list, new List<double>() { 300, - 100, 0 });
            pManager.AddNumberParameter("H", "H", "H", GH_ParamAccess.item, 500);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Pyramid", "Pyramid", "Pyramid", GH_ParamAccess.item);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            List<double> P1 = new List<double>();
            List<double> P2 = new List<double>();
            List<double> P3 = new List<double>();
            List<double> P4 = new List<double>();
            double H = 500;
            DA.GetDataList(0, P1);
            DA.GetDataList(1, P2);
            DA.GetDataList(2, P3);
            DA.GetDataList(3, P4);
            DA.GetData(4, ref H);
            List<Point3d> Ps = new List<Point3d>();
            Ps.Add(new Point3d(P1[0], P1[1], P1[2]));
            Ps.Add(new Point3d(P2[0], P2[1], P2[2]));
            Ps.Add(new Point3d(P3[0], P3[1], P3[2]));
            Ps.Add(new Point3d(P4[0], P4[1], P4[2]));
            Ps.Add(new Point3d(P1[0], P1[1], P1[2]));
            Curve c = Curve.CreateInterpolatedCurve(Ps, 1);
            Surface s = Surface.CreateExtrusion(c, new Vector3d(0, 0, H));
            Brep B = Brep.CreateFromSurface(s).CapPlanarHoles(0.0001);
            DA.SetData(0, B);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Pyramid;
            }
        }
        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-1E458E2A8788");
    }
    public class Nut : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public Nut() : base(name, name, name, "SIM", "Primitive") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddNumberParameter("R1", "R1", "R1", GH_ParamAccess.item, 25);
            pManager.AddNumberParameter("R2", "R2", "R2", GH_ParamAccess.item, 33.22);
            pManager.AddNumberParameter("H", "H", "H", GH_ParamAccess.item, 33.4);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Nut", "Nut", "Nut", GH_ParamAccess.item);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            double R1 = 25;
            double R2 = 33.22;
            double H = 33.4;
            DA.GetData(0, ref R1);
            DA.GetData(1, ref R2);
            DA.GetData(2, ref H);
            List<Point3d> Ps = new List<Point3d>();
            Ps.Add(new Point3d(0, R2, 0));
            Ps.Add(new Point3d(R2 * 1.732 / 2, R2 / 2, 0));
            Ps.Add(new Point3d(R2 * 1.732 / 2, - R2 / 2, 0));
            Ps.Add(new Point3d(0, -  R2, 0));
            Ps.Add(new Point3d(- R2 * 1.732 / 2, - R2 / 2, 0));
            Ps.Add(new Point3d(- R2 * 1.732 / 2, R2 / 2, 0));
            Ps.Add(new Point3d(0, R2, 0));
            Curve c = Curve.CreateInterpolatedCurve(Ps, 1);
            Surface s = Surface.CreateExtrusion(c, new Vector3d(0, 0, H));
            Brep B = Brep.CreateFromSurface(s).CapPlanarHoles(0.0001);
            Point3d O = new Point3d(0.0, 0.0, 0.0);
            Vector3d normal = new Vector3d(0.0, 0.0, 1.0);
            Rhino.Geometry.Plane plane = new Rhino.Geometry.Plane(O, normal);
            Circle circle = new Circle(plane, R1);
            Brep cylinder = new Rhino.Geometry.Cylinder(circle, H).ToBrep(true, true);
            Brep cut = Brep.CreateBooleanDifference(B, cylinder, 0.01)[0];
            DA.SetData(0, cut);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Nut;
            }
        }
        public override Guid ComponentGuid => new Guid("A6A12263-1783-446C-BB5C-1E458E2A8788");
    }
    public class Scale : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public Scale() : base(name, name, name, "SIM", "Assembly") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("BrepIn", "BrepIn", "BrepIn", GH_ParamAccess.item);
            pManager.AddNumberParameter("P", "P", "P", GH_ParamAccess.list, new List<double>() { 0, 0, 0 });
            pManager.AddNumberParameter("X", "X", "X", GH_ParamAccess.item, 1);
            pManager.AddNumberParameter("Y", "Y", "Y", GH_ParamAccess.item, 1);
            pManager.AddNumberParameter("Z", "Z", "Z", GH_ParamAccess.item, 1);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("BrepOut", "BrepOut", "BrepOut", GH_ParamAccess.item);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep BrepIn = null;
            List<double> P = new List<double>();
            double X = 0;
            double Y = 0;
            double Z = 0;
            DA.GetData(0, ref BrepIn);
            DA.GetDataList(1, P);
            DA.GetData(2, ref X);
            DA.GetData(3, ref Y);
            DA.GetData(4, ref Z);
            Rhino.Geometry.Plane p = Rhino.Geometry.Plane.WorldXY;
            p.Translate(new Vector3d(P[0], P[1], P[2]));
            Transform t = Transform.Scale(p, X, Y, Z);
            BrepIn.Transform(t);
            DA.SetData(0, BrepIn);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Scale;
            }
        }
        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-1E498E2A8788");
    }
    public class GHX2TMP : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public GHX2TMP() : base(name, name, name, "SIM", "File") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("GHXPath", "GHXPath", "GHXPath", GH_ParamAccess.item);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("TMPPath", "TMPPath", "TMPPath", GH_ParamAccess.item);
            pManager.AddTextParameter("TMP", "TMP", "TMP", GH_ParamAccess.item);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string GHXPath = "";
            DA.GetData(0, ref GHXPath);
            string TMPPath = Path.ChangeExtension(GHXPath, ".tmp");
            DA.SetData(0, TMPPath);
            if (GHXPath.EndsWith(".ghx") && File.Exists(GHXPath))
            {
                string xml = GHXParser(GHXPath);
                DA.SetData(1, xml);
            }
            else
            {
                DA.SetData(1, "");
            }
        }
        public static string GHXParser(string GHXPath)
        {
            XmlDocument doc = new XmlDocument();
            doc.Load(GHXPath);
            XmlNodeList listNodes = doc.DocumentElement.SelectNodes("/Archive/chunks/chunk/chunks/chunk");
            XmlNode ObjectNode = null;
            XmlDocument docOut = new XmlDocument();
            XmlElement xelKey = docOut.CreateElement("TMP");
            docOut.AppendChild(xelKey);
            foreach (XmlNode node in listNodes)
            {
                foreach (XmlAttribute j in node.Attributes)
                {
                    if (j.Value == "DefinitionObjects")
                    {
                        ObjectNode = node;
                        break;
                    }
                    else
                    {
                    }
                }
            }
            foreach (XmlNode node in ObjectNode.SelectNodes("chunks/chunk"))
            {
                XmlElement xelKeyObject = docOut.CreateElement("Object");
                xelKey.AppendChild(xelKeyObject);
                foreach (XmlNode node1 in node.SelectNodes("items/item"))
                {
                    foreach (XmlAttribute j in node1.Attributes)
                    {
                        if (j.Value == "GUID")
                        {
                            XmlElement xelKeyXXX = docOut.CreateElement("GUID");
                            xelKeyXXX.InnerText = node1.InnerText;
                            xelKeyObject.AppendChild(xelKeyXXX);
                        }
                        else if (j.Value == "Name")
                        {
                            XmlElement xelKeyXXX = docOut.CreateElement("Name");
                            if (node1.InnerText == "Number Slider")
                            {
                                xelKeyXXX.InnerText = "Panel";
                            }
                            else
                            {
                                xelKeyXXX.InnerText = node1.InnerText;
                            }
                            xelKeyObject.AppendChild(xelKeyXXX);
                        }
                        else
                        {
                        }
                    }
                }
                foreach (XmlNode node1 in node.SelectNodes("chunks/chunk"))
                {
                    foreach (XmlAttribute j in node1.Attributes)
                    {
                        if (j.Value == "Container")
                        {
                            List<string> strings = new List<string>();
                            foreach (XmlNode k in node1.SelectNodes("items/item"))
                            {
                                strings.Add(k.InnerXml);
                            }
                            if (strings.Contains("Panel"))
                            {
                                XmlElement xelKeyOut = docOut.CreateElement("Output");
                                xelKeyObject.AppendChild(xelKeyOut);
                                foreach (XmlNode k in node1.SelectNodes("items/item"))
                                {
                                    foreach (XmlAttribute m in k.Attributes)
                                    {
                                        Console.WriteLine(m.Value);
                                        if (m.Value == "InstanceGuid")
                                        {
                                            XmlElement xelKeyXXX = docOut.CreateElement("GUID");
                                            xelKeyXXX.InnerText = k.InnerText;
                                            xelKeyOut.AppendChild(xelKeyXXX);
                                        }
                                        else if (m.Value == "UserText")
                                        {
                                            XmlElement xelKeyXXX = docOut.CreateElement("Value");
                                            xelKeyXXX.InnerText = k.InnerText;
                                            xelKeyOut.AppendChild(xelKeyXXX);
                                        }
                                        else
                                        {
                                        }
                                    }
                                }
                            }
                            else if (strings.Contains("Number Slider"))
                            {
                                XmlElement xelKeyOut = docOut.CreateElement("Output");
                                xelKeyObject.AppendChild(xelKeyOut);
                                foreach (XmlNode k in node1.SelectNodes("items/item"))
                                {
                                    foreach (XmlAttribute m in k.Attributes)
                                    {
                                        Console.WriteLine(m.Value);
                                        if (m.Value == "InstanceGuid")
                                        {
                                            XmlElement xelKeyXXX = docOut.CreateElement("GUID");
                                            xelKeyXXX.InnerText = k.InnerText;
                                            xelKeyOut.AppendChild(xelKeyXXX);
                                        }
                                        else if (m.Value == "NickName")
                                        {
                                            XmlElement xelKeyXXX = docOut.CreateElement(String.Format("__{0}Value", k.InnerText));
                                            foreach (XmlNode n in node1.SelectNodes("chunks/chunk/items/item"))
                                            {
                                                foreach (XmlAttribute p in n.Attributes)
                                                {
                                                    if (p.Value == "Value")
                                                    {
                                                        xelKeyXXX.InnerText = n.InnerText;
                                                    }
                                                    else
                                                    {
                                                    }
                                                }
                                            }
                                            xelKeyOut.AppendChild(xelKeyXXX);
                                        }
                                        else
                                        {
                                        }
                                    }
                                }
                            }
                            else
                            {
                                foreach (XmlNode k in node1.SelectNodes("items/item"))
                                {
                                    foreach (XmlAttribute m in k.Attributes)
                                    {
                                        if (m.Value == "Hidden")
                                        {
                                            XmlElement xelKeyOut = docOut.CreateElement("Hidden");
                                            xelKeyObject.AppendChild(xelKeyOut);
                                            xelKeyOut.InnerText = k.InnerText;
                                        }
                                        else
                                        {
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                        }
                    }
                }
                foreach (XmlNode node1 in node.SelectNodes("chunks/chunk/chunks/chunk"))
                {
                    foreach (XmlAttribute j in node1.Attributes)
                    {
                        if (j.Value == "Attributes")
                        {
                            foreach (XmlNode k in node1.SelectNodes("items/item"))
                            {
                                foreach (XmlAttribute m in k.Attributes)
                                {
                                    if (m.Value == "Pivot")
                                    {
                                        foreach (XmlNode n in k.ChildNodes)
                                        {
                                            XmlElement xelKeyXXX = docOut.CreateElement("Position_" + n.Name);
                                            xelKeyXXX.InnerText = n.InnerText;
                                            xelKeyObject.AppendChild(xelKeyXXX);
                                        }
                                    }
                                    else
                                    {
                                    }
                                }
                            }
                        }
                        else if (j.Value == "param_input")
                        {
                            XmlElement xelKeyIn = docOut.CreateElement("Input");
                            xelKeyObject.AppendChild(xelKeyIn);
                            foreach (XmlNode k in node1.SelectNodes("items/item"))
                            {
                                foreach (XmlAttribute m in k.Attributes)
                                {
                                    if (m.Value == "NickName")
                                    {
                                        XmlElement xelKeyXXX = docOut.CreateElement("Name");
                                        xelKeyXXX.InnerText = k.InnerText;
                                        xelKeyIn.AppendChild(xelKeyXXX);
                                    }
                                    else if (m.Value == "InstanceGuid")
                                    {
                                        XmlElement xelKeyXXX = docOut.CreateElement("GUID");
                                        xelKeyXXX.InnerText = k.InnerText;
                                        xelKeyIn.AppendChild(xelKeyXXX);
                                    }
                                    else if (m.Value == "Source")
                                    {
                                        XmlElement xelKeyXXX = docOut.CreateElement("Source");
                                        xelKeyXXX.InnerText = k.InnerText;
                                        xelKeyIn.AppendChild(xelKeyXXX);
                                    }
                                    else
                                    {
                                    }
                                }
                            }
                        }
                        else if (j.Value == "param_output")
                        {
                            XmlElement xelKeyOut = docOut.CreateElement("Output");
                            xelKeyObject.AppendChild(xelKeyOut);
                            foreach (XmlNode k in node1.SelectNodes("items/item"))
                            {
                                foreach (XmlAttribute m in k.Attributes)
                                {
                                    if (m.Value == "NickName")
                                    {
                                        XmlElement xelKeyXXX = docOut.CreateElement("Name");
                                        xelKeyXXX.InnerText = k.InnerText;
                                        xelKeyOut.AppendChild(xelKeyXXX);
                                    }
                                    else if (m.Value == "InstanceGuid")
                                    {
                                        XmlElement xelKeyXXX = docOut.CreateElement("GUID");
                                        xelKeyXXX.InnerText = k.InnerText;
                                        xelKeyOut.AppendChild(xelKeyXXX);
                                    }
                                    else if (m.Value == "Hidden")
                                    {
                                        XmlElement xelKeyXXX = docOut.CreateElement("Hidden");
                                        xelKeyXXX.InnerText = k.InnerText;
                                        xelKeyOut.AppendChild(xelKeyXXX);
                                    }
                                    else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }
            }
            string XMLPath = Path.ChangeExtension(GHXPath, ".tmp");
            docOut.Save(XMLPath);
            return XMLReader(XMLPath);
        }
        public static string XMLReader(string XMLPath)
        {
            StringBuilder Builder = new StringBuilder();
            using (StreamReader Reader = new StreamReader(XMLPath))
            {
                string Line;
                while ((Line = Reader.ReadLine()) != null)
                {
                    Builder.AppendLine(Line);
                }
            }
            return Builder.ToString();
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.TMP;
            }
        }
        public override Guid ComponentGuid => new Guid("ADA12263-F783-446C-BB5C-9E458A2A8788");
    }
    //public class XML2DB : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public XML2DB() : base(name, name, name, "SIM", "File") { }
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("XMLPath", "XMLPath", "XMLPath", GH_ParamAccess.item);
    //        pManager.AddBooleanParameter("Run", "Run", "Run", GH_ParamAccess.item, false);
    //    }
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddBooleanParameter("Result", "Result", "Result", GH_ParamAccess.item);
    //    }
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        DA.SetData(0, false);
    //        string XML = "";
    //        bool Run = false;
    //        if (!DA.GetData(0, ref XML))
    //        {
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        if (!File.Exists(XML))
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Path for *.xml file is not existed");
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        if (Path.GetExtension(XML) != ".xml")
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Path suffix for XML file is not *.xml");
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        if (!DA.GetData(1, ref Run))
    //        {
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        if (Run == false)
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Button for running is off");
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        ParserXML(XML);
    //        DA.SetData(0, true);
    //    }
    //    public static void ParserXML(string XML)
    //    {
    //        string URL = "mongodb://localhost:27017";
    //        MongoClient Client = new MongoClient(URL);
    //        IMongoDatabase Database = Client.GetDatabase("ShipInformationModel");
    //        IMongoCollection<BsonDocument> Collection = Database.GetCollection<BsonDocument>("REFERENCE");
    //        string XMLPath = XML;
    //        Collection.DeleteMany(Builders<BsonDocument>.Filter.Eq("XMLPath", XMLPath));
    //        var document1 = new BsonDocument { { "XMLPath", XMLPath } };
    //        Collection.InsertOne(document1);
    //        XmlDocument doc = new XmlDocument();
    //        doc.Load(XMLPath);
    //        XmlElement root = doc.DocumentElement;
    //        XmlNodeList listNodes = root.SelectNodes("/GHX/Object");
    //        foreach (XmlNode node in listNodes)
    //        {
    //            foreach (XmlNode childNode in node.ChildNodes)
    //            {
    //                if (childNode.Name == "Output")
    //                {
    //                    foreach (XmlNode childNode1 in childNode.ChildNodes)
    //                    {
    //                        if (childNode1.Name.StartsWith("__") && childNode1.Name.EndsWith("Value"))
    //                        {
    //                            var document = new BsonDocument { { "XMLPath", XMLPath }, { childNode1.Name, childNode1.InnerText } };
    //                            Collection.InsertOne(document);
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                }
    //                else
    //                {
    //                }
    //            }
    //        }
    //    }
    //    public override GH_Exposure Exposure => GH_Exposure.primary;
    //    protected override System.Drawing.Bitmap Icon => null;
    //    public override Guid ComponentGuid => new Guid("AEA1B263-F783-446C-BB5C-9E458A2F8788");
    //}
    //public class DB2XML : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public DB2XML() : base(name, name, name, "SIM", "File") { }
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddBooleanParameter("Run", "Run", "Run", GH_ParamAccess.item, false);
    //    }
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("XMLPath", "XMLPath", "XMLPath", GH_ParamAccess.list);
    //    }
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        bool Run = false;
    //        DA.GetData(0, ref Run);
    //        if (!Run)
    //        {
    //            return;
    //        }
    //        else
    //        {
    //            string URL = "mongodb://localhost:27017";
    //            MongoClient Client = new MongoClient(URL);
    //            IMongoDatabase Database = Client.GetDatabase("ShipInformationModel");
    //            IMongoCollection<BsonDocument> Collection = Database.GetCollection<BsonDocument>("REFERENCE");
    //            var result = Collection.Find(Builders<BsonDocument>.Filter.Exists("XMLPath")).Limit(1000);
    //            List<string> xml = new List<string>();
    //            foreach (var item in result.ToEnumerable())
    //            {
    //                xml.Add(item["XMLPath"].ToString());
    //            }
    //            List<string> xml2 = new List<string>();
    //            xml2 = xml.Distinct().ToList();
    //            DA.SetDataList(0, xml2);
    //        }
    //    }
    //    public override GH_Exposure Exposure => GH_Exposure.primary;
    //    protected override System.Drawing.Bitmap Icon => null;
    //    public override Guid ComponentGuid => new Guid("AEA1B263-F783-446C-BF5C-9E458A2F8788");
    //}
    //public class DB2Parameter : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public DB2Parameter() : base(name, name, name, "SIM", "File") { }
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("XMLPath", "XMLPath", "XMLPath", GH_ParamAccess.item);
    //    }
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("Parameter", "Parameter", "Parameter", GH_ParamAccess.list);
    //    }
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        string XMLPath = "";
    //        DA.GetData(0, ref XMLPath);
    //        string URL = "mongodb://localhost:27017";
    //        MongoClient Client = new MongoClient(URL);
    //        IMongoDatabase Database = Client.GetDatabase("ShipInformationModel");
    //        IMongoCollection<BsonDocument> Collection = Database.GetCollection<BsonDocument>("REFERENCE");
    //        var result = Collection.Find(Builders<BsonDocument>.Filter.Exists("XMLPath")).Limit(1000);
    //        List<string> xml = new List<string>();
    //        foreach (var item in result.ToEnumerable())
    //        {
    //            if (item["XMLPath"] == XMLPath)
    //            {
    //                string str = item.ToString().Replace('\"', ' ').Replace('{', ' ').Replace('}', ' ');
    //                string[] arr = str.Split(',');
    //                if (arr.Length == 3)
    //                {
    //                    xml.Add(arr[2].Split(':')[0].Trim().Replace("__", "").Replace("Value", "") + "=" + arr[2].Split(':')[1].Trim());
    //                }
    //            }
    //        }
    //        DA.SetDataList(0, xml);
    //    }
    //    public override GH_Exposure Exposure => GH_Exposure.primary;
    //    protected override System.Drawing.Bitmap Icon => null;
    //    public override Guid ComponentGuid => new Guid("AEA1B263-F783-446C-BF9C-9E458A2F8788");
    //}
    //public class ATT2DB : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public ATT2DB() : base(name, name, name, "SIM", "File") { }
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("ATTPath", "ATTPath", "ATTPath", GH_ParamAccess.item);
    //        pManager.AddBooleanParameter("Run", "Run", "Run", GH_ParamAccess.item, false);
    //    }
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddBooleanParameter("Result", "Result", "Result", GH_ParamAccess.item);
    //    }
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        DA.SetData(0, false);
    //        string ATT = "";
    //        bool Run = false;
    //        if (!DA.GetData(0, ref ATT))
    //        {
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        if (!File.Exists(ATT))
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Path for *.att file is not existed");
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        if (Path.GetExtension(ATT) != ".att")
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Path suffix for ATT file is not *.att");
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        if (!DA.GetData(1, ref Run))
    //        {
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        if (Run == false)
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Button for running is off");
    //            return;
    //        }
    //        else
    //        {
    //        }
    //        ParserATT(ATT);
    //        DA.SetData(0, true);
    //    }
    //    public static void ParserATT(string ATT)
    //    {
    //        string URL = "mongodb://localhost:27017";
    //        MongoClient Client = new MongoClient(URL);
    //        IMongoDatabase Database = Client.GetDatabase("ShipInformationModel");
    //        IMongoCollection<BsonDocument> Collection = Database.GetCollection<BsonDocument>("ATTRIBUTE");
    //        Collection.DeleteMany(Builders<BsonDocument>.Filter.Eq("ATTPath", ATT));
    //        var document1 = new BsonDocument { { "ATT", ATT } };
    //        Collection.InsertOne(document1);
    //    }
    //    public override GH_Exposure Exposure => GH_Exposure.primary;
    //    protected override System.Drawing.Bitmap Icon => null;
    //    public override Guid ComponentGuid => new Guid("AEA1B263-F783-446C-BB5C-9E45852F8788");
    //}
    //public class DB2ATT : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public DB2ATT() : base(name, name, name, "SIM", "File") { }
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddBooleanParameter("Run", "Run", "Run", GH_ParamAccess.item, false);
    //    }
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("ATTPath", "ATTPath", "ATTPath", GH_ParamAccess.list);
    //    }
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        bool Run = false;
    //        DA.GetData(0, ref Run);
    //        if (!Run)
    //        {
    //            return;
    //        }
    //        else
    //        {
    //            string URL = "mongodb://localhost:27017";
    //            MongoClient Client = new MongoClient(URL);
    //            IMongoDatabase Database = Client.GetDatabase("ShipInformationModel");
    //            IMongoCollection<BsonDocument> Collection = Database.GetCollection<BsonDocument>("ATTRIBUTE");
    //            var result = Collection.Find(Builders<BsonDocument>.Filter.Exists("ATT")).Limit(1000);
    //            List<string> att = new List<string>();
    //            foreach (var item in result.ToEnumerable())
    //            {
    //                att.Add(item["ATT"].ToString());
    //            }
    //            List<string> att2 = new List<string>();
    //            att2 = att.Distinct().ToList();
    //            DA.SetDataList(0, att2);
    //        }
    //    }
    //    public override GH_Exposure Exposure => GH_Exposure.primary;
    //    protected override System.Drawing.Bitmap Icon => null;
    //    public override Guid ComponentGuid => new Guid("AEA1B263-F783-446C-BF5C-9E451A2F8788");
    //}

    public class MergeBrep12 : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public MergeBrep12() : base(name, name, name, "SIM", "Merge") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Data1", "D1", "The 1st data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data2", "D2", "The 2nd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data3", "D3", "The 3rd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data4", "D4", "The 4th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data5", "D5", "The 5th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data6", "D6", "The 6th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data7", "D7", "The 7th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data8", "D8", "The 8th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data9", "D9", "The 9th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data10", "D10", "The 10th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data11", "D11", "The 11th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data12", "D12", "The 12th data of a list", GH_ParamAccess.item);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Result", "R", "Result for merge brep", GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep b = new Rhino.Geometry.Sphere(new Point3d(0, 0, 0), 0.0001).ToBrep();
            Brep b1 = b;
            Brep b2 = b;
            Brep b3 = b;
            Brep b4 = b;
            Brep b5 = b;
            Brep b6 = b;
            Brep b7 = b;
            Brep b8 = b;
            Brep b9 = b;
            Brep b10 = b;
            Brep b11 = b;
            Brep b12 = b;
            List<Brep> result = new List<Brep>();
            if (Params.Input[0].SourceCount == 1)
            {
                DA.GetData(0, ref b1);
                result.Add(b1);
            }
            if (Params.Input[1].SourceCount == 1)
            {
                DA.GetData(0, ref b2);
                result.Add(b2);
            }
            if (Params.Input[2].SourceCount == 1)
            {
                DA.GetData(0, ref b3);
                result.Add(b3);
            }
            if (Params.Input[3].SourceCount == 1)
            {
                DA.GetData(0, ref b4);
                result.Add(b4);
            }
            if (Params.Input[4].SourceCount == 1)
            {
                DA.GetData(0, ref b5);
                result.Add(b5);
            }
            if (Params.Input[5].SourceCount == 1)
            {
                DA.GetData(0, ref b6);
                result.Add(b6);
            }
            if (Params.Input[6].SourceCount == 1)
            {
                DA.GetData(0, ref b7);
                result.Add(b7);
            }
            if (Params.Input[7].SourceCount == 1)
            {
                DA.GetData(0, ref b8);
                result.Add(b8);
            }
            if (Params.Input[8].SourceCount == 1)
            {
                DA.GetData(0, ref b9);
                result.Add(b9);
            }
            if (Params.Input[9].SourceCount == 1)
            {
                DA.GetData(0, ref b10);
                result.Add(b10);
            }
            if (Params.Input[10].SourceCount == 1)
            {
                DA.GetData(0, ref b11);
                result.Add(b11);
            }
            if (Params.Input[11].SourceCount == 1)
            {
                DA.GetData(0, ref b12);
                result.Add(b12);
            }
            int Pcount = result.Count;
            if (Pcount == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "All parameters are null");
                return;
            }
            DA.SetDataList(0, result);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.MergeBrep;
            }
        }
        public override Guid ComponentGuid => new Guid("AED12263-F783-446C-BB5C-9E458A2FC788");
    }
    public class MergeBrep11 : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public MergeBrep11() : base(name, name, name, "SIM", "Merge") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Data1", "D1", "The 1st data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data2", "D2", "The 2nd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data3", "D3", "The 3rd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data4", "D4", "The 4th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data5", "D5", "The 5th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data6", "D6", "The 6th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data7", "D7", "The 7th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data8", "D8", "The 8th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data9", "D9", "The 9th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data10", "D10", "The 10th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data11", "D11", "The 11th data of a list", GH_ParamAccess.item);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Result", "R", "Result for merge brep", GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep b = new Rhino.Geometry.Sphere(new Point3d(0, 0, 0), 0.0001).ToBrep();
            Brep b1 = b;
            Brep b2 = b;
            Brep b3 = b;
            Brep b4 = b;
            Brep b5 = b;
            Brep b6 = b;
            Brep b7 = b;
            Brep b8 = b;
            Brep b9 = b;
            Brep b10 = b;
            Brep b11 = b;
            List<Brep> result = new List<Brep>();
            if (Params.Input[0].SourceCount == 1)
            {
                DA.GetData(0, ref b1);
                result.Add(b1);
            }
            if (Params.Input[1].SourceCount == 1)
            {
                DA.GetData(0, ref b2);
                result.Add(b2);
            }
            if (Params.Input[2].SourceCount == 1)
            {
                DA.GetData(0, ref b3);
                result.Add(b3);
            }
            if (Params.Input[3].SourceCount == 1)
            {
                DA.GetData(0, ref b4);
                result.Add(b4);
            }
            if (Params.Input[4].SourceCount == 1)
            {
                DA.GetData(0, ref b5);
                result.Add(b5);
            }
            if (Params.Input[5].SourceCount == 1)
            {
                DA.GetData(0, ref b6);
                result.Add(b6);
            }
            if (Params.Input[6].SourceCount == 1)
            {
                DA.GetData(0, ref b7);
                result.Add(b7);
            }
            if (Params.Input[7].SourceCount == 1)
            {
                DA.GetData(0, ref b8);
                result.Add(b8);
            }
            if (Params.Input[8].SourceCount == 1)
            {
                DA.GetData(0, ref b9);
                result.Add(b9);
            }
            if (Params.Input[9].SourceCount == 1)
            {
                DA.GetData(0, ref b10);
                result.Add(b10);
            }
            if (Params.Input[10].SourceCount == 1)
            {
                DA.GetData(0, ref b11);
                result.Add(b11);
            }
            int Pcount = result.Count;
            if (Pcount == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "All parameters are null");
                return;
            }
            DA.SetDataList(0, result);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.MergeBrep;
            }
        }
        public override Guid ComponentGuid => new Guid("AED12263-F783-446C-BB5C-9E458A2FD788");
    }
    public class MergeBrep10 : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public MergeBrep10() : base(name, name, name, "SIM", "Merge") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Data1", "D1", "The 1st data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data2", "D2", "The 2nd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data3", "D3", "The 3rd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data4", "D4", "The 4th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data5", "D5", "The 5th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data6", "D6", "The 6th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data7", "D7", "The 7th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data8", "D8", "The 8th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data9", "D9", "The 9th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data10", "D10", "The 10th data of a list", GH_ParamAccess.item);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Result", "R", "Result for merge brep", GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep b = new Rhino.Geometry.Sphere(new Point3d(0, 0, 0), 0.0001).ToBrep();
            Brep b1 = b;
            Brep b2 = b;
            Brep b3 = b;
            Brep b4 = b;
            Brep b5 = b;
            Brep b6 = b;
            Brep b7 = b;
            Brep b8 = b;
            Brep b9 = b;
            Brep b10 = b;
            List<Brep> result = new List<Brep>();
            if (Params.Input[0].SourceCount == 1)
            {
                DA.GetData(0, ref b1);
                result.Add(b1);
            }
            if (Params.Input[1].SourceCount == 1)
            {
                DA.GetData(0, ref b2);
                result.Add(b2);
            }
            if (Params.Input[2].SourceCount == 1)
            {
                DA.GetData(0, ref b3);
                result.Add(b3);
            }
            if (Params.Input[3].SourceCount == 1)
            {
                DA.GetData(0, ref b4);
                result.Add(b4);
            }
            if (Params.Input[4].SourceCount == 1)
            {
                DA.GetData(0, ref b5);
                result.Add(b5);
            }
            if (Params.Input[5].SourceCount == 1)
            {
                DA.GetData(0, ref b6);
                result.Add(b6);
            }
            if (Params.Input[6].SourceCount == 1)
            {
                DA.GetData(0, ref b7);
                result.Add(b7);
            }
            if (Params.Input[7].SourceCount == 1)
            {
                DA.GetData(0, ref b8);
                result.Add(b8);
            }
            if (Params.Input[8].SourceCount == 1)
            {
                DA.GetData(0, ref b9);
                result.Add(b9);
            }
            if (Params.Input[9].SourceCount == 1)
            {
                DA.GetData(0, ref b10);
                result.Add(b10);
            }
            int Pcount = result.Count;
            if (Pcount == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "All parameters are null");
                return;
            }
            DA.SetDataList(0, result);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.MergeBrep;
            }
        }
        public override Guid ComponentGuid => new Guid("AED12263-F783-446C-BB5C-9E458A2F9788");
    }
    public class MergeBrep9 : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public MergeBrep9() : base(name, name, name, "SIM", "Merge") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Data1", "D1", "The 1st data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data2", "D2", "The 2nd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data3", "D3", "The 3rd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data4", "D4", "The 4th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data5", "D5", "The 5th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data6", "D6", "The 6th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data7", "D7", "The 7th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data8", "D8", "The 8th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data9", "D9", "The 9th data of a list", GH_ParamAccess.item);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Result", "R", "Result for merge brep", GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep b = new Rhino.Geometry.Sphere(new Point3d(0, 0, 0), 0.0001).ToBrep();
            Brep b1 = b;
            Brep b2 = b;
            Brep b3 = b;
            Brep b4 = b;
            Brep b5 = b;
            Brep b6 = b;
            Brep b7 = b;
            Brep b8 = b;
            Brep b9 = b;
            List<Brep> result = new List<Brep>();
            if (Params.Input[0].SourceCount == 1)
            {
                DA.GetData(0, ref b1);
                result.Add(b1);
            }
            if (Params.Input[1].SourceCount == 1)
            {
                DA.GetData(0, ref b2);
                result.Add(b2);
            }
            if (Params.Input[2].SourceCount == 1)
            {
                DA.GetData(0, ref b3);
                result.Add(b3);
            }
            if (Params.Input[3].SourceCount == 1)
            {
                DA.GetData(0, ref b4);
                result.Add(b4);
            }
            if (Params.Input[4].SourceCount == 1)
            {
                DA.GetData(0, ref b5);
                result.Add(b5);
            }
            if (Params.Input[5].SourceCount == 1)
            {
                DA.GetData(0, ref b6);
                result.Add(b6);
            }
            if (Params.Input[6].SourceCount == 1)
            {
                DA.GetData(0, ref b7);
                result.Add(b7);
            }
            if (Params.Input[7].SourceCount == 1)
            {
                DA.GetData(0, ref b8);
                result.Add(b8);
            }
            if (Params.Input[8].SourceCount == 1)
            {
                DA.GetData(0, ref b9);
                result.Add(b9);
            }
            int Pcount = result.Count;
            if (Pcount == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "All parameters are null");
                return;
            }
            DA.SetDataList(0, result);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.MergeBrep;
            }
        }
        public override Guid ComponentGuid => new Guid("AED122A3-F783-446C-BB5C-9E458A2F9788");
    }
    /// <summary>
    /// 2022/10/23
    /// </summary>
    public class MergeBrep2 : GH_Component
    {
        public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
        public MergeBrep2() : base(name, name, name, "SIM", "Merge") { }
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep1", "Brep1", "Brep1", GH_ParamAccess.item);
            pManager.AddBrepParameter("Brep2", "Brep2", "Brep2", GH_ParamAccess.item);
        }
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Breps", "Breps", "Breps", GH_ParamAccess.list);
        }
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep Brep1 = null;
            Brep Brep2 = null;
            List<Brep> Breps = new List<Brep>();
            DA.GetData(0, ref Brep1);
            DA.GetData(1, ref Brep2);
            Breps.Add(Brep1);
            Breps.Add(Brep2);
            DA.SetDataList(0, Breps);
        }
        public override GH_Exposure Exposure => GH_Exposure.primary;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.MergeBrep220221023;
            }
        }
        public override Guid ComponentGuid => new Guid("AED122A3-F783-446C-BB5C-9E458A9F9788");
    }
    /// <summary>
    /// 2022/10/23
    /// </summary>
    //public class Template : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public Template() : base(name, name, name, "SIM", "File") { }
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("Comment", "Comment", "Comment", GH_ParamAccess.item, "注释");
    //        pManager.AddTextParameter("XMLPath", "XMLPath", "XMLPath", GH_ParamAccess.item);
    //        pManager.AddTextParameter("ATTPath", "ATTPath", "ATTPath", GH_ParamAccess.item);
    //        pManager.AddTextParameter("Header", "Header", "Header", GH_ParamAccess.item, "[HEADER]\n[ENDHEADER]");
    //        pManager.AddTextParameter("Parameter", "Parameter", "Parameter", GH_ParamAccess.item, "[PARAMETER]\n[ENDPARAMETER]");
    //    }
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("Template", "Template", "Template", GH_ParamAccess.item);
    //        pManager.AddTextParameter("XML", "XML", "XML", GH_ParamAccess.item);
    //        pManager.AddTextParameter("ATT", "ATT", "ATT", GH_ParamAccess.item);
    //    }
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        string Comment = "";
    //        string XMLPath = "";
    //        string ATTPath = "";
    //        string Header = "";
    //        string Parameter = "";
    //        DA.GetData(0, ref Comment);
    //        DA.GetData(1, ref XMLPath);
    //        DA.GetData(2, ref ATTPath);
    //        DA.GetData(3, ref Header);
    //        DA.GetData(4, ref Parameter);
    //        if (XMLPath.EndsWith(".xml") && ATTPath.EndsWith(".att"))
    //        {
    //            string Template = String.Format("[COMMENT]\n{0}\n[ENDCOMMENT]\nREFERENCE {1}\nATTRIBUTE {2}\n{3}\n{4}", Comment, XMLPath, ATTPath, Header, Parameter);
    //            if (File.Exists(XMLPath))
    //            {
    //                DA.SetData(1, XMLParser(XMLPath, XMLPath, Parameter));
    //            }
    //            else
    //            {
    //            }
    //            if (File.Exists(ATTPath))
    //            {
    //                DA.SetData(2, ATTParser(ATTPath));
    //            }
    //            else
    //            {
    //            }
    //            DA.SetData(0, Template);
    //        }
    //        else
    //        {
    //            DA.SetData(0, "ERROR");
    //        }
    //    }
    //    public static string XMLParser(string XMLPath, string GUID, string Parameter)
    //    {
    //        Dictionary<int, Dictionary<string, string>> maps = new Dictionary<int, Dictionary<string, string>>();
    //        XmlDocument doc = new XmlDocument();
    //        doc.Load(XMLPath);
    //        XmlNodeList Nodes = doc.DocumentElement.SelectNodes("/GHX/Object");
    //        int Count = 1;
    //        foreach (XmlNode Node in Nodes)
    //        {
    //            Dictionary<string, string> map = new Dictionary<string, string>();
    //            int inputCount = 0;
    //            int outputCount = 0;
    //            foreach (XmlNode childNode in Node.ChildNodes)
    //            {
    //                if (childNode.Name != "Input" && childNode.Name != "Output")
    //                {
    //                    map[childNode.Name] = childNode.InnerText;
    //                }
    //                else
    //                {
    //                    if (childNode.Name == "Input")
    //                    {
    //                        foreach (XmlNode subChildNode in childNode.ChildNodes)
    //                        {
    //                            map[String.Format("{0}_{1}_{2}", childNode.Name, inputCount, subChildNode.Name)] = subChildNode.InnerText;
    //                        }
    //                        inputCount++;
    //                    }
    //                    else
    //                    {
    //                        foreach (XmlNode subChildNode in childNode.ChildNodes)
    //                        {
    //                            map[String.Format("{0}_{1}_{2}", childNode.Name, outputCount, subChildNode.Name)] = subChildNode.InnerText;
    //                        }
    //                        outputCount++;
    //                    }
    //                }
    //            }
    //            maps[Count] = map;
    //            Count++;
    //        }
    //        GH_Document GrasshopperDocument = Instances.ActiveCanvas.Document;
    //        if (!GrasshopperDocument.Objects.Select(i => i.Name).Contains(GUID))
    //        {
    //            GH_Group g = new GH_Group();
    //            g.NickName = Path.GetFileName(XMLPath);
    //            g.Name = GUID;
    //            g.Colour = Color.FromArgb(255, 255, 255, 255);
    //            GrasshopperDocument.AddObject(g, false, GrasshopperDocument.ObjectCount);
    //            List<Object> objects = new List<Object>();
    //            foreach (var item in maps)
    //            {
    //                if (item.Value["Name"] == "Panel")
    //                {
    //                    GH_Panel aPanel = new GH_Panel();
    //                    GrasshopperDocument.AddObject(aPanel, false);
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    aPanel.Attributes.Pivot = p;
    //                    aPanel.Properties.Colour = Color.White;
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Output_0"))
    //                        {
    //                            if (key == "Output_0_GUID")
    //                            {
    //                            }
    //                            else if (key == "Output_0_Value")
    //                            {
    //                                aPanel.UserText = item.Value[key];
    //                                break;
    //                            }
    //                            else
    //                            {
    //                                aPanel.UserText = item.Value[key];
    //                                aPanel.Description = key;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    int len = aPanel.UserText.Length;
    //                    RectangleF r = new RectangleF(0.0F, 0.0F, Convert.ToSingle(len * 20), 20.0F);
    //                    aPanel.Attributes.Bounds = r;
    //                    aPanel.Attributes.ExpireLayout();
    //                    g.AddObject(aPanel.InstanceGuid);
    //                    objects.Add(aPanel);
    //                }
    //                else if (item.Value["Name"] == "Box")
    //                {
    //                    SIMComponents.Box box = new SIMComponents.Box();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    box.Attributes.Pivot = p;
    //                    // 2022.9.19
    //                    // box.ExpirePreview(false);
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        box.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                box.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(box, false);
    //                    g.AddObject(box.InstanceGuid);
    //                    objects.Add(box);
    //                }
    //                else if (item.Value["Name"] == "XAxis")
    //                {
    //                    SIMComponents.XAxis axis = new SIMComponents.XAxis();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    axis.Attributes.Pivot = p;
    //                    // 2022.9.19
    //                    // box.ExpirePreview(false);
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                axis.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(axis, false);
    //                    g.AddObject(axis.InstanceGuid);
    //                    objects.Add(axis);
    //                }
    //                else if (item.Value["Name"] == "YAxis")
    //                {
    //                    SIMComponents.YAxis axis = new SIMComponents.YAxis();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    axis.Attributes.Pivot = p;
    //                    // 2022.9.19
    //                    // box.ExpirePreview(false);
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                axis.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(axis, false);
    //                    g.AddObject(axis.InstanceGuid);
    //                    objects.Add(axis);
    //                }
    //                else if (item.Value["Name"] == "ZAxis")
    //                {
    //                    SIMComponents.ZAxis axis = new SIMComponents.ZAxis();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    axis.Attributes.Pivot = p;
    //                    // 2022.9.19
    //                    // box.ExpirePreview(false);
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                axis.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(axis, false);
    //                    g.AddObject(axis.InstanceGuid);
    //                    objects.Add(axis);
    //                }
    //                else if (item.Value["Name"] == "XYZ2List")
    //                {
    //                    SIMComponents.XYZ2List xyz2list = new SIMComponents.XYZ2List();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    xyz2list.Attributes.Pivot = p;
    //                    // 2022.9.19
    //                    // box.ExpirePreview(false);
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                xyz2list.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(xyz2list, false);
    //                    g.AddObject(xyz2list.InstanceGuid);
    //                    objects.Add(xyz2list);
    //                }
    //                else if (item.Value["Name"] == "List2XYZ")
    //                {
    //                    SIMComponents.List2XYZ list2xyz = new SIMComponents.List2XYZ();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    list2xyz.Attributes.Pivot = p;
    //                    // 2022.9.19
    //                    // box.ExpirePreview(false);
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                list2xyz.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(list2xyz, false);
    //                    g.AddObject(list2xyz.InstanceGuid);
    //                    objects.Add(list2xyz);
    //                }
    //                else if (item.Value["Name"] == "Scale")
    //                {
    //                    SIMComponents.Scale scale = new SIMComponents.Scale();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    scale.Attributes.Pivot = p;
    //                    // 2022.9.19
    //                    // box.ExpirePreview(false);
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        scale.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                scale.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(scale, false);
    //                    g.AddObject(scale.InstanceGuid);
    //                    objects.Add(scale);
    //                }
    //                else if (item.Value["Name"] == "Pyramid")
    //                {
    //                    SIMComponents.Pyramid pyramid = new SIMComponents.Pyramid();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    pyramid.Attributes.Pivot = p;
    //                    // 2022.9.19
    //                    // box.ExpirePreview(false);
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        pyramid.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                pyramid.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(pyramid, false);
    //                    g.AddObject(pyramid.InstanceGuid);
    //                    objects.Add(pyramid);
    //                }
    //                else if (item.Value["Name"] == "Cylinder")
    //                {
    //                    SIMComponents.Cylinder cylinder = new SIMComponents.Cylinder();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    cylinder.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        cylinder.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                cylinder.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(cylinder, false);
    //                    g.AddObject(cylinder.InstanceGuid);
    //                    objects.Add(cylinder);
    //                }
    //                else if (item.Value["Name"] == "Ring")
    //                {
    //                    SIMComponents.Ring ring = new SIMComponents.Ring();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    ring.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        ring.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                ring.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(ring, false);
    //                    g.AddObject(ring.InstanceGuid);
    //                    objects.Add(ring);
    //                }
    //                else if (item.Value["Name"] == "Sphere")
    //                {
    //                    SIMComponents.Sphere sphere = new SIMComponents.Sphere();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    sphere.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        sphere.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                sphere.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(sphere, false);
    //                    g.AddObject(sphere.InstanceGuid);
    //                    objects.Add(sphere);
    //                }
    //                else if (item.Value["Name"] == "Cone")
    //                {
    //                    SIMComponents.Cone cone = new SIMComponents.Cone();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    cone.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        cone.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                cone.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(cone, false);
    //                    g.AddObject(cone.InstanceGuid);
    //                    objects.Add(cone);
    //                }
    //                else if (item.Value["Name"] == "Formula")
    //                {
    //                    SIMComponents.Formula formula = new SIMComponents.Formula();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    formula.Attributes.Pivot = p;
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                formula.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(formula, false);
    //                    g.AddObject(formula.InstanceGuid);
    //                    objects.Add(formula);
    //                }
    //                else if (item.Value["Name"] == "Cut")
    //                {
    //                    SIMComponents.Cut cut = new SIMComponents.Cut();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    cut.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        cut.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                cut.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(cut, false);
    //                    g.AddObject(cut.InstanceGuid);
    //                    objects.Add(cut);
    //                }
    //                else if (item.Value["Name"] == "Fuse")
    //                {
    //                    SIMComponents.Fuse fuse = new SIMComponents.Fuse();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    fuse.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        fuse.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                fuse.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(fuse, false);
    //                    g.AddObject(fuse.InstanceGuid);
    //                    objects.Add(fuse);
    //                }
    //                else if (item.Value["Name"] == "Common")
    //                {
    //                    SIMComponents.Common common = new SIMComponents.Common();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    common.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        common.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                common.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(common, false);
    //                    g.AddObject(common.InstanceGuid);
    //                    objects.Add(common);
    //                }
    //                else if (item.Value["Name"] == "MergeNumber")
    //                {
    //                    SIMComponents.MergeNumber mergeNumber = new SIMComponents.MergeNumber();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    mergeNumber.Attributes.Pivot = p;
    //                    GrasshopperDocument.AddObject(mergeNumber, false);
    //                    g.AddObject(mergeNumber.InstanceGuid);
    //                    objects.Add(mergeNumber);
    //                }
    //                else if (item.Value["Name"] == "MergeBrep")
    //                {
    //                    SIMComponents.MergeBrep mergeBrep = new SIMComponents.MergeBrep();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    mergeBrep.Attributes.Pivot = p;
    //                    GrasshopperDocument.AddObject(mergeBrep, false);
    //                    g.AddObject(mergeBrep.InstanceGuid);
    //                    objects.Add(mergeBrep);
    //                }
    //                else if (item.Value["Name"] == "Move")
    //                {
    //                    SIMComponents.Move move = new SIMComponents.Move();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    move.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        move.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                move.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(move, false);
    //                    g.AddObject(move.InstanceGuid);
    //                    objects.Add(move);
    //                }
    //                else if (item.Value["Name"] == "Rotate")
    //                {
    //                    SIMComponents.Rotate rotate = new SIMComponents.Rotate();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    rotate.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        rotate.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                rotate.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(rotate, false);
    //                    g.AddObject(rotate.InstanceGuid);
    //                    objects.Add(rotate);
    //                }
    //                else if (item.Value["Name"] == "GetFeature")
    //                {
    //                    SIMComponents.GetFeature getFeature = new SIMComponents.GetFeature();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    getFeature.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        getFeature.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                getFeature.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(getFeature, false);
    //                    g.AddObject(getFeature.InstanceGuid);
    //                    objects.Add(getFeature);
    //                }
    //                else if (item.Value["Name"] == "PointPointCoincident")
    //                {
    //                    SIMComponents.PointPointCoincident pointPointCoincident = new SIMComponents.PointPointCoincident();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    pointPointCoincident.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        pointPointCoincident.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                pointPointCoincident.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(pointPointCoincident, false);
    //                    g.AddObject(pointPointCoincident.InstanceGuid);
    //                    objects.Add(pointPointCoincident);
    //                }
    //                else if (item.Value["Name"] == "FaceFaceParallel")
    //                {
    //                    SIMComponents.FaceFaceParallel faceFaceParallel = new SIMComponents.FaceFaceParallel();
    //                    float x = Convert.ToSingle(item.Value["Position_X"]);
    //                    float y = Convert.ToSingle(item.Value["Position_Y"]);
    //                    PointF p = new PointF(x, y);
    //                    faceFaceParallel.Attributes.Pivot = p;
    //                    if (item.Value.Keys.Contains("Hidden"))
    //                    {
    //                        bool b = Convert.ToBoolean(item.Value["Hidden"]);
    //                        faceFaceParallel.Hidden = true;
    //                    }
    //                    foreach (string key in item.Value.Keys)
    //                    {
    //                        if (key.Contains("Hidden"))
    //                        {
    //                            if (item.Value[key] == "true")
    //                            {
    //                                faceFaceParallel.Hidden = true;
    //                                break;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    GrasshopperDocument.AddObject(faceFaceParallel, false);
    //                    g.AddObject(faceFaceParallel.InstanceGuid);
    //                    objects.Add(faceFaceParallel);
    //                }
    //                else
    //                {
    //                }
    //            }
    //            g.ExpireCaches();
    //            int objectCount = 0;
    //            foreach (var item in maps)
    //            {
    //                foreach (var i in item.Value)
    //                {
    //                    if (i.Key.Contains("Source"))
    //                    {
    //                        string[] inputParams = i.Key.Split('_');
    //                        if (item.Value["Name"] == "Box")
    //                        {
    //                            SIMComponents.Box box = (SIMComponents.Box)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                        }
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Cylinder")
    //                        {
    //                            SIMComponents.Cylinder cylinder = (SIMComponents.Cylinder)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Ring")
    //                        {
    //                            SIMComponents.Ring ring = (SIMComponents.Ring)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Cone")
    //                        {
    //                            SIMComponents.Cone cone = (SIMComponents.Cone)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Sphere")
    //                        {
    //                            SIMComponents.Sphere sphere = (SIMComponents.Sphere)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Formula")
    //                        {
    //                            SIMComponents.Formula formula = (SIMComponents.Formula)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Cut")
    //                        {
    //                            SIMComponents.Cut cut = (SIMComponents.Cut)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Fuse")
    //                        {
    //                            SIMComponents.Fuse fuse = (SIMComponents.Fuse)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Common")
    //                        {
    //                            SIMComponents.Common common = (SIMComponents.Common)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "MergeNumber")
    //                        {
    //                            SIMComponents.MergeNumber mergeNumber = (SIMComponents.MergeNumber)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "MergeBrep")
    //                        {
    //                            SIMComponents.MergeBrep mergeBrep = (SIMComponents.MergeBrep)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Move")
    //                        {
    //                            SIMComponents.Move move = (SIMComponents.Move)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Rotate")
    //                        {
    //                            SIMComponents.Rotate rotate = (SIMComponents.Rotate)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "GetFeature")
    //                        {
    //                            SIMComponents.GetFeature getFeature = (SIMComponents.GetFeature)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "PointPointCoincident")
    //                        {
    //                            SIMComponents.PointPointCoincident pointpointCoincident = (SIMComponents.PointPointCoincident)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "FaceFaceParallel")
    //                        {
    //                            SIMComponents.FaceFaceParallel facefaceParallel = (SIMComponents.FaceFaceParallel)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "XAxis")
    //                        {
    //                            SIMComponents.XAxis xxx = (SIMComponents.XAxis)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "YAxis")
    //                        {
    //                            SIMComponents.YAxis xxx = (SIMComponents.YAxis)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "ZAxis")
    //                        {
    //                            SIMComponents.ZAxis xxx = (SIMComponents.ZAxis)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "XYZ2List")
    //                        {
    //                            SIMComponents.XYZ2List xxx = (SIMComponents.XYZ2List)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "List2XYZ")
    //                        {
    //                            SIMComponents.List2XYZ xxx = (SIMComponents.List2XYZ)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Scale")
    //                        {
    //                            SIMComponents.Scale xxx = (SIMComponents.Scale)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Pyramid")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else if (item.Value["Name"] == "Pyramid")
    //                        {
    //                            SIMComponents.Pyramid xxx = (SIMComponents.Pyramid)objects[objectCount];
    //                            int count = 0;
    //                            foreach (var subItem in maps)
    //                            {
    //                                foreach (var j in subItem.Value)
    //                                {
    //                                    if (j.Key.Contains("Output"))
    //                                    {
    //                                        string[] OutputParams = j.Key.Split('_');
    //                                        if (j.Value == i.Value)
    //                                        {
    //                                            if (subItem.Value["Name"] == "Panel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Box")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cone")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cylinder")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Ring")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Sphere")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Formula")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Cut")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Fuse")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Common")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeNumber")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "MergeBrep")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Move")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Rotate")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "GetFeature")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "PointPointCoincident")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "FaceFaceParallel")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "YAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "ZAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XAxis")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "List2XYZ")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "XYZ2List")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else if (subItem.Value["Name"] == "Scale")
    //                                            {
    //                                                xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                                count++;
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    else
    //                    {
    //                    }
    //                }
    //                objectCount++;
    //            }
    //        }
    //        else
    //        {
    //            // 2022.9.18
    //            if (Parameter == "[PARAMETER]\n[ENDPARAMETER]")
    //            {
    //            }
    //            else
    //            {
    //                foreach (string i in Parameter.Split('\n'))
    //                {
    //                    if (i.Contains("="))
    //                    {
    //                        string[] KeyValue = i.Split('=');
    //                        if (KeyValue.Length == 2)
    //                        {
    //                            GH_Group Group = GrasshopperDocument.Objects.OfType<GH_Group>().First(p => p.Name == GUID);
    //                            if (Group != null)
    //                            {
    //                                GH_Panel Panel = Group.Objects().OfType<Grasshopper.Kernel.Special.GH_Panel>().First(p => p.Description == KeyValue[0]);
    //                                if (Panel != null)
    //                                {
    //                                    Panel.UserText = KeyValue[1];
    //                                    Panel.Attributes.ExpireLayout();
    //                                    Panel.ComputeData();
    //                                }
    //                                else
    //                                {
    //                                }
    //                            }
    //                            else
    //                            {
    //                            }
    //                        }
    //                        else
    //                        {
    //                        }
    //                    }
    //                    else
    //                    {
    //                    }
    //                }
    //            }
    //        }
    //        StringBuilder Builder = new StringBuilder();
    //        foreach (int key in maps.Keys)
    //        {
    //            Builder.Append(String.Format("第{0}个电池块\n", key));
    //            Dictionary<string, string> map = maps[key];
    //            foreach (string subKey in map.Keys)
    //            {
    //                Builder.Append(String.Format("{0}={1}\n", subKey, map[subKey]));
    //            }
    //        }
    //        return Builder.ToString();
    //    }

    //    public static string ATTParser(string ATTPath)
    //    {
    //        StringBuilder Builder = new StringBuilder();
    //        using (StreamReader Reader = new StreamReader(ATTPath))
    //        {
    //            string Line;
    //            while ((Line = Reader.ReadLine()) != null)
    //            {
    //                Builder.AppendLine(Line);
    //            }
    //        }
    //        return Builder.ToString();
    //    }

    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.PRM;
    //        }
    //    }

    //    public override Guid ComponentGuid => new Guid("D6A12263-F783-4A6D-BE5C-9E458C5F8E88");
    //}












    //public class Parameter : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public Parameter() : base(name, name, name, "SIM", "File") { }
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("Variables", "Variables", "Variables", GH_ParamAccess.list);
    //        pManager.AddTextParameter("Variable", "Variable", "Variable", GH_ParamAccess.item);
    //        pManager.AddNumberParameter("Value", "Value", "Value", GH_ParamAccess.item);
    //    }

    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("Parameter", "Parameter", "Parameter", GH_ParamAccess.item);
    //    }

    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        List<string> Variables = new List<string>();
    //        string Variable = "";
    //        double Value = 0;
    //        DA.GetDataList(0, Variables);
    //        DA.GetData(1, ref Variable);
    //        DA.GetData(2, ref Value);
    //        if (Variables.Count == 0)
    //        {
    //            string parameter = "[PARAMETER]\n[ENDPARAMETER]";
    //            DA.SetData(0, parameter);
    //        }

    //        else
    //        {
    //            string parameter = "[PARAMETER]\n";
    //            parameter += String.Format("{0}={1}\n", Variable, Value);
    //            parameter += "[ENDPARAMETER]";
    //            DA.SetData(0, parameter);
    //        }
    //    }

    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.Parameter;
    //        }
    //    }

    //    public override Guid ComponentGuid => new Guid("D6A12263-F783-4A6D-BD5C-9E458C5F8E88");
    //}
    public class Sphere : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Sphere()
          : base("Sphere", "Sphere",
            "Sphere",
            "SIM", "Primitive")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddNumberParameter("Radius", "R", "Radius for sphere", GH_ParamAccess.item, 100.0);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Sphere", "Sphere", "Sphere", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            double R = 100.0;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetData(0, ref R)) return;

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }
            if (R <= 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Radius must be bigger than zero");
                return;
            }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            Brep sphere = CreateSphere(R);


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, sphere);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }

        Brep CreateSphere(double R)
        {
            Point3d O = new Point3d(0.0, 0.0, 0.0);
            Brep sphere = new Rhino.Geometry.Sphere(O, R).ToBrep();

            return sphere;
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Sphere;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Cylinder : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Cylinder()
          : base("Cylinder", "Cylinder",
            "Cylinder",
            "SIM", "Primitive")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddNumberParameter("Radius", "R", "Radius for cylinder", GH_ParamAccess.item, 100.0);
            pManager.AddNumberParameter("Height", "H", "Height for cylinder", GH_ParamAccess.item, 400.0);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Cylinder", "Cylinder", "Cylinder", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            double R = 100.0;
            double H = 400.0;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetData(0, ref R)) return;
            if (!DA.GetData(1, ref H)) return;

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }
            if (R <= 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Radius must be bigger than zero");
                return;
            }
            if (H <= 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Height must be bigger than zero");
                return;
            }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            Brep cylinder = CreateCylinder(R, H);


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, cylinder);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }

        Brep CreateCylinder(double R, double H)
        {
            Point3d O = new Point3d(0.0, 0.0, 0.0);
            Vector3d normal = new Vector3d(0.0, 0.0, 1.0);
            Rhino.Geometry.Plane plane = new Rhino.Geometry.Plane(O, normal);
            Circle circle = new Circle(plane, R);
            Brep cylinder = new Rhino.Geometry.Cylinder(circle, H).ToBrep(true, true);

            return cylinder;
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Cylinder;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("B6A12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Cone : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Cone()
          : base("Cone", "Cone",
            "Cone",
            "SIM", "Primitive")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddNumberParameter("Bottom Radius", "BR", "Bottom radius for cone", GH_ParamAccess.item, 100.0);
            pManager.AddNumberParameter("Top Radius", "TR", "Top radius for cone", GH_ParamAccess.item, 0.0);
            pManager.AddNumberParameter("Height", "H", "Height for cone", GH_ParamAccess.item, 400.0);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Cone", "Cone", "Cone", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            double BR = 100.0;
            double TR = 50.0;
            double H = 400.0;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetData(0, ref BR)) return;
            if (!DA.GetData(1, ref TR)) return;
            if (!DA.GetData(2, ref H)) return;

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }
            if (BR <= 0 && TR <=0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Bottom radius and top radius must be bigger than zero or only one of both can be zero");
                return;
            }
            if (H <= 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Height must be bigger than zero");
                return;
            }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            Brep cone = CreateCone(BR, TR, H);


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, cone);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }

        Brep CreateCone(double BR, double TR, double H)
        {
            Circle BottomCircle = new Circle(new Point3d(0.0, 0.0, 0.0), BR);
            Circle TopCircle = new Circle(new Point3d(0.0, 0.0, H), TR);
            LineCurve ShapeCurve = new LineCurve(BottomCircle.PointAt(0), TopCircle.PointAt(0));
            Line Axis = new Line(BottomCircle.Center, TopCircle.Center);
            RevSurface Rev = RevSurface.Create(ShapeCurve, Axis);
            Brep cone = Brep.CreateFromRevSurface(Rev, true, true);

            return cone;
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Cone;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("C6A12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Box : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Box()
          : base("Box", "Box",
            "Box",
            "SIM", "Primitive")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddNumberParameter("Length", "L", "Length for box", GH_ParamAccess.item, 400.0);
            pManager.AddNumberParameter("Width", "W", "Width for box", GH_ParamAccess.item, 300.0);
            pManager.AddNumberParameter("Height", "H", "Height for box", GH_ParamAccess.item, 200.0);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Box", "Box", "Box", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            double L = 400.0;
            double W = 300.0;
            double H = 200.0;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetData(0, ref L)) return;
            if (!DA.GetData(1, ref W)) return;
            if (!DA.GetData(2, ref H)) return;

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }
            if (L <= 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Length must be bigger than zero");
                return;
            }
            if (W <= 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Width must be bigger than zero");
                return;
            }
            if (H <= 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Height must be bigger than zero");
                return;
            }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            Brep box = CreateBox(L, W, H);


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, box);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }

        Brep CreateBox(double L, double W, double H)
        {
            Point3d pt0 = new Point3d(-L / 2, -W / 2, 0);
            Point3d pt1 = new Point3d(L / 2, W / 2, H);
            BoundingBox bounding = new BoundingBox(pt0, pt1);
            Brep box = bounding.ToBrep();

            return box;
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Box;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("D6A12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Ring : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Ring()
          : base("Ring", "Ring",
            "Ring",
            "SIM", "Primitive")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddNumberParameter("Smaller Radius", "SR", "Smaller radius for ring", GH_ParamAccess.item, 50.0);
            pManager.AddNumberParameter("Bigger Radius", "BR", "Bigger radius for ring", GH_ParamAccess.item, 100.0);
            pManager.AddNumberParameter("Angle", "A", "Angle for ring", GH_ParamAccess.item, 360.0);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Ring", "Ring", "Ring", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            double SR = 50.0;
            double BR = 100.0;
            double A = 360.0;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetData(0, ref SR)) return;
            if (!DA.GetData(1, ref BR)) return;
            if (!DA.GetData(2, ref A)) return;

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }
            if (SR <= 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Smaller Radius must be bigger than zero");
                return;
            }
            if (BR < SR)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Bigger radius must be bigger than or equal to smaller radius");
                return;
            }
            if (A <= 0 || A > 360)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Angle must be bigger than zero and not bigger than 360");
                return;
            }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            Brep ring = CreateRing(SR, BR, A);


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, ring);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }

        Brep CreateRing(double SR, double BR, double A)
        {
            Circle c = new Circle(new Point3d(0, 0, 0), SR);
            c.Plane = Rhino.Geometry.Plane.WorldZX;
            c.Center = new Point3d(BR, 0, 0);
            Circle c1 = new Circle(new Point3d(0, 0, 0), BR);
            Arc c2 = new Arc(c1, A / 180 * Math.PI);
            SweepOneRail sweep = new SweepOneRail();
            Brep ring = sweep.PerformSweep(c2.ToNurbsCurve(), c.ToNurbsCurve())[0];

            return ring;
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Ring;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("E6A12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Cut : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Cut()
          : base("Cut", "Cut",
            "Cut",
            "SIM", "Boolean")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddBrepParameter("Brep1", "Brep1", "Brep to be cut", GH_ParamAccess.item);
            pManager.AddBrepParameter("Brep2", "Brep2", "Brep to cut", GH_ParamAccess.item);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Brep", "Brep", "Brep", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            Brep Brep1 = null;
            Brep Brep2 = null;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetData(0, ref Brep1)) return;
            if (!DA.GetData(1, ref Brep2)) return;


            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            Brep cut = Brep.CreateBooleanDifference(Brep1, Brep2, 0.01)[0];


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, cut);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }


        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Cut;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("F6A12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Common : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Common()
          : base("Common", "Common",
            "Common",
            "SIM", "Boolean")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddBrepParameter("Brep1", "Brep1", "Brep to be commoned", GH_ParamAccess.item);
            pManager.AddBrepParameter("Brep2", "Brep2", "Brep to be commoned", GH_ParamAccess.item);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Brep", "Brep", "Brep", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            Brep Brep1 = null;
            Brep Brep2 = null;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetData(0, ref Brep1)) return;
            if (!DA.GetData(1, ref Brep2)) return;


            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            Brep common = Brep.CreateBooleanIntersection(Brep1, Brep2, 0.01)[0];


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, common);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }


        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Common;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AAA12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Fuse : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Fuse()
          : base("Fuse", "Fuse",
            "Fuse",
            "SIM", "Boolean")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddBrepParameter("Brep1", "Brep1", "Brep to be fused", GH_ParamAccess.item);
            pManager.AddBrepParameter("Brep2", "Brep2", "Brep to be fused", GH_ParamAccess.item);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Brep", "Brep", "Brep", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            Brep Brep1 = null;
            Brep Brep2 = null;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetData(0, ref Brep1)) return;
            if (!DA.GetData(1, ref Brep2)) return;


            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            Brep fuse = Brep.CreateBooleanUnion(new List<Brep>() { Brep1, Brep2 }, 0.01)[0];


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, fuse);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }


        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Fuse;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("ABA12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Formula : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Formula()
          : base("Formula", "Formula",
            "(), +, -, *, /, ^, sin(x), cos(x), tg(x), ctg(x), sh(x), ch(x), th(x), √(x), sqrt(x), exp(x), (a) log(b), ln(x), abs(x), pi---3.14159265..., e---2.71828183....",
            "SIM", "Formula")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddNumberParameter("Parameter", "Xi", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            pManager.AddTextParameter("Formula", "F", "Formula variables include x1, x2, x3 and so on", GH_ParamAccess.item, "sin(x1)+cos(x2)+x3");
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddNumberParameter("Result", "R", "Result for formula", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            List<double> P = new List<double>();
            string F = "sin(x1)+cos(x2)+x3";

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            if (!DA.GetDataList(0, P)) return;
            if (!DA.GetData(1, ref F)) return;


            int Pcount = P.Count;
            if (Pcount == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Parameter count must be bigger than zero");
                return;
            }

            int count = 1;
            foreach(double i in P)
            {
                try
                {
                    F = F.Replace("x" + count.ToString(), i.ToString());
                    count++;
                }
                catch
                {
                    AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Parameter count must be equal to variable count");
                    return;
                }
            }
            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            //DataTable dataTable = new DataTable();

            Parser parser = new Parser();
            parser.AddVariable("pi", 3.14159265);
            parser.AddVariable("e", 2.71828183);
            double result = Convert.ToDouble(parser.SimplifyObject(F));


            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, result);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }


        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Formula;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("ACA12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class
    ImportSIM : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public ImportSIM()
          : base("ImportSIM", "ImportSIM",
            "IImportSIM",
            "SIM", "File")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            // pManager.AddTextParameter("GHXPath", "GHX", "Path for *.ghx file", GH_ParamAccess.item, "");
            pManager.AddTextParameter("SIMPath", "SIM", "Path for *.sim file", GH_ParamAccess.item, "");
            pManager.AddBooleanParameter("Run", "Run", "Button for running", GH_ParamAccess.item, false);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            // pManager.AddNumberParameter("Result", "R", "Result for formula", GH_ParamAccess.item);
            // pManager.AddTextParameter("Text", "Text", "Text for *.xml file", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            // List<double> P = new List<double>();
            // string GHX = "";
            string XML = "";
            bool Run = false;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            // if (!DA.GetData(0, ref GHX)) return;
            if (!DA.GetData(0, ref XML)) return;


            if (!File.Exists(XML))
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Path for *.sim file is not existed");
                return;
            }
            if (Path.GetExtension(XML) != ".sim")
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Path suffix for SIM file is not *.sim");
                return;
            }

            if (!DA.GetData(1, ref Run)) return;

            if (Run == false)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Button for running is off");
                return;
            }

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            //DataTable dataTable = new DataTable();

            // string result = ParserXML(XML);
            SIMParser(XML, XML);

            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            // DA.SetData(0, result);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }

        public static string SIMParser(string SIMPath, string GUID)
        {
            List<string> contents0 = File.ReadLines(SIMPath).ToList();
            string XMLPath = Path.GetDirectoryName(SIMPath);
            string Paras = "";
            string Atts = "";
            string Headers = "";
            foreach (string i in contents0)
            {
                if (i.Contains("TMPRef="))
                {
                    XMLPath = Path.Combine(XMLPath, i.Split('=')[1] + ".tmp");
                }
                if (i.Contains("PARAMETER") && !i.Contains("ENDPARAMETER"))
                {
                    int Pointer = contents0.IndexOf(i);
                    while (!contents0[Pointer+1].Contains("ENDPARAMETER"))
                    {
                        Paras += contents0[Pointer + 1] + "\n";
                        Pointer++;
                    }
                    Paras = Paras.Remove(Paras.LastIndexOf("\n"), 1);
                }
                if (i.Contains("ATTRIBUTE") && !i.Contains("ENDATTRIBUTE"))
                {
                    int Pointer = contents0.IndexOf(i);
                    while (!contents0[Pointer + 1].Contains("ENDATTRIBUTE"))
                    {
                        Atts += contents0[Pointer + 1] + "\n";
                        Pointer++;
                    }
                    Atts = Atts.Remove(Atts.LastIndexOf("\n"), 1);
                }
                if (i.Contains("HEADER") && !i.Contains("ENDHEADER"))
                {
                    int Pointer = contents0.IndexOf(i);
                    while (!contents0[Pointer + 1].Contains("ENDHEADER"))
                    {
                        Headers += contents0[Pointer + 1] + "\n";
                        Pointer++;
                    }
                    Headers = Headers.Remove(Headers.LastIndexOf("\n"), 1);
                }
            }
            Dictionary<int, Dictionary<string, string>> maps = new Dictionary<int, Dictionary<string, string>>();
            XmlDocument doc = new XmlDocument();
            doc.Load(XMLPath);
            XmlNodeList Nodes = doc.DocumentElement.SelectNodes("/TMP/Object");
            int Count = 1;
            foreach (XmlNode Node in Nodes)
            {
                Dictionary<string, string> map = new Dictionary<string, string>();
                int inputCount = 0;
                int outputCount = 0;
                foreach (XmlNode childNode in Node.ChildNodes)
                {
                    if (childNode.Name != "Input" && childNode.Name != "Output")
                    {
                        map[childNode.Name] = childNode.InnerText;
                    }
                    else
                    {
                        if (childNode.Name == "Input")
                        {
                            foreach (XmlNode subChildNode in childNode.ChildNodes)
                            {
                                map[String.Format("{0}_{1}_{2}", childNode.Name, inputCount, subChildNode.Name)] = subChildNode.InnerText;
                            }
                            inputCount++;
                        }
                        else
                        {
                            foreach (XmlNode subChildNode in childNode.ChildNodes)
                            {
                                map[String.Format("{0}_{1}_{2}", childNode.Name, outputCount, subChildNode.Name)] = subChildNode.InnerText;
                            }
                            outputCount++;
                        }
                    }
                }
                maps[Count] = map;
                Count++;
            }
            GH_Document GrasshopperDocument = Instances.ActiveCanvas.Document;
            if (!GrasshopperDocument.Objects.Select(i => i.Name).Contains(GUID))
            {
                GH_Group g = new GH_Group();
                g.NickName = Path.GetFileName(XMLPath);
                g.Name = GUID;
                g.Colour = Color.FromArgb(255, 255, 255, 255);
                GrasshopperDocument.AddObject(g, false, GrasshopperDocument.ObjectCount);
                List<Object> objects = new List<Object>();
                foreach (var item in maps)
                {
                    if (item.Value["Name"] == "Panel")
                    {
                        GH_Panel aPanel = new GH_Panel();
                        GrasshopperDocument.AddObject(aPanel, false);
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        aPanel.Attributes.Pivot = p;
                        aPanel.Properties.Colour = Color.White;
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Output_0"))
                            {
                                if (key == "Output_0_GUID")
                                {
                                }
                                else if (key == "Output_0_Value")
                                {
                                    aPanel.UserText = item.Value[key];
                                    break;
                                }
                                else
                                {
                                    aPanel.UserText = item.Value[key];
                                    aPanel.Description = key;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        int len = aPanel.UserText.Length;
                        string panel_length = aPanel.UserText;
                        List<string> contents = panel_length.Split('\n').ToList();
                        int row_max = 0;
                        for (int i = 0; i < contents.Count; i++)
                        {
                            if (contents[i].Length > row_max)
                            {
                                row_max = contents[i].Length;
                            }
                        }
                        RectangleF r = new RectangleF(0.0F, 0.0F, Convert.ToSingle(row_max * 18), Convert.ToSingle(contents.Count * 18));
                        aPanel.Attributes.Bounds = r;
                        aPanel.Attributes.ExpireLayout();
                        g.AddObject(aPanel.InstanceGuid);
                        objects.Add(aPanel);
                    }
                    else if (item.Value["Name"] == "Box")
                    {
                        SIMComponents.Box box = new SIMComponents.Box();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        box.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            box.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    box.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(box, false);
                        g.AddObject(box.InstanceGuid);
                        objects.Add(box);
                    }
                    else if (item.Value["Name"] == "XAxis")
                    {
                        SIMComponents.XAxis axis = new SIMComponents.XAxis();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        axis.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    axis.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(axis, false);
                        g.AddObject(axis.InstanceGuid);
                        objects.Add(axis);
                    }
                    else if (item.Value["Name"] == "YAxis")
                    {
                        SIMComponents.YAxis axis = new SIMComponents.YAxis();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        axis.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    axis.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(axis, false);
                        g.AddObject(axis.InstanceGuid);
                        objects.Add(axis);
                    }
                    else if (item.Value["Name"] == "ZAxis")
                    {
                        SIMComponents.ZAxis axis = new SIMComponents.ZAxis();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        axis.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    axis.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(axis, false);
                        g.AddObject(axis.InstanceGuid);
                        objects.Add(axis);
                    }
                    else if (item.Value["Name"] == "XYZ2List")
                    {
                        SIMComponents.XYZ2List xyz2list = new SIMComponents.XYZ2List();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        xyz2list.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    xyz2list.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(xyz2list, false);
                        g.AddObject(xyz2list.InstanceGuid);
                        objects.Add(xyz2list);
                    }
                    else if (item.Value["Name"] == "Paras")
                    {
                        SIMComponents.Paras paras = new SIMComponents.Paras();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        paras.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    paras.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        paras.Params.Output[12].Description = Paras;
                        GrasshopperDocument.AddObject(paras, false);
                        g.AddObject(paras.InstanceGuid);
                        objects.Add(paras);
                    }
                    else if (item.Value["Name"] == "List2XYZ")
                    {
                        SIMComponents.List2XYZ list2xyz = new SIMComponents.List2XYZ();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        list2xyz.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    list2xyz.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(list2xyz, false);
                        g.AddObject(list2xyz.InstanceGuid);
                        objects.Add(list2xyz);
                    }
                    else if (item.Value["Name"] == "Scale")
                    {
                        SIMComponents.Scale scale = new SIMComponents.Scale();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        scale.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            scale.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    scale.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(scale, false);
                        g.AddObject(scale.InstanceGuid);
                        objects.Add(scale);
                    }
                    else if (item.Value["Name"] == "Pyramid")
                    {
                        SIMComponents.Pyramid pyramid = new SIMComponents.Pyramid();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        pyramid.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            pyramid.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    pyramid.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(pyramid, false);
                        g.AddObject(pyramid.InstanceGuid);
                        objects.Add(pyramid);
                    }
                    else if (item.Value["Name"] == "Cylinder")
                    {
                        SIMComponents.Cylinder cylinder = new SIMComponents.Cylinder();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        cylinder.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            cylinder.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    cylinder.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(cylinder, false);
                        g.AddObject(cylinder.InstanceGuid);
                        objects.Add(cylinder);
                    }
                    else if (item.Value["Name"] == "Ring")
                    {
                        SIMComponents.Ring ring = new SIMComponents.Ring();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        ring.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            ring.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    ring.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(ring, false);
                        g.AddObject(ring.InstanceGuid);
                        objects.Add(ring);
                    }
                    else if (item.Value["Name"] == "Sphere")
                    {
                        SIMComponents.Sphere sphere = new SIMComponents.Sphere();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        sphere.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            sphere.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    sphere.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(sphere, false);
                        g.AddObject(sphere.InstanceGuid);
                        objects.Add(sphere);
                    }
                    else if (item.Value["Name"] == "Cone")
                    {
                        SIMComponents.Cone cone = new SIMComponents.Cone();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        cone.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            cone.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    cone.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(cone, false);
                        g.AddObject(cone.InstanceGuid);
                        objects.Add(cone);
                    }
                    else if (item.Value["Name"] == "Formula")
                    {
                        SIMComponents.Formula formula = new SIMComponents.Formula();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        formula.Attributes.Pivot = p;
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    formula.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(formula, false);
                        g.AddObject(formula.InstanceGuid);
                        objects.Add(formula);
                    }
                    else if (item.Value["Name"] == "Cut")
                    {
                        SIMComponents.Cut cut = new SIMComponents.Cut();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        cut.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            cut.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    cut.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(cut, false);
                        g.AddObject(cut.InstanceGuid);
                        objects.Add(cut);
                    }
                    else if (item.Value["Name"] == "Fuse")
                    {
                        SIMComponents.Fuse fuse = new SIMComponents.Fuse();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        fuse.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            fuse.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    fuse.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(fuse, false);
                        g.AddObject(fuse.InstanceGuid);
                        objects.Add(fuse);
                    }
                    else if (item.Value["Name"] == "Common")
                    {
                        SIMComponents.Common common = new SIMComponents.Common();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        common.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            common.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    common.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(common, false);
                        g.AddObject(common.InstanceGuid);
                        objects.Add(common);
                    }
                    else if (item.Value["Name"] == "MergeNumber")
                    {
                        SIMComponents.MergeNumber mergeNumber = new SIMComponents.MergeNumber();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        mergeNumber.Attributes.Pivot = p;
                        GrasshopperDocument.AddObject(mergeNumber, false);
                        g.AddObject(mergeNumber.InstanceGuid);
                        objects.Add(mergeNumber);
                    }
                    else if (item.Value["Name"] == "CircleArray")
                    {
                        SIMComponents.CircleArray circle_array = new SIMComponents.CircleArray();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        circle_array.Attributes.Pivot = p;
                        GrasshopperDocument.AddObject(circle_array, false);
                        g.AddObject(circle_array.InstanceGuid);
                        objects.Add(circle_array);
                    }
                    else if (item.Value["Name"] == "ATTRIBUTE")
                    {
                        SIMComponents.ATTRIBUTE att = new SIMComponents.ATTRIBUTE();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        att.Attributes.Pivot = p;
                        att.Params.Output[0].Description = Atts;
                        GrasshopperDocument.AddObject(att, false);
                        g.AddObject(att.InstanceGuid);
                        objects.Add(att);
                    }
                    else if (item.Value["Name"] == "HEADER")
                    {
                        SIMComponents.HEADER att = new SIMComponents.HEADER();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        att.Attributes.Pivot = p;
                        att.Params.Output[0].Description = Headers;
                        GrasshopperDocument.AddObject(att, false);
                        g.AddObject(att.InstanceGuid);
                        objects.Add(att);
                    }
                    else if (item.Value["Name"] == "MergeBrep")
                    {
                        SIMComponents.MergeBrep mergeBrep = new SIMComponents.MergeBrep();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        mergeBrep.Attributes.Pivot = p;
                        GrasshopperDocument.AddObject(mergeBrep, false);
                        g.AddObject(mergeBrep.InstanceGuid);
                        objects.Add(mergeBrep);
                    }
                    else if (item.Value["Name"] == "Move")
                    {
                        SIMComponents.Move move = new SIMComponents.Move();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        move.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            move.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    move.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(move, false);
                        g.AddObject(move.InstanceGuid);
                        objects.Add(move);
                    }
                    else if (item.Value["Name"] == "Rotate")
                    {
                        SIMComponents.Rotate rotate = new SIMComponents.Rotate();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        rotate.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            rotate.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    rotate.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(rotate, false);
                        g.AddObject(rotate.InstanceGuid);
                        objects.Add(rotate);
                    }
                    else if (item.Value["Name"] == "GetFeature")
                    {
                        SIMComponents.GetFeature getFeature = new SIMComponents.GetFeature();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        getFeature.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            getFeature.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    getFeature.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(getFeature, false);
                        g.AddObject(getFeature.InstanceGuid);
                        objects.Add(getFeature);
                    }
                    else if (item.Value["Name"] == "PointPointCoincident")
                    {
                        SIMComponents.PointPointCoincident pointPointCoincident = new SIMComponents.PointPointCoincident();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        pointPointCoincident.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            pointPointCoincident.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    pointPointCoincident.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(pointPointCoincident, false);
                        g.AddObject(pointPointCoincident.InstanceGuid);
                        objects.Add(pointPointCoincident);
                    }
                    else if (item.Value["Name"] == "FaceFaceParallel")
                    {
                        SIMComponents.FaceFaceParallel faceFaceParallel = new SIMComponents.FaceFaceParallel();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        faceFaceParallel.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            faceFaceParallel.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    faceFaceParallel.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(faceFaceParallel, false);
                        g.AddObject(faceFaceParallel.InstanceGuid);
                        objects.Add(faceFaceParallel);
                    }
                    else
                    {
                    }
                }
                g.ExpireCaches();
                int objectCount = 0;
                foreach (var item in maps)
                {
                    foreach (var i in item.Value)
                    {
                        if (i.Key.Contains("Source"))
                        {
                            string[] inputParams = i.Key.Split('_');
                            if (item.Value["Name"] == "Box")
                            {
                                SIMComponents.Box box = (SIMComponents.Box)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                            }
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Cylinder")
                            {
                                SIMComponents.Cylinder cylinder = (SIMComponents.Cylinder)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Ring")
                            {
                                SIMComponents.Ring ring = (SIMComponents.Ring)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Cone")
                            {
                                SIMComponents.Cone cone = (SIMComponents.Cone)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Sphere")
                            {
                                SIMComponents.Sphere sphere = (SIMComponents.Sphere)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Formula")
                            {
                                SIMComponents.Formula formula = (SIMComponents.Formula)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Cut")
                            {
                                SIMComponents.Cut cut = (SIMComponents.Cut)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Fuse")
                            {
                                SIMComponents.Fuse fuse = (SIMComponents.Fuse)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Common")
                            {
                                SIMComponents.Common common = (SIMComponents.Common)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "MergeNumber")
                            {
                                SIMComponents.MergeNumber mergeNumber = (SIMComponents.MergeNumber)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "MergeBrep")
                            {
                                SIMComponents.MergeBrep mergeBrep = (SIMComponents.MergeBrep)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Move")
                            {
                                SIMComponents.Move move = (SIMComponents.Move)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Rotate")
                            {
                                SIMComponents.Rotate rotate = (SIMComponents.Rotate)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "GetFeature")
                            {
                                SIMComponents.GetFeature getFeature = (SIMComponents.GetFeature)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "PointPointCoincident")
                            {
                                SIMComponents.PointPointCoincident pointpointCoincident = (SIMComponents.PointPointCoincident)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "FaceFaceParallel")
                            {
                                SIMComponents.FaceFaceParallel facefaceParallel = (SIMComponents.FaceFaceParallel)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "XAxis")
                            {
                                SIMComponents.XAxis xxx = (SIMComponents.XAxis)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "YAxis")
                            {
                                SIMComponents.YAxis xxx = (SIMComponents.YAxis)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "ZAxis")
                            {
                                SIMComponents.ZAxis xxx = (SIMComponents.ZAxis)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "XYZ2List")
                            {
                                SIMComponents.XYZ2List xxx = (SIMComponents.XYZ2List)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "List2XYZ")
                            {
                                SIMComponents.List2XYZ xxx = (SIMComponents.List2XYZ)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Scale")
                            {
                                SIMComponents.Scale xxx = (SIMComponents.Scale)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Pyramid")
                            {
                                SIMComponents.Pyramid xxx = (SIMComponents.Pyramid)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Paras")
                            {
                                SIMComponents.Paras xxx = (SIMComponents.Paras)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                //else if (subItem.Value["Name"] == "Paras")
                                                //{
                                                //    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                //}
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "CircleArray")
                            {
                                SIMComponents.CircleArray xxx = (SIMComponents.CircleArray)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "ATTRIBUTE")
                            {
                                SIMComponents.ATTRIBUTE xxx = (SIMComponents.ATTRIBUTE)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "HEADER")
                            {
                                SIMComponents.HEADER xxx = (SIMComponents.HEADER)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else
                            {
                            }
                        }
                        else
                        {
                        }
                    }
                    objectCount++;
                }
            }
            else
            {
            }
            StringBuilder Builder = new StringBuilder();
            foreach (int key in maps.Keys)
            {
                Builder.Append(String.Format("第{0}个电池块\n", key));
                Dictionary<string, string> map = maps[key];
                foreach (string subKey in map.Keys)
                {
                    Builder.Append(String.Format("{0}={1}\n", subKey, map[subKey]));
                }
            }
            return Builder.ToString();
        }
        public static void ParserXML1(string XML)
        {
            Dictionary<int, Dictionary<string, string>> mapTotal = new Dictionary<int, Dictionary<string, string>>();
            string XMLPath = XML;
            XmlDocument doc = new XmlDocument();
            doc.Load(XMLPath);
            XmlElement root = doc.DocumentElement;
            XmlNodeList listNodes = root.SelectNodes("/TMP/Object");
            int countO = 1;
            foreach (XmlNode node in listNodes)
            {
                Dictionary<string, string> map = new Dictionary<string, string>();
                int inputCount = 0;
                int OutputCount = 0;
                foreach (XmlNode childNode in node.ChildNodes)
                {
                    if (childNode.Name != "Input" && childNode.Name != "Output")
                    {
                        if (childNode.Name == "GUID")
                        {
                            map[childNode.Name] = childNode.InnerText;
                        }
                        if (childNode.Name == "Name")
                        {
                            map[childNode.Name] = childNode.InnerText;
                        }
                        if (childNode.Name == "Position_X")
                        {
                            map[childNode.Name] = childNode.InnerText;
                        }
                        if (childNode.Name == "Position_Y")
                        {
                            map[childNode.Name] = childNode.InnerText;
                        }
                        // Console.WriteLine(childNode.Name+"---"+childNode.InnerText);
                    }
                    else if (childNode.Name == "Input")
                    {
                        foreach (XmlNode childNode2 in childNode.ChildNodes)
                        {
                            // Console.WriteLine(childNode2.Name);
                            if (childNode2.Name == "GUID")
                            {
                                map["Input_" + inputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                            if (childNode2.Name == "Name")
                            {
                                map["Input_" + inputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                            if (childNode2.Name == "Source")
                            {
                                map["Input_" + inputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                        }
                        inputCount++;
                    }
                    else if (childNode.Name == "Output")
                    {
                        foreach (XmlNode childNode2 in childNode.ChildNodes)
                        {
                            // Console.WriteLine(childNode2.Name);
                            if (childNode2.Name == "GUID")
                            {
                                map["Output_" + OutputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                            if (childNode2.Name == "Name")
                            {
                                map["Output_" + OutputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                            if (childNode2.Name == "Value")
                            {
                                map["Output_" + OutputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                        }
                        OutputCount++;
                    }
                }
                mapTotal[countO] = map;
                countO++;
            }
            GH_Document GrasshopperDocument = Instances.ActiveCanvas.Document;
            GH_Group g = new GH_Group();
            g.NickName = Path.GetFileName(XML);
            g.Colour = Color.FromArgb(255, 255, 255, 255);
            GrasshopperDocument.AddObject(g, false, GrasshopperDocument.ObjectCount);
            List<Object> guids = new List<Object>();
            foreach (var item in mapTotal)
            {
                //Console.WriteLine(item.Key + item.Value);
                if (item.Value["Name"] == "Box")
                {
                    SIMComponents.Box box = new SIMComponents.Box();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    box.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(box, false);
                    g.AddObject(box.InstanceGuid);
                    guids.Add(box);
                }
                if (item.Value["Name"] == "Cylinder")
                {
                    SIMComponents.Cylinder cylinder = new SIMComponents.Cylinder();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    cylinder.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(cylinder, false);
                    g.AddObject(cylinder.InstanceGuid);
                    guids.Add(cylinder);
                }
                if (item.Value["Name"] == "Ring")
                {
                    SIMComponents.Ring ring = new SIMComponents.Ring();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    ring.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(ring, false);
                    g.AddObject(ring.InstanceGuid);
                    guids.Add(ring);
                }
                if (item.Value["Name"] == "Sphere")
                {
                    SIMComponents.Sphere sphere = new SIMComponents.Sphere();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    sphere.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(sphere, false);
                    g.AddObject(sphere.InstanceGuid);
                    guids.Add(sphere);
                }
                if (item.Value["Name"] == "Cone")
                {
                    SIMComponents.Cone cone = new SIMComponents.Cone();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    cone.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(cone, false);
                    g.AddObject(cone.InstanceGuid);
                    guids.Add(cone);
                }
                if (item.Value["Name"] == "Panel")
                {
                    GH_Panel aPanel = new GH_Panel();
                    GrasshopperDocument.AddObject(aPanel, false);
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    aPanel.Attributes.Pivot = p;
                    aPanel.Properties.Colour = Color.White;
                    aPanel.UserText = item.Value["Output_0_Value"];
                    //int len = aPanel.UserText.Length;
                    //RectangleF r = new RectangleF(0.0F, 0.0F, Convert.ToSingle(len * 20), 20.0F);
                    //aPanel.Attributes.Bounds = r;
                    aPanel.Attributes.ExpireLayout();
                    g.AddObject(aPanel.InstanceGuid);
                    guids.Add(aPanel);
                }
                if (item.Value["Name"] == "Formula")
                {
                    SIMComponents.Formula formula = new SIMComponents.Formula();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    formula.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(formula, false);
                    g.AddObject(formula.InstanceGuid);
                    guids.Add(formula);
                }
                if (item.Value["Name"] == "Cut")
                {
                    SIMComponents.Cut xxx = new SIMComponents.Cut();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "Fuse")
                {
                    SIMComponents.Fuse xxx = new SIMComponents.Fuse();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "Common")
                {
                    SIMComponents.Common xxx = new SIMComponents.Common();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "MergeNumber")
                {
                    SIMComponents.MergeNumber xxx = new SIMComponents.MergeNumber();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "MergeBrep")
                {
                    SIMComponents.MergeBrep xxx = new SIMComponents.MergeBrep();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "Move")
                {
                    SIMComponents.Move xxx = new SIMComponents.Move();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "Rotate")
                {
                    SIMComponents.Rotate xxx = new SIMComponents.Rotate();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "GetFeature")
                {
                    SIMComponents.GetFeature xxx = new SIMComponents.GetFeature();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "PointPointCoincident")
                {
                    SIMComponents.PointPointCoincident xxx = new SIMComponents.PointPointCoincident();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "FaceFaceParallel")
                {
                    SIMComponents.FaceFaceParallel xxx = new SIMComponents.FaceFaceParallel();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
            }
            g.ExpireCaches();
            int objectCount = 0;
            foreach (var item in mapTotal)
            {
                foreach (var i in item.Value)
                {
                    if (i.Key.Contains("Source"))
                    {
                        string[] inputParams = i.Key.Split('_');
                        if (item.Value["Name"] == "Box")
                        {
                            SIMComponents.Box box = (SIMComponents.Box)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Cylinder")
                        {
                            SIMComponents.Cylinder cylinder = (SIMComponents.Cylinder)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Ring")
                        {
                            SIMComponents.Ring ring = (SIMComponents.Ring)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Cone")
                        {
                            SIMComponents.Cone cone = (SIMComponents.Cone)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Sphere")
                        {
                            SIMComponents.Sphere sphere = (SIMComponents.Sphere)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Formula")
                        {
                            SIMComponents.Formula formula = (SIMComponents.Formula)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Cut")
                        {
                            SIMComponents.Cut cut = (SIMComponents.Cut)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Fuse")
                        {
                            SIMComponents.Fuse fuse = (SIMComponents.Fuse)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Common")
                        {
                            SIMComponents.Common common = (SIMComponents.Common)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "MergeNumber")
                        {
                            SIMComponents.MergeNumber mergeNumber = (SIMComponents.MergeNumber)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "MergeBrep")
                        {
                            SIMComponents.MergeBrep mergeBrep = (SIMComponents.MergeBrep)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Move")
                        {
                            SIMComponents.Move move = (SIMComponents.Move)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Rotate")
                        {
                            SIMComponents.Rotate rotate = (SIMComponents.Rotate)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "GetFeature")
                        {
                            SIMComponents.GetFeature getFeature = (SIMComponents.GetFeature)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "PointPointCoincident")
                        {
                            SIMComponents.PointPointCoincident pointpointCoincident = (SIMComponents.PointPointCoincident)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "FaceFaceParallel")
                        {
                            SIMComponents.FaceFaceParallel facefaceParallel = (SIMComponents.FaceFaceParallel)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                    }
                }
                objectCount++;
            }
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.ImportSIM;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AEA12263-FA83-446C-BB5C-9E458A2F8788");
    }


    public class
        Import : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Import()
          : base("Import", "Import",
            "Import",
            "SIM", "File")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            // pManager.AddTextParameter("GHXPath", "GHX", "Path for *.ghx file", GH_ParamAccess.item, "");
            pManager.AddTextParameter("TMPPath", "TMP", "Path for *.tmp file", GH_ParamAccess.item, "");
            pManager.AddBooleanParameter("Run", "Run", "Button for running", GH_ParamAccess.item, false);
            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            // pManager.AddNumberParameter("Result", "R", "Result for formula", GH_ParamAccess.item);
            // pManager.AddTextParameter("Text", "Text", "Text for *.xml file", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            // List<double> P = new List<double>();
            // string GHX = "";
            string XML = "";
            bool Run = false;

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;
            // if (!DA.GetData(0, ref GHX)) return;
            if (!DA.GetData(0, ref XML)) return;


            if (!File.Exists(XML))
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Path for *.tmp file is not existed");
                return;
            }
            if (Path.GetExtension(XML) != ".tmp")
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Path suffix for TMP file is not *.tmp");
                return;
            }

            if (!DA.GetData(1, ref Run)) return;

            if (Run == false)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Button for running is off");
                return;
            }

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            //DataTable dataTable = new DataTable();

            // string result = ParserXML(XML);
            TMPParser(XML, XML);

            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            // DA.SetData(0, result);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }

        public static string TMPParser(string XMLPath, string GUID)
        {
            Dictionary<int, Dictionary<string, string>> maps = new Dictionary<int, Dictionary<string, string>>();
            XmlDocument doc = new XmlDocument();
            doc.Load(XMLPath);
            XmlNodeList Nodes = doc.DocumentElement.SelectNodes("/TMP/Object");
            int Count = 1;
            foreach (XmlNode Node in Nodes)
            {
                Dictionary<string, string> map = new Dictionary<string, string>();
                int inputCount = 0;
                int outputCount = 0;
                foreach (XmlNode childNode in Node.ChildNodes)
                {
                    if (childNode.Name != "Input" && childNode.Name != "Output")
                    {
                        map[childNode.Name] = childNode.InnerText;
                    }
                    else
                    {
                        if (childNode.Name == "Input")
                        {
                            foreach (XmlNode subChildNode in childNode.ChildNodes)
                            {
                                map[String.Format("{0}_{1}_{2}", childNode.Name, inputCount, subChildNode.Name)] = subChildNode.InnerText;
                            }
                            inputCount++;
                        }
                        else
                        {
                            foreach (XmlNode subChildNode in childNode.ChildNodes)
                            {
                                map[String.Format("{0}_{1}_{2}", childNode.Name, outputCount, subChildNode.Name)] = subChildNode.InnerText;
                            }
                            outputCount++;
                        }
                    }
                }
                maps[Count] = map;
                Count++;
            }
            GH_Document GrasshopperDocument = Instances.ActiveCanvas.Document;
            if (!GrasshopperDocument.Objects.Select(i => i.Name).Contains(GUID))
            {
                GH_Group g = new GH_Group();
                g.NickName = Path.GetFileName(XMLPath);
                g.Name = GUID;
                g.Colour = Color.FromArgb(255, 255, 255, 255);
                GrasshopperDocument.AddObject(g, false, GrasshopperDocument.ObjectCount);
                List<Object> objects = new List<Object>();
                foreach (var item in maps)
                {
                    if (item.Value["Name"] == "Panel")
                    {
                        GH_Panel aPanel = new GH_Panel();
                        GrasshopperDocument.AddObject(aPanel, false);
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        aPanel.Attributes.Pivot = p;
                        aPanel.Properties.Colour = Color.White;
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Output_0"))
                            {
                                if (key == "Output_0_GUID")
                                {
                                }
                                else if (key == "Output_0_Value")
                                {
                                    aPanel.UserText = item.Value[key];
                                    break;
                                }
                                else
                                {
                                    aPanel.UserText = item.Value[key];
                                    aPanel.Description = key;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        int len = aPanel.UserText.Length;
                        string panel_length = aPanel.UserText;
                        List<string> contents = panel_length.Split('\n').ToList();
                        int row_max = 0; 
                        for (int i = 0; i < contents.Count; i++)
                        {
                            if (contents[i].Length > row_max)
                            {
                                row_max = contents[i].Length;
                            }
                        }
                        RectangleF r = new RectangleF(0.0F, 0.0F, Convert.ToSingle(row_max * 18), Convert.ToSingle(contents.Count * 18));
                        aPanel.Attributes.Bounds = r;
                        aPanel.Attributes.ExpireLayout();
                        g.AddObject(aPanel.InstanceGuid);
                        objects.Add(aPanel);
                    }
                    else if (item.Value["Name"] == "Box")
                    {
                        SIMComponents.Box box = new SIMComponents.Box();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        box.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            box.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    box.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(box, false);
                        g.AddObject(box.InstanceGuid);
                        objects.Add(box);
                    }
                    else if (item.Value["Name"] == "XAxis")
                    {
                        SIMComponents.XAxis axis = new SIMComponents.XAxis();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        axis.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    axis.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(axis, false);
                        g.AddObject(axis.InstanceGuid);
                        objects.Add(axis);
                    }
                    else if (item.Value["Name"] == "YAxis")
                    {
                        SIMComponents.YAxis axis = new SIMComponents.YAxis();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        axis.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    axis.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(axis, false);
                        g.AddObject(axis.InstanceGuid);
                        objects.Add(axis);
                    }
                    else if (item.Value["Name"] == "ZAxis")
                    {
                        SIMComponents.ZAxis axis = new SIMComponents.ZAxis();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        axis.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    axis.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(axis, false);
                        g.AddObject(axis.InstanceGuid);
                        objects.Add(axis);
                    }
                    else if (item.Value["Name"] == "XYZ2List")
                    {
                        SIMComponents.XYZ2List xyz2list = new SIMComponents.XYZ2List();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        xyz2list.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    xyz2list.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(xyz2list, false);
                        g.AddObject(xyz2list.InstanceGuid);
                        objects.Add(xyz2list);
                    }
                    else if (item.Value["Name"] == "Paras")
                    {
                        SIMComponents.Paras paras = new SIMComponents.Paras();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        paras.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    paras.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(paras, false);
                        g.AddObject(paras.InstanceGuid);
                        objects.Add(paras);
                    }
                    else if (item.Value["Name"] == "List2XYZ")
                    {
                        SIMComponents.List2XYZ list2xyz = new SIMComponents.List2XYZ();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        list2xyz.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    list2xyz.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(list2xyz, false);
                        g.AddObject(list2xyz.InstanceGuid);
                        objects.Add(list2xyz);
                    }
                    else if (item.Value["Name"] == "Scale")
                    {
                        SIMComponents.Scale scale = new SIMComponents.Scale();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        scale.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            scale.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    scale.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(scale, false);
                        g.AddObject(scale.InstanceGuid);
                        objects.Add(scale);
                    }
                    else if (item.Value["Name"] == "Pyramid")
                    {
                        SIMComponents.Pyramid pyramid = new SIMComponents.Pyramid();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        pyramid.Attributes.Pivot = p;
                        // 2022.9.19
                        // box.ExpirePreview(false);
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            pyramid.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    pyramid.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(pyramid, false);
                        g.AddObject(pyramid.InstanceGuid);
                        objects.Add(pyramid);
                    }
                    else if (item.Value["Name"] == "Cylinder")
                    {
                        SIMComponents.Cylinder cylinder = new SIMComponents.Cylinder();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        cylinder.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            cylinder.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    cylinder.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(cylinder, false);
                        g.AddObject(cylinder.InstanceGuid);
                        objects.Add(cylinder);
                    }
                    else if (item.Value["Name"] == "Ring")
                    {
                        SIMComponents.Ring ring = new SIMComponents.Ring();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        ring.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            ring.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    ring.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(ring, false);
                        g.AddObject(ring.InstanceGuid);
                        objects.Add(ring);
                    }
                    else if (item.Value["Name"] == "Sphere")
                    {
                        SIMComponents.Sphere sphere = new SIMComponents.Sphere();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        sphere.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            sphere.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    sphere.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(sphere, false);
                        g.AddObject(sphere.InstanceGuid);
                        objects.Add(sphere);
                    }
                    else if (item.Value["Name"] == "Cone")
                    {
                        SIMComponents.Cone cone = new SIMComponents.Cone();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        cone.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            cone.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    cone.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(cone, false);
                        g.AddObject(cone.InstanceGuid);
                        objects.Add(cone);
                    }
                    else if (item.Value["Name"] == "Formula")
                    {
                        SIMComponents.Formula formula = new SIMComponents.Formula();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        formula.Attributes.Pivot = p;
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    formula.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(formula, false);
                        g.AddObject(formula.InstanceGuid);
                        objects.Add(formula);
                    }
                    else if (item.Value["Name"] == "Cut")
                    {
                        SIMComponents.Cut cut = new SIMComponents.Cut();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        cut.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            cut.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    cut.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(cut, false);
                        g.AddObject(cut.InstanceGuid);
                        objects.Add(cut);
                    }
                    else if (item.Value["Name"] == "Fuse")
                    {
                        SIMComponents.Fuse fuse = new SIMComponents.Fuse();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        fuse.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            fuse.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    fuse.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(fuse, false);
                        g.AddObject(fuse.InstanceGuid);
                        objects.Add(fuse);
                    }
                    else if (item.Value["Name"] == "Common")
                    {
                        SIMComponents.Common common = new SIMComponents.Common();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        common.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            common.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    common.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(common, false);
                        g.AddObject(common.InstanceGuid);
                        objects.Add(common);
                    }
                    else if (item.Value["Name"] == "MergeNumber")
                    {
                        SIMComponents.MergeNumber mergeNumber = new SIMComponents.MergeNumber();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        mergeNumber.Attributes.Pivot = p;
                        GrasshopperDocument.AddObject(mergeNumber, false);
                        g.AddObject(mergeNumber.InstanceGuid);
                        objects.Add(mergeNumber);
                    }
                    else if (item.Value["Name"] == "CircleArray")
                    {
                        SIMComponents.CircleArray circle_array = new SIMComponents.CircleArray();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        circle_array.Attributes.Pivot = p;
                        GrasshopperDocument.AddObject(circle_array, false);
                        g.AddObject(circle_array.InstanceGuid);
                        objects.Add(circle_array);
                    }
                    else if (item.Value["Name"] == "ATTRIBUTE")
                    {
                        SIMComponents.ATTRIBUTE att = new SIMComponents.ATTRIBUTE();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        att.Attributes.Pivot = p;
                        GrasshopperDocument.AddObject(att, false);
                        g.AddObject(att.InstanceGuid);
                        objects.Add(att);
                    }
                    else if (item.Value["Name"] == "HEADER")
                    {
                        SIMComponents.HEADER att = new SIMComponents.HEADER();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        att.Attributes.Pivot = p;
                        GrasshopperDocument.AddObject(att, false);
                        g.AddObject(att.InstanceGuid);
                        objects.Add(att);
                    }
                    else if (item.Value["Name"] == "MergeBrep")
                    {
                        SIMComponents.MergeBrep mergeBrep = new SIMComponents.MergeBrep();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        mergeBrep.Attributes.Pivot = p;
                        GrasshopperDocument.AddObject(mergeBrep, false);
                        g.AddObject(mergeBrep.InstanceGuid);
                        objects.Add(mergeBrep);
                    }
                    else if (item.Value["Name"] == "Move")
                    {
                        SIMComponents.Move move = new SIMComponents.Move();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        move.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            move.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    move.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(move, false);
                        g.AddObject(move.InstanceGuid);
                        objects.Add(move);
                    }
                    else if (item.Value["Name"] == "Rotate")
                    {
                        SIMComponents.Rotate rotate = new SIMComponents.Rotate();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        rotate.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            rotate.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    rotate.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(rotate, false);
                        g.AddObject(rotate.InstanceGuid);
                        objects.Add(rotate);
                    }
                    else if (item.Value["Name"] == "GetFeature")
                    {
                        SIMComponents.GetFeature getFeature = new SIMComponents.GetFeature();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        getFeature.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            getFeature.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    getFeature.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(getFeature, false);
                        g.AddObject(getFeature.InstanceGuid);
                        objects.Add(getFeature);
                    }
                    else if (item.Value["Name"] == "PointPointCoincident")
                    {
                        SIMComponents.PointPointCoincident pointPointCoincident = new SIMComponents.PointPointCoincident();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        pointPointCoincident.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            pointPointCoincident.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    pointPointCoincident.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(pointPointCoincident, false);
                        g.AddObject(pointPointCoincident.InstanceGuid);
                        objects.Add(pointPointCoincident);
                    }
                    else if (item.Value["Name"] == "FaceFaceParallel")
                    {
                        SIMComponents.FaceFaceParallel faceFaceParallel = new SIMComponents.FaceFaceParallel();
                        float x = Convert.ToSingle(item.Value["Position_X"]);
                        float y = Convert.ToSingle(item.Value["Position_Y"]);
                        PointF p = new PointF(x, y);
                        faceFaceParallel.Attributes.Pivot = p;
                        if (item.Value.Keys.Contains("Hidden"))
                        {
                            bool b = Convert.ToBoolean(item.Value["Hidden"]);
                            faceFaceParallel.Hidden = true;
                        }
                        foreach (string key in item.Value.Keys)
                        {
                            if (key.Contains("Hidden"))
                            {
                                if (item.Value[key] == "true")
                                {
                                    faceFaceParallel.Hidden = true;
                                    break;
                                }
                            }
                            else
                            {
                            }
                        }
                        GrasshopperDocument.AddObject(faceFaceParallel, false);
                        g.AddObject(faceFaceParallel.InstanceGuid);
                        objects.Add(faceFaceParallel);
                    }
                    else
                    {
                    }
                }
                g.ExpireCaches();
                int objectCount = 0;
                foreach (var item in maps)
                {
                    foreach (var i in item.Value)
                    {
                        if (i.Key.Contains("Source"))
                        {
                            string[] inputParams = i.Key.Split('_');
                            if (item.Value["Name"] == "Box")
                            {
                                SIMComponents.Box box = (SIMComponents.Box)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                            }
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Cylinder")
                            {
                                SIMComponents.Cylinder cylinder = (SIMComponents.Cylinder)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Ring")
                            {
                                SIMComponents.Ring ring = (SIMComponents.Ring)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Cone")
                            {
                                SIMComponents.Cone cone = (SIMComponents.Cone)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Sphere")
                            {
                                SIMComponents.Sphere sphere = (SIMComponents.Sphere)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Formula")
                            {
                                SIMComponents.Formula formula = (SIMComponents.Formula)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Cut")
                            {
                                SIMComponents.Cut cut = (SIMComponents.Cut)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Fuse")
                            {
                                SIMComponents.Fuse fuse = (SIMComponents.Fuse)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Common")
                            {
                                SIMComponents.Common common = (SIMComponents.Common)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "MergeNumber")
                            {
                                SIMComponents.MergeNumber mergeNumber = (SIMComponents.MergeNumber)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "MergeBrep")
                            {
                                SIMComponents.MergeBrep mergeBrep = (SIMComponents.MergeBrep)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Move")
                            {
                                SIMComponents.Move move = (SIMComponents.Move)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Rotate")
                            {
                                SIMComponents.Rotate rotate = (SIMComponents.Rotate)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "GetFeature")
                            {
                                SIMComponents.GetFeature getFeature = (SIMComponents.GetFeature)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "PointPointCoincident")
                            {
                                SIMComponents.PointPointCoincident pointpointCoincident = (SIMComponents.PointPointCoincident)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "FaceFaceParallel")
                            {
                                SIMComponents.FaceFaceParallel facefaceParallel = (SIMComponents.FaceFaceParallel)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "XAxis")
                            {
                                SIMComponents.XAxis xxx = (SIMComponents.XAxis)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "YAxis")
                            {
                                SIMComponents.YAxis xxx = (SIMComponents.YAxis)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "ZAxis")
                            {
                                SIMComponents.ZAxis xxx = (SIMComponents.ZAxis)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "XYZ2List")
                            {
                                SIMComponents.XYZ2List xxx = (SIMComponents.XYZ2List)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "List2XYZ")
                            {
                                SIMComponents.List2XYZ xxx = (SIMComponents.List2XYZ)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Scale")
                            {
                                SIMComponents.Scale xxx = (SIMComponents.Scale)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Pyramid")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Pyramid)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Pyramid")
                            {
                                SIMComponents.Pyramid xxx = (SIMComponents.Pyramid)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "Paras")
                            {
                                SIMComponents.Paras xxx = (SIMComponents.Paras)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                //else if (subItem.Value["Name"] == "Paras")
                                                //{
                                                //    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                //}
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "CircleArray")
                            {
                                SIMComponents.CircleArray xxx = (SIMComponents.CircleArray)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "ATTRIBUTE")
                            {
                                SIMComponents.ATTRIBUTE xxx = (SIMComponents.ATTRIBUTE)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else if (item.Value["Name"] == "HEADER")
                            {
                                SIMComponents.HEADER xxx = (SIMComponents.HEADER)objects[objectCount];
                                int count = 0;
                                foreach (var subItem in maps)
                                {
                                    foreach (var j in subItem.Value)
                                    {
                                        if (j.Key.Contains("Output"))
                                        {
                                            string[] OutputParams = j.Key.Split('_');
                                            if (j.Value == i.Value)
                                            {
                                                if (subItem.Value["Name"] == "Panel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)objects[count]);
                                                }
                                                else if (subItem.Value["Name"] == "Box")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cone")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cylinder")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Ring")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Sphere")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Formula")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Cut")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Fuse")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Common")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeNumber")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "MergeBrep")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Move")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Rotate")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "GetFeature")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "PointPointCoincident")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "FaceFaceParallel")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "YAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.YAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ZAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ZAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XAxis")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XAxis)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "List2XYZ")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.List2XYZ)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "XYZ2List")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.XYZ2List)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Scale")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Scale)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "CircleArray")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.CircleArray)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "Paras")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Paras)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "ATTRIBUTE")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.ATTRIBUTE)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else if (subItem.Value["Name"] == "HEADER")
                                                {
                                                    xxx.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.HEADER)objects[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                                }
                                                else
                                                {
                                                }
                                            }
                                            else
                                            {
                                            }
                                        }
                                        else
                                        {
                                        }
                                    }
                                    count++;
                                }
                            }
                            else
                            {
                            }
                        }
                        else
                        {
                        }
                    }
                    objectCount++;
                }
            }
            else
            {
            }
            StringBuilder Builder = new StringBuilder();
            foreach (int key in maps.Keys)
            {
                Builder.Append(String.Format("第{0}个电池块\n", key));
                Dictionary<string, string> map = maps[key];
                foreach (string subKey in map.Keys)
                {
                    Builder.Append(String.Format("{0}={1}\n", subKey, map[subKey]));
                }
            }
            return Builder.ToString();
        }
        public static void ParserXML1(string XML)
        {
            Dictionary<int, Dictionary<string, string>> mapTotal = new Dictionary<int, Dictionary<string, string>>();
            string XMLPath = XML;
            XmlDocument doc = new XmlDocument();
            doc.Load(XMLPath);
            XmlElement root = doc.DocumentElement;
            XmlNodeList listNodes = root.SelectNodes("/TMP/Object");
            int countO = 1;
            foreach (XmlNode node in listNodes)
            {
                Dictionary<string, string> map = new Dictionary<string, string>();
                int inputCount = 0;
                int OutputCount = 0;
                foreach (XmlNode childNode in node.ChildNodes)
                {
                    if (childNode.Name != "Input" && childNode.Name != "Output")
                    {
                        if (childNode.Name == "GUID")
                        {
                            map[childNode.Name] = childNode.InnerText;
                        }
                        if (childNode.Name == "Name")
                        {
                            map[childNode.Name] = childNode.InnerText;
                        }
                        if (childNode.Name == "Position_X")
                        {
                            map[childNode.Name] = childNode.InnerText;
                        }
                        if (childNode.Name == "Position_Y")
                        {
                            map[childNode.Name] = childNode.InnerText;
                        }
                        // Console.WriteLine(childNode.Name+"---"+childNode.InnerText);
                    }
                    else if (childNode.Name == "Input")
                    {
                        foreach (XmlNode childNode2 in childNode.ChildNodes)
                        {
                            // Console.WriteLine(childNode2.Name);
                            if (childNode2.Name == "GUID")
                            {
                                map["Input_" + inputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                            if (childNode2.Name == "Name")
                            {
                                map["Input_" + inputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                            if (childNode2.Name == "Source")
                            {
                                map["Input_" + inputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                        }
                        inputCount++;
                    }
                    else if (childNode.Name == "Output")
                    {
                        foreach (XmlNode childNode2 in childNode.ChildNodes)
                        {
                            // Console.WriteLine(childNode2.Name);
                            if (childNode2.Name == "GUID")
                            {
                                map["Output_" + OutputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                            if (childNode2.Name == "Name")
                            {
                                map["Output_" + OutputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                            if (childNode2.Name == "Value")
                            {
                                map["Output_" + OutputCount + "_" + childNode2.Name] = childNode2.InnerText;
                            }
                        }
                        OutputCount++;
                    }
                }
                mapTotal[countO] = map;
                countO++;
            }
            GH_Document GrasshopperDocument = Instances.ActiveCanvas.Document;
            GH_Group g = new GH_Group();
            g.NickName = Path.GetFileName(XML);
            g.Colour = Color.FromArgb(255, 255, 255, 255);
            GrasshopperDocument.AddObject(g, false, GrasshopperDocument.ObjectCount);
            List<Object> guids = new List<Object>();
            foreach (var item in mapTotal)
            {
                //Console.WriteLine(item.Key + item.Value);
                if (item.Value["Name"] == "Box")
                {
                    SIMComponents.Box box = new SIMComponents.Box();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    box.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(box, false);
                    g.AddObject(box.InstanceGuid);
                    guids.Add(box);
                }
                if (item.Value["Name"] == "Cylinder")
                {
                    SIMComponents.Cylinder cylinder = new SIMComponents.Cylinder();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    cylinder.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(cylinder, false);
                    g.AddObject(cylinder.InstanceGuid);
                    guids.Add(cylinder);
                }
                if (item.Value["Name"] == "Ring")
                {
                    SIMComponents.Ring ring = new SIMComponents.Ring();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    ring.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(ring, false);
                    g.AddObject(ring.InstanceGuid);
                    guids.Add(ring);
                }
                if (item.Value["Name"] == "Sphere")
                {
                    SIMComponents.Sphere sphere = new SIMComponents.Sphere();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    sphere.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(sphere, false);
                    g.AddObject(sphere.InstanceGuid);
                    guids.Add(sphere);
                }
                if (item.Value["Name"] == "Cone")
                {
                    SIMComponents.Cone cone = new SIMComponents.Cone();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    cone.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(cone, false);
                    g.AddObject(cone.InstanceGuid);
                    guids.Add(cone);
                }
                if (item.Value["Name"] == "Panel")
                {
                    GH_Panel aPanel = new GH_Panel();
                    GrasshopperDocument.AddObject(aPanel, false);
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    aPanel.Attributes.Pivot = p;
                    aPanel.Properties.Colour = Color.White;
                    aPanel.UserText = item.Value["Output_0_Value"];
                    //int len = aPanel.UserText.Length;
                    //RectangleF r = new RectangleF(0.0F, 0.0F, Convert.ToSingle(len * 20), 20.0F);
                    //aPanel.Attributes.Bounds = r;
                    aPanel.Attributes.ExpireLayout();
                    g.AddObject(aPanel.InstanceGuid);
                    guids.Add(aPanel);
                }
                if (item.Value["Name"] == "Formula")
                {
                    SIMComponents.Formula formula = new SIMComponents.Formula();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    formula.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(formula, false);
                    g.AddObject(formula.InstanceGuid);
                    guids.Add(formula);
                }
                if (item.Value["Name"] == "Cut")
                {
                    SIMComponents.Cut xxx = new SIMComponents.Cut();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "Fuse")
                {
                    SIMComponents.Fuse xxx = new SIMComponents.Fuse();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "Common")
                {
                    SIMComponents.Common xxx = new SIMComponents.Common();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "MergeNumber")
                {
                    SIMComponents.MergeNumber xxx = new SIMComponents.MergeNumber();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "MergeBrep")
                {
                    SIMComponents.MergeBrep xxx = new SIMComponents.MergeBrep();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "Move")
                {
                    SIMComponents.Move xxx = new SIMComponents.Move();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "Rotate")
                {
                    SIMComponents.Rotate xxx = new SIMComponents.Rotate();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "GetFeature")
                {
                    SIMComponents.GetFeature xxx = new SIMComponents.GetFeature();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "PointPointCoincident")
                {
                    SIMComponents.PointPointCoincident xxx = new SIMComponents.PointPointCoincident();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
                if (item.Value["Name"] == "FaceFaceParallel")
                {
                    SIMComponents.FaceFaceParallel xxx = new SIMComponents.FaceFaceParallel();
                    float my_x = Convert.ToSingle(item.Value["Position_X"]);
                    float my_y = Convert.ToSingle(item.Value["Position_Y"]);
                    PointF p = new PointF(my_x, my_y);
                    xxx.Attributes.Pivot = p;
                    GrasshopperDocument.AddObject(xxx, false);
                    g.AddObject(xxx.InstanceGuid);
                    guids.Add(xxx);
                }
            }
            g.ExpireCaches();
            int objectCount = 0;
            foreach (var item in mapTotal)
            {
                foreach (var i in item.Value)
                {
                    if (i.Key.Contains("Source"))
                    {
                        string[] inputParams = i.Key.Split('_');
                        if (item.Value["Name"] == "Box")
                        {
                            SIMComponents.Box box = (SIMComponents.Box)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                box.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Cylinder")
                        {
                            SIMComponents.Cylinder cylinder = (SIMComponents.Cylinder)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                cylinder.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Ring")
                        {
                            SIMComponents.Ring ring = (SIMComponents.Ring)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                ring.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Cone")
                        {
                            SIMComponents.Cone cone = (SIMComponents.Cone)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                cone.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Sphere")
                        {
                            SIMComponents.Sphere sphere = (SIMComponents.Sphere)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                sphere.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Formula")
                        {
                            SIMComponents.Formula formula = (SIMComponents.Formula)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                formula.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Cut")
                        {
                            SIMComponents.Cut cut = (SIMComponents.Cut)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                cut.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Fuse")
                        {
                            SIMComponents.Fuse fuse = (SIMComponents.Fuse)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                fuse.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Common")
                        {
                            SIMComponents.Common common = (SIMComponents.Common)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                common.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "MergeNumber")
                        {
                            SIMComponents.MergeNumber mergeNumber = (SIMComponents.MergeNumber)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                mergeNumber.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "MergeBrep")
                        {
                            SIMComponents.MergeBrep mergeBrep = (SIMComponents.MergeBrep)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                mergeBrep.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Move")
                        {
                            SIMComponents.Move move = (SIMComponents.Move)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                move.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "Rotate")
                        {
                            SIMComponents.Rotate rotate = (SIMComponents.Rotate)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                rotate.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "GetFeature")
                        {
                            SIMComponents.GetFeature getFeature = (SIMComponents.GetFeature)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                getFeature.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "PointPointCoincident")
                        {
                            SIMComponents.PointPointCoincident pointpointCoincident = (SIMComponents.PointPointCoincident)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                pointpointCoincident.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                        else if (item.Value["Name"] == "FaceFaceParallel")
                        {
                            SIMComponents.FaceFaceParallel facefaceParallel = (SIMComponents.FaceFaceParallel)guids[objectCount];
                            int count = 0;
                            foreach (var item1 in mapTotal)
                            {
                                foreach (var i1 in item1.Value)
                                {
                                    if (i1.Key.Contains("Output"))
                                    {
                                        string[] OutputParams = i1.Key.Split('_');
                                        if (i1.Value == i.Value)
                                        {
                                            if (item1.Value["Name"] == "Panel")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource((GH_Panel)guids[count]);
                                            }
                                            else if (item1.Value["Name"] == "Box")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Box)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cone")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cone)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cylinder")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cylinder)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Ring")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Ring)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Sphere")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Sphere)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Formula")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Formula)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Cut")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Cut)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Fuse")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Fuse)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Common")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Common)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeNumber")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeNumber)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "MergeBrep")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.MergeBrep)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Move")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Move)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "Rotate")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.Rotate)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "GetFeature")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.GetFeature)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "PointPointCoincident")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.PointPointCoincident)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                            else if (item1.Value["Name"] == "FaceFaceParallel")
                                            {
                                                facefaceParallel.Params.Input[Convert.ToInt32(inputParams[1])].AddSource(((SIMComponents.FaceFaceParallel)guids[count]).Params.Output[Convert.ToInt32(OutputParams[1])]);
                                            }
                                        }
                                    }
                                }
                                count++;
                            }
                        }
                    }
                }
                objectCount++;
            }
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Import;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AEA12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class MergeNumber : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public MergeNumber()
          : base("MergeNumber", "MergeNumber",
            "Merge a bunch of number streams",
            "SIM", "Merge")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            pManager.AddNumberParameter("Data1", "D1", "The 1st data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data2", "D2", "The 2nd data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data3", "D3", "The 3rd data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data4", "D4", "The 4th data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data5", "D5", "The 5th data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data6", "D6", "The 6th data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data7", "D7", "The 7th data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data8", "D8", "The 8th data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data9", "D9", "The 9th data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data10", "D10", "The 10th data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data11", "D11", "The 11th data of a list", GH_ParamAccess.item, 3.1415926536);
            pManager.AddNumberParameter("Data12", "D12", "The 12th data of a list", GH_ParamAccess.item, 3.1415926536);

            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddNumberParameter("Result", "R", "Result for merge number", GH_ParamAccess.list);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            double d1 = 3.1415926536;
            double d2 = 3.1415926536;
            double d3 = 3.1415926536;
            double d4 = 3.1415926536;
            double d5 = 3.1415926536;
            double d6 = 3.1415926536;
            double d7 = 3.1415926536;
            double d8 = 3.1415926536;
            double d9 = 3.1415926536;
            double d10 = 3.1415926536;
            double d11 = 3.1415926536;
            double d12 = 3.1415926536;
            // string F = "sin(x1)+cos(x2)+x3";

            List<double> result = new List<double>();
            if (Params.Input[0].SourceCount == 1)
            {
                DA.GetData(0, ref d1);
                result.Add(d1);
            }
            if (Params.Input[1].SourceCount == 1)
            {
                DA.GetData(1, ref d2);
                result.Add(d2);
            }
            if (Params.Input[2].SourceCount == 1)
            {
                DA.GetData(2, ref d3);
                result.Add(d3);
            }
            if (Params.Input[3].SourceCount == 1)
            {
                DA.GetData(3, ref d4);
                result.Add(d4);
            }
            if (Params.Input[4].SourceCount == 1)
            {
                DA.GetData(4, ref d5);
                result.Add(d5);
            }
            if (Params.Input[5].SourceCount == 1)
            {
                DA.GetData(5, ref d6);
                result.Add(d6);
            }
            if (Params.Input[6].SourceCount == 1)
            {
                DA.GetData(6, ref d7);
                result.Add(d7);
            }
            if (Params.Input[7].SourceCount == 1)
            {
                DA.GetData(7, ref d8);
                result.Add(d8);
            }
            if (Params.Input[8].SourceCount == 1)
            {
                DA.GetData(8, ref d9);
                result.Add(d9);
            }
            if (Params.Input[9].SourceCount == 1)
            {
                DA.GetData(9, ref d10);
                result.Add(d10);
            }
            if (Params.Input[10].SourceCount == 1)
            {
                DA.GetData(10, ref d11);
                result.Add(d11);
            }
            if (Params.Input[11].SourceCount == 1)
            {
                DA.GetData(11, ref d12);
                result.Add(d12);
            }

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;

            int Pcount = result.Count;
            if (Pcount == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "All parameters have no source or have more than one source");
                return;
            }

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            //DataTable dataTable = new DataTable();

            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetDataList(0, result);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }


        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.MergeNumber;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AE2D9963-F783-446C-BB5C-9E458A2F8788");
    }

    public class MergeBrep : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public MergeBrep()
          : base("MergeBrep", "MergeBrep",
            "Merge a bunch of brep streams",
            "SIM", "Merge")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            pManager.AddBrepParameter("Data1", "D1", "The 1st data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data2", "D2", "The 2nd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data3", "D3", "The 3rd data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data4", "D4", "The 4th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data5", "D5", "The 5th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data6", "D6", "The 6th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data7", "D7", "The 7th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data8", "D8", "The 8th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data9", "D9", "The 9th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data10", "D10", "The 10th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data11", "D11", "The 11th data of a list", GH_ParamAccess.item);
            pManager.AddBrepParameter("Data12", "D12", "The 12th data of a list", GH_ParamAccess.item);

            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Result", "R", "Result for merge brep", GH_ParamAccess.list);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            Brep b =  new Rhino.Geometry.Sphere(new Point3d(0, 0, 0), 0.0001).ToBrep();
            Brep b1 = b;
            Brep b2 = b;
            Brep b3 = b;
            Brep b4 = b;
            Brep b5 = b;
            Brep b6 = b;
            Brep b7 = b;
            Brep b8 = b;
            Brep b9 = b;
            Brep b10 = b;
            Brep b11 = b;
            Brep b12 = b;
            // string F = "sin(x1)+cos(x2)+x3";

            List<Brep> result = new List<Brep>();
            if (Params.Input[0].SourceCount == 1)
            {
                DA.GetData(0, ref b1);
                result.Add(b1);
            }
            if (Params.Input[1].SourceCount == 1)
            {
                DA.GetData(0, ref b2);
                result.Add(b2);
            }
            if (Params.Input[2].SourceCount == 1)
            {
                DA.GetData(0, ref b3);
                result.Add(b3);
            }
            if (Params.Input[3].SourceCount == 1)
            {
                DA.GetData(0, ref b4);
                result.Add(b4);
            }
            if (Params.Input[4].SourceCount == 1)
            {
                DA.GetData(0, ref b5);
                result.Add(b5);
            }
            if (Params.Input[5].SourceCount == 1)
            {
                DA.GetData(0, ref b6);
                result.Add(b6);
            }
            if (Params.Input[6].SourceCount == 1)
            {
                DA.GetData(0, ref b7);
                result.Add(b7);
            }
            if (Params.Input[7].SourceCount == 1)
            {
                DA.GetData(0, ref b8);
                result.Add(b8);
            }
            if (Params.Input[8].SourceCount == 1)
            {
                DA.GetData(0, ref b9);
                result.Add(b9);
            }
            if (Params.Input[9].SourceCount == 1)
            {
                DA.GetData(0, ref b10);
                result.Add(b10);
            }
            if (Params.Input[10].SourceCount == 1)
            {
                DA.GetData(0, ref b11);
                result.Add(b11);
            }
            if (Params.Input[11].SourceCount == 1)
            {
                DA.GetData(0, ref b12);
                result.Add(b12);
            }

            // Then we need to access the input parameters individually. 
            // When data cannot be extracted from a parameter, we should abort this method.
            // if (!DA.GetData(0, ref plane)) return;
            // if (!DA.GetData(1, ref radius0)) return;
            // if (!DA.GetData(2, ref radius1)) return;
            // if (!DA.GetData(3, ref turns)) return;

            int Pcount = result.Count;
            if (Pcount == 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "All parameters are null");
                return;
            }

            // We should now validate the data and warn the user if invalid data is supplied.
            // if (radius0 < 0.0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
            //     return;
            // }
            // if (radius1 <= radius0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
            //     return;
            // }
            // if (turns <= 0)
            // {
            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
            //     return;
            // }

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            //DataTable dataTable = new DataTable();

            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetDataList(0, result);
        }

        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
        // {
        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

        //     Point3d[] p0;
        //     Point3d[] p1;

        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

        //     PolyCurve spiral = new PolyCurve();

        //     for (int i = 0; i < p0.Length - 1; i++)
        //     {
        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

        //         spiral.Append(arc0);
        //         spiral.Append(arc1);
        //     }

        //     return spiral;
        // }


        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.MergeBrep;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AED12263-F783-446C-BB5C-9E458A2F8788");
    }

    public class Move : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Move()
          : base("Move", "Move",
            "Move brep",
            "SIM", "Assembly")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            pManager.AddBrepParameter("Brep", "B", "The brep to move", GH_ParamAccess.item);
            pManager.AddNumberParameter("Move", "XYZ", "The X, Y, Z offset to move", GH_ParamAccess.list, new List<double>() { 0, 0, 0 });

            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Result", "R", "Result for moving brep", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            Brep b = null;
            // string F = "sin(x1)+cos(x2)+x3";
            List<double> list = new List<double>();

            DA.GetData(0, ref b);
            DA.GetDataList(1, list);

            int Pcount = list.Count;
            if (Pcount != 3)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "XYZ only has three numbers");
                return;
            }

            b.Translate(list[0], list[1], list[2]) ;

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            //DataTable dataTable = new DataTable();

            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, b);
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Move;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AED12263-F783-446C-BD5C-9E458A2F8788");
    }

    public class Rotate : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public Rotate()
          : base("Rotate", "Rotate",
            "Rotate brep",
            "SIM", "Assembly")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            pManager.AddBrepParameter("Brep", "B", "The brep to rotate", GH_ParamAccess.item);
            pManager.AddNumberParameter("RotateOrigin", "Origin", "The center to rotate", GH_ParamAccess.list, new List<double>() { 0, 0, 0 });
            pManager.AddNumberParameter("RotateAxis", "Axis", "The axis to rotate", GH_ParamAccess.list, new List<double>() { 0, 0, 1 });
            pManager.AddNumberParameter("RotateAngle", "Angle", "The angle to rotate", GH_ParamAccess.item, 90);

            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            pManager.AddBrepParameter("Result", "R", "Result for rotating brep", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // First, we need to retrieve all data from the input parameters.
            // We'll start by declaring variables and assigning them starting values.
            // Plane plane = Plane.WorldXY;
            // double radius0 = 0.0;
            // double radius1 = 0.0;
            // int turns = 0;
            Brep b = null;
            // string F = "sin(x1)+cos(x2)+x3";
            List<double> list1 = new List<double>();
            List<double> list2 = new List<double>();
            double angle = 90;

            DA.GetData(0, ref b);
            DA.GetDataList(1, list1);
            DA.GetDataList(2, list2);
            DA.GetData(3, ref angle);

            int Pcount1 = list1.Count;
            if (Pcount1 != 3)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Origin only has three numbers");
                return;
            }

            int Pcount2 = list2.Count;
            if (Pcount2 != 3)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Axis only has three numbers");
                return;
            }

            if (angle < 0 || angle >360)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Angle is no more than 360 and no less than 0");
                return;
            }

            b.Rotate(angle * Math.PI / 180, new Vector3d(list2[0], list2[1], list2[2]), new Point3d(list1[0], list1[1], list1[2]));

            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
            // The actual functionality will be in a different method:
            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
            //DataTable dataTable = new DataTable();

            // Finally assign the spiral to the output parameter.
            // DA.SetData(0, spiral);
            DA.SetData(0, b);
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Rotate;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AED12263-F783-446C-BD5C-9E458A2F8A88");
    }

    public class GetFeature : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public GetFeature()
          : base("GetFeature", "GetFeature",
            "Get center of mass, vertex, edge or face",
            "SIM", "Feature")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            pManager.AddBrepParameter("Brep", "Brep", "The brep to explode", GH_ParamAccess.item);
            pManager.AddIntegerParameter("FaceIndex", "FaceIndex", "The face index of brep", GH_ParamAccess.item, -1);
            pManager.AddIntegerParameter("EdgeIndex", "EdgeIndex", "The edge index of brep", GH_ParamAccess.item, -1);
            pManager.AddIntegerParameter("VertexIndex", "VertexIndex", "The vertex index of brep", GH_ParamAccess.item, -1);

            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            // pManager.AddNumberParameter("BrepCenterOfMass", "BrepCenterOfMass", "The center of mass of the brep", GH_ParamAccess.list);
            pManager.AddSurfaceParameter("Face", "Face", "The face of the brep", GH_ParamAccess.item);
            pManager.AddNumberParameter("FaceCenterOfMass", "FaceCenterOfMass", "The center of mass of the face", GH_ParamAccess.list);
            pManager.AddNumberParameter("FaceNormal", "FaceNormal", "The normal of the face", GH_ParamAccess.list);
            pManager.AddCurveParameter("Edge", "Edge", "The edge of the brep", GH_ParamAccess.item);
            pManager.AddNumberParameter("EdgeStartVertex", "EdgeStartVertex", "The start vertex of the edge", GH_ParamAccess.list);
            pManager.AddNumberParameter("EdgeEndVertex", "EdgeEndVertex", "The end vertex of the edge", GH_ParamAccess.list);
            pManager.AddNumberParameter("EdgeMidVertex", "EdgeMidVertex", "The mid vertex of the edge", GH_ParamAccess.list);
            pManager.AddNumberParameter("EdgeNormal", "EdgeNormal", "The normal of the edge", GH_ParamAccess.list);
            pManager.AddPointParameter("Vertex", "Vertex", "The vertex of the brep", GH_ParamAccess.item);
            pManager.AddNumberParameter("VertexXYZ", "VertexXYZ", "The X, Y, Z of the vertex", GH_ParamAccess.list);
            pManager.AddBrepParameter("BrepOut", "BrepOut", "Copy brep", GH_ParamAccess.item);
            pManager.AddNumberParameter("BrepCenterOfMass", "BrepCenterOfMass", "The center of mass of the brep", GH_ParamAccess.list);
            pManager.HideParameter(10);
            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // Brep b = null;
            // string F = "sin(x1)+cos(x2)+x3";
            //List<double> list1 = new List<double>();
            //List<double> list2 = new List<double>();
            //double angle = 90;
            Brep b = null;
            int faceindex = -1;
            int edgeindex = -1;
            int vertexindex = -1;
            DA.GetData(0, ref b);
            DA.GetData(1, ref faceindex);
            DA.GetData(2, ref edgeindex);
            DA.GetData(3, ref vertexindex);
            int faceCount = b.Faces.Count;
            int edgeCount = b.Edges.Count;
            int vertexCount = b.Vertices.Count;
            if (faceindex < 0 && edgeindex < 0 && vertexindex < 0)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "At least one of Face/Edge/Vertex index is more than -1");
                return;
            }
            if (faceindex >= faceCount && edgeindex >= faceCount && vertexindex >= vertexCount)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, String.Format("Face index must be no more than {0}\nEdge index must be no more than {1}\nVertex index must be no more than {2}", faceCount - 1, edgeCount - 1, vertexCount - 1));
                return;
            }
            if (faceindex < faceCount && faceindex > -1)
            {
                DA.SetData(0, b.Faces[faceindex].ToNurbsSurface());

                Point3d point3D = b.Faces[faceindex].GetBoundingBox(true).Center;

                DA.SetDataList(1, new List<double>() { point3D.X, point3D.Y, point3D.Z });
                Vector3d vector3D = b.Faces[faceindex].NormalAt(0, 0);
                DA.SetDataList(2, new List<double>() { vector3D.X, vector3D.Y, vector3D.Z });
            }
 
            if (edgeindex < edgeCount && edgeindex > -1)
            {
                DA.SetData(3, b.Edges[edgeindex]);
                Point3d point3Dstart = b.Edges[edgeindex].PointAtStart;
                DA.SetDataList(4, new List<double>() { point3Dstart.X, point3Dstart.Y, point3Dstart.Z });
                Point3d point3Dend = b.Edges[edgeindex].PointAtEnd;
                DA.SetDataList(5, new List<double>() { point3Dend.X, point3Dend.Y, point3Dend.Z });
                Point3d point3Dmid = (point3Dstart + point3Dend) / 2;
                DA.SetDataList(6, new List<double>() { point3Dmid.X, point3Dmid.Y, point3Dmid.Z });
                Vector3d vector3Dedge = point3Dstart - point3Dend;
                DA.SetDataList(7, new List<double>() { vector3Dedge.X, vector3Dedge.Y, vector3Dedge.Z });
            }
            
            if (vertexindex < vertexCount && vertexindex > -1)
            {
                Point3d vertex = b.Vertices[vertexindex].Location;
                DA.SetData(8, vertex);
                DA.SetDataList(9, new List<double>() { vertex.X, vertex.Y, vertex.Z });
            }
            Point3d brepCenter = b.GetBoundingBox(true).Center;
            DA.SetData(10, b);
            DA.SetDataList(11, new List<double>() { brepCenter.X, brepCenter.Y, brepCenter.Z });
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.Feature;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AED12263-F783-446C-BD5C-9E458A2F8A98");
    }

    public class PointPointCoincident : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public PointPointCoincident()
          : base("PointPointCoincident", "PointPointCoincident",
            "PointPointCoincident",
            "SIM", "Assembly")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            pManager.AddBrepParameter("Brep1", "Brep1", "Not move", GH_ParamAccess.item);
            pManager.AddNumberParameter("Point1", "Point1", "The referrence point of Brep1", GH_ParamAccess.list);
            pManager.AddBrepParameter("Brep1", "Brep2", "Move", GH_ParamAccess.item);
            pManager.AddNumberParameter("Point2", "Point2", "The referrence point of Brep2", GH_ParamAccess.list);

            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            // pManager.AddNumberParameter("BrepCenterOfMass", "BrepCenterOfMass", "The center of mass of the brep", GH_ParamAccess.list);
            pManager.AddBrepParameter("NewBrep2", "NewBrep2", "NewBrep2", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // Brep b = null;
            // string F = "sin(x1)+cos(x2)+x3";
            //List<double> list1 = new List<double>();
            //List<double> list2 = new List<double>();
            //double angle = 90;
            Brep b1 = null;
            Brep b2 = null;
            List<double> list1 = new List<double>();
            List<double> list2 = new List<double>();
            DA.GetData(0, ref b1);
            DA.GetData(2, ref b2);
            DA.GetDataList(1, list1);
            DA.GetDataList(3, list2);
            int list1Count = list1.Count;
            int list2Count = list2.Count;
            if (list1Count != 3 && list2Count != 3)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Point1/Point2 must have three numbers");
                return;
            }
            b2.Translate(list1[0] - list2[0], list1[1] - list2[1], list1[2] - list2[2]);
            DA.SetData(0, b2);
        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.PointPointCoincident;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AED12263-F783-446C-BD5C-9E4D8A2F8A98");
    }

    public class FaceFaceParallel : GH_Component
    {
        /// <summary>
        /// Each implementation of GH_Component must provide a public 
        /// constructor without any arguments.
        /// Category represents the Tab in which the component will appear, 
        /// Subcategory the panel. If you use non-existing tab or panel names, 
        /// new tabs/panels will automatically be created.
        /// </summary>
        public FaceFaceParallel()
          : base("FaceFaceParallel", "FaceFaceParallel",
            "FaceFaceParallel",
            "SIM", "Assembly")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // Use the pManager object to register your input parameters.
            // You can often supply default values when creating parameters.
            // All parameters must have the correct access type. If you want 
            // to import lists or trees of values, modify the ParamAccess flag.
            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
            // pManager.AddNumberParameter("Parameter", "P", "Parameter for formula", GH_ParamAccess.list, new List<double>() { 1.5708, 0.5236, 3.0 });
            pManager.AddBrepParameter("Brep1", "Brep1", "Not rotate", GH_ParamAccess.item);
            pManager.AddNumberParameter("Face1", "Face1", "The referrence face normal of Brep1", GH_ParamAccess.list);
            pManager.AddBrepParameter("Brep1", "Brep2", "Rotate", GH_ParamAccess.item);
            pManager.AddNumberParameter("Face2", "Face2", "The referrence face normal of Brep2", GH_ParamAccess.list);
            pManager.AddNumberParameter("Flip", "Flip", "Flip the new brep2", GH_ParamAccess.item, 0);

            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

            // If you want to change properties of certain parameters, 
            // you can use the pManager instance to access them by index:
            //pManager[0].Optional = true;
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // Use the pManager object to register your output parameters.
            // Output parameters do not have default values, but they too must have the correct access type.
            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
            // pManager.AddNumberParameter("BrepCenterOfMass", "BrepCenterOfMass", "The center of mass of the brep", GH_ParamAccess.list);
            pManager.AddBrepParameter("NewBrep2", "NewBrep2", "NewBrep2", GH_ParamAccess.item);

            // Sometimes you want to hide a specific parameter from the Rhino preview.
            // You can use the HideParameter() method as a quick way:
            //pManager.HideParameter(0);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
        /// to store data in output parameters.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            // Brep b = null;
            // string F = "sin(x1)+cos(x2)+x3";
            //List<double> list1 = new List<double>();
            //List<double> list2 = new List<double>();
            //double angle = 90;
            Brep b1 = null;
            Brep b2 = null;
            List<double> list1 = new List<double>();
            List<double> list2 = new List<double>();
            double flip = 0;
            DA.GetData(0, ref b1);
            DA.GetData(2, ref b2);
            DA.GetDataList(1, list1);
            DA.GetDataList(3, list2);
            DA.GetData(4, ref flip);
            int list1Count = list1.Count;
            int list2Count = list2.Count;
            if (list1Count != 3 && list2Count != 3)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Face normal1/face normal2 must have three numbers");
                return;
            }
            if (flip != 0 && flip != 1)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Flip only has two options, 0 or 1");
                return;
            }
            double angle = Math.Acos(Vector3.Dot(new Vector3((float)list1[0], (float)list1[1], (float)list1[2]), 
                new Vector3((float)list2[0], (float)list2[1], (float)list2[2])));

            Vector3d axis = new Vector3d(list1[1] * list2[2] - list2[1] * list1[2], list1[2] * list2[0] - list2[2] * list1[0], list1[0] * list2[1] - list2[0] * list1[1]);
            Point3d center = b2.GetBoundingBox(true).Center;
            if (flip == 0)
            {
                b2.Rotate(angle, axis, center);
            }
            else if (flip == 1)
            {
                b2.Rotate(angle + Math.PI, axis, center);
            }
            DA.SetData(0, b2);
        }



        public class Vector3Dxxx

        {

            public double x { get; set; }

            public double y { get; set; }

            public double z { get; set; }

            public static Vector3Dxxx operator *(Vector3Dxxx lhs, Vector3Dxxx rhs)

            {

                Vector3Dxxx reVector3D = new Vector3Dxxx();

                reVector3D.x = lhs.x * rhs.x;

                reVector3D.y = lhs.y * rhs.y;

                reVector3D.z = lhs.z * rhs.z;

                return reVector3D;

            }

        }

        /// <summary>
        /// The Exposure property controls where in the panel a component icon 
        /// will appear. There are seven possible locations (primary to septenary), 
        /// each of which can be combined with the GH_Exposure.obscure flag, which 
        /// ensures the component will only be visible on panel dropdowns.
        /// </summary>
        public override GH_Exposure Exposure => GH_Exposure.primary;

        /// <summary>
        /// Provides an Icon for every component that will be visible in the User Interface.
        /// Icons need to be 24x24 pixels.
        /// You can add image files to your project resources and access them like this:
        /// return Resources.IconForThisComponent;
        /// </summary>
        // protected override System.Drawing.Bitmap Icon => null;
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return Properties.Resources.FaceFaceParallel;
            }
        }

        /// <summary>
        /// Each component must have a unique Guid to identify it. 
        /// It is vital this Guid doesn't change otherwise old ghx files 
        /// that use the old ID will partially fail during loading.
        /// </summary>
        public override Guid ComponentGuid => new Guid("AED12263-F789-446C-BD5C-9E4D8A2F8A98");
    }

//    public class I_shapedsteel : GH_Component
//    {
//        /// <summary>
//        /// Each implementation of GH_Component must provide a public 
//        /// constructor without any arguments.
//        /// Category represents the Tab in which the component will appear, 
//        /// Subcategory the panel. If you use non-existing tab or panel names, 
//        /// new tabs/panels will automatically be created.
//        /// </summary>
//        public I_shapedsteel()
//          : base("I-shapedsteel", "I-shapedsteel",
//            "I-shapedsteel",
//            "GIM", "Primitive")
//        {
//        }

//        /// <summary>
//        /// Registers all the input parameters for this component.
//        /// </summary>
//        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
//        {
//            // Use the pManager object to register your input parameters.
//            // You can often supply default values when creating parameters.
//            // All parameters must have the correct access type. If you want 
//            // to import lists or trees of values, modify the ParamAccess flag.
//            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
//            pManager.AddNumberParameter("B", "B", "B", GH_ParamAccess.item, 100.0);
//            pManager.AddNumberParameter("H", "H", "H", GH_ParamAccess.item, 100.0);
//            pManager.AddNumberParameter("D", "D", "D", GH_ParamAccess.item, 15.0);
//            pManager.AddNumberParameter("T", "T", "T", GH_ParamAccess.item, 15.0);
//            pManager.AddNumberParameter("L", "L", "L", GH_ParamAccess.item, 1000.0);
//            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
//            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

//            // If you want to change properties of certain parameters, 
//            // you can use the pManager instance to access them by index:
//            //pManager[0].Optional = true;
//        }

//        /// <summary>
//        /// Registers all the output parameters for this component.
//        /// </summary>
//        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
//        {
//            // Use the pManager object to register your output parameters.
//            // Output parameters do not have default values, but they too must have the correct access type.
//            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
//            pManager.AddBrepParameter("I-shapedsteel", "I-shapedsteel", "I-shapedsteel", GH_ParamAccess.item);
//            pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.item);
//            pManager.AddTextParameter("MOD", "MOD", "MOD", GH_ParamAccess.item);

//            // Sometimes you want to hide a specific parameter from the Rhino preview.
//            // You can use the HideParameter() method as a quick way:
//            //pManager.HideParameter(0);
//        }

//        /// <summary>
//        /// This is the method that actually does the work.
//        /// </summary>
//        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
//        /// to store data in output parameters.</param>
//        protected override void SolveInstance(IGH_DataAccess DA)
//        {
//            // First, we need to retrieve all data from the input parameters.
//            // We'll start by declaring variables and assigning them starting values.
//            // Plane plane = Plane.WorldXY;
//            // double radius0 = 0.0;
//            // double radius1 = 0.0;
//            // int turns = 0;
//            double B = 100.0;
//            double H = 100.0;
//            double D = 15.0;
//            double T = 15.0;
//            double L = 1000.0;

//            // Then we need to access the input parameters individually. 
//            // When data cannot be extracted from a parameter, we should abort this method.
//            // if (!DA.GetData(0, ref plane)) return;
//            // if (!DA.GetData(1, ref radius0)) return;
//            // if (!DA.GetData(2, ref radius1)) return;
//            // if (!DA.GetData(3, ref turns)) return;
//            if (!DA.GetData(0, ref B)) return;
//            if (!DA.GetData(1, ref H)) return;
//            if (!DA.GetData(2, ref D)) return;
//            if (!DA.GetData(3, ref T)) return;
//            if (!DA.GetData(4, ref L)) return;

//            // We should now validate the data and warn the user if invalid data is supplied.
//            // if (radius0 < 0.0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
//            //     return;
//            // }
//            // if (radius1 <= radius0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
//            //     return;
//            // }
//            // if (turns <= 0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
//            //     return;
//            // }
//            if (B <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "B must be bigger than zero");
//                return;
//            }
//            if (H <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "H must be bigger than zero");
//                return;
//            }
//            if (D <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "D must be bigger than zero");
//                return;
//            }
//            if (T <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "T must be bigger than zero");
//                return;
//            }
//            if (L <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "L must be bigger than zero");
//                return;
//            }

//            List<Point3d> myArray = new List<Point3d>() { 
//            new Point3d(0, -B/2, 0), 
//            new Point3d(0, -B/2, T),
//            new Point3d(0, -D/2, T),
//            new Point3d(0, -D/2, H-T),
//            new Point3d(0, -B/2, H-T),
//            new Point3d(0, -B/2, H),
//            new Point3d(0, B/2, H),
//            new Point3d(0, B/2, H-T),
//            new Point3d(0, D/2, H-T),
//            new Point3d(0, D/2, T),
//            new Point3d(0, B/2, T),
//            new Point3d(0, B/2, 0),
//            new Point3d(0, -B/2, 0)};
//            Vector3d Normal = new Vector3d(1, 0, 0);

//            Curve SurfaceCurve = Curve.CreateInterpolatedCurve(myArray, 1);//底面轮廓线

//            Vector3d myV = Normal;
//            double Vlength = myV.Length;
//            Vector3d unitV = new Vector3d(myV[0] / Vlength, myV[1] / Vlength, myV[2] / Vlength);//单位拉升向量
//            Vector3d LV = new Vector3d(L * unitV[0], L * unitV[1], L * unitV[2]);
//            //Curve LV = new Line(new Point3d(0,0,0),new Point3d(L * unitV[0], L * unitV[1], L * unitV[2])).ToNurbsCurve();

//            //SweepOneRail mySweep = new SweepOneRail();
//            //Brep B = Brep.CreateFromSweep(LV, SurfaceCurve, true, 0.001)[0];

//            Surface mySurface = Surface.CreateExtrusion(SurfaceCurve, LV);

//            Brep B1 = Brep.CreateFromSurface(mySurface);
//            Brep steel = B1.CapPlanarHoles(0.0001);
//            //List<Brep> LB = new List<Brep>(); LB.Add(B);
//            //Brep solid_B = Brep.CreateSolid(LB, 0.001)[0];
//            DA.SetData(0, steel);

//            string mod = @"<?xml version=""1.0"" encoding=""utf - 8\""?>
//<Device>
//    <Entities>
//        <Entity ID = ""1"" Type = ""simple"" Visible = ""True"">
//            <######/>
//            <TransformMatrix Value = ""1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1""/>
//            <Color R = ""255"" G = ""255"" B = ""255"" A = ""0""/>
//        </Entity>
//    </Entities>
//</Device>";

//            string MODdata = string.Format(@"I-shapedsteel B = ""{0}"" H = ""{1}"" D = ""{2}"" T = ""{3}"" L = ""{4}""", B, H, D, T, L);
//            mod = mod.Replace("######", MODdata);
//            // string guid = Guid.NewGuid().ToString();
//            // Params.Output[0].Description = "MODType";
//            DA.SetData(1, InstanceGuid.ToString()+".mod");
//            FileStream fs = new FileStream("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/MOD/" + InstanceGuid.ToString() + ".mod", FileMode.Create, FileAccess.ReadWrite);
//            StreamWriter sw = new StreamWriter(fs);
//            sw.WriteLine(mod);
//            sw.Flush();
//            sw.Close();
//            fs.Close();

//            DA.SetData(2, mod);
//        }

//        /// <summary>
//        /// The Exposure property controls where in the panel a component icon 
//        /// will appear. There are seven possible locations (primary to septenary), 
//        /// each of which can be combined with the GH_Exposure.obscure flag, which 
//        /// ensures the component will only be visible on panel dropdowns.
//        /// </summary>
//        public override GH_Exposure Exposure => GH_Exposure.primary;

//        /// <summary>
//        /// Provides an Icon for every component that will be visible in the User Interface.
//        /// Icons need to be 24x24 pixels.
//        /// You can add image files to your project resources and access them like this:
//        /// return Resources.IconForThisComponent;
//        /// </summary>
//        // protected override System.Drawing.Bitmap Icon => null;
//        protected override System.Drawing.Bitmap Icon
//        {
//            get
//            {
//                return Properties.Resources.I_shapedsteel;
//            }
//        }

//        /// <summary>
//        /// Each component must have a unique Guid to identify it. 
//        /// It is vital this Guid doesn't change otherwise old ghx files 
//        /// that use the old ID will partially fail during loading.
//        /// </summary>
//        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BB5C-9E458A2FC788");
//    }

//    public class ChannelSteel : GH_Component
//    {
//        /// <summary>
//        /// Each implementation of GH_Component must provide a public 
//        /// constructor without any arguments.
//        /// Category represents the Tab in which the component will appear, 
//        /// Subcategory the panel. If you use non-existing tab or panel names, 
//        /// new tabs/panels will automatically be created.
//        /// </summary>
//        public ChannelSteel()
//          : base("ChannelSteel", "ChannelSteel",
//            "ChannelSteel",
//            "GIM", "Primitive")
//        {
//        }

//        /// <summary>
//        /// Registers all the input parameters for this component.
//        /// </summary>
//        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
//        {
//            // Use the pManager object to register your input parameters.
//            // You can often supply default values when creating parameters.
//            // All parameters must have the correct access type. If you want 
//            // to import lists or trees of values, modify the ParamAccess flag.
//            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
//            pManager.AddNumberParameter("B", "B", "B", GH_ParamAccess.item, 100.0);
//            pManager.AddNumberParameter("H", "H", "H", GH_ParamAccess.item, 100.0);
//            pManager.AddNumberParameter("D", "D", "D", GH_ParamAccess.item, 15.0);
//            pManager.AddNumberParameter("T", "T", "T", GH_ParamAccess.item, 15.0);
//            pManager.AddNumberParameter("L", "L", "L", GH_ParamAccess.item, 1000.0);
//            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
//            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

//            // If you want to change properties of certain parameters, 
//            // you can use the pManager instance to access them by index:
//            //pManager[0].Optional = true;
//        }

//        /// <summary>
//        /// Registers all the output parameters for this component.
//        /// </summary>
//        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
//        {
//            // Use the pManager object to register your output parameters.
//            // Output parameters do not have default values, but they too must have the correct access type.
//            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
//            pManager.AddBrepParameter("ChannelSteel", "ChannelSteel", "ChannelSteel", GH_ParamAccess.item);
//            pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.item);
//            pManager.AddTextParameter("MOD", "MOD", "MOD", GH_ParamAccess.item);

//            // Sometimes you want to hide a specific parameter from the Rhino preview.
//            // You can use the HideParameter() method as a quick way:
//            //pManager.HideParameter(0);
//        }

//        /// <summary>
//        /// This is the method that actually does the work.
//        /// </summary>
//        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
//        /// to store data in output parameters.</param>
//        protected override void SolveInstance(IGH_DataAccess DA)
//        {
//            // First, we need to retrieve all data from the input parameters.
//            // We'll start by declaring variables and assigning them starting values.
//            // Plane plane = Plane.WorldXY;
//            // double radius0 = 0.0;
//            // double radius1 = 0.0;
//            // int turns = 0;
//            double B = 100.0;
//            double H = 100.0;
//            double D = 15.0;
//            double T = 15.0;
//            double L = 1000.0;

//            // Then we need to access the input parameters individually. 
//            // When data cannot be extracted from a parameter, we should abort this method.
//            // if (!DA.GetData(0, ref plane)) return;
//            // if (!DA.GetData(1, ref radius0)) return;
//            // if (!DA.GetData(2, ref radius1)) return;
//            // if (!DA.GetData(3, ref turns)) return;
//            if (!DA.GetData(0, ref B)) return;
//            if (!DA.GetData(1, ref H)) return;
//            if (!DA.GetData(2, ref D)) return;
//            if (!DA.GetData(3, ref T)) return;
//            if (!DA.GetData(4, ref L)) return;

//            // We should now validate the data and warn the user if invalid data is supplied.
//            // if (radius0 < 0.0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
//            //     return;
//            // }
//            // if (radius1 <= radius0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
//            //     return;
//            // }
//            // if (turns <= 0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
//            //     return;
//            // }
//            if (B <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "B must be bigger than zero");
//                return;
//            }
//            if (H <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "H must be bigger than zero");
//                return;
//            }
//            if (D <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "D must be bigger than zero");
//                return;
//            }
//            if (T <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "T must be bigger than zero");
//                return;
//            }
//            if (L <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "L must be bigger than zero");
//                return;
//            }

//            List<Point3d> myArray = new List<Point3d>() {
//            new Point3d(0, 0, H/2),
//            new Point3d(0, -B, H/2),
//            new Point3d(0, -B, H/2-T),
//            new Point3d(0, -D, H/2-T),
//            new Point3d(0, -D, T-H/2),
//            new Point3d(0, -B, T-H/2),
//            new Point3d(0, -B, -H/2),
//            new Point3d(0, 0, -H/2),
//            new Point3d(0, 0, H/2)};
//            Vector3d Normal = new Vector3d(1, 0, 0);

//            Curve SurfaceCurve = Curve.CreateInterpolatedCurve(myArray, 1);//底面轮廓线

//            Vector3d myV = Normal;
//            double Vlength = myV.Length;
//            Vector3d unitV = new Vector3d(myV[0] / Vlength, myV[1] / Vlength, myV[2] / Vlength);//单位拉升向量
//            Vector3d LV = new Vector3d(L * unitV[0], L * unitV[1], L * unitV[2]);
//            //Curve LV = new Line(new Point3d(0,0,0),new Point3d(L * unitV[0], L * unitV[1], L * unitV[2])).ToNurbsCurve();

//            //SweepOneRail mySweep = new SweepOneRail();
//            //Brep B = Brep.CreateFromSweep(LV, SurfaceCurve, true, 0.001)[0];

//            Surface mySurface = Surface.CreateExtrusion(SurfaceCurve, LV);

//            Brep B1 = Brep.CreateFromSurface(mySurface);
//            Brep steel = B1.CapPlanarHoles(0.0001);
//            //List<Brep> LB = new List<Brep>(); LB.Add(B);
//            //Brep solid_B = Brep.CreateSolid(LB, 0.001)[0];
//            DA.SetData(0, steel);

//            string mod = @"<?xml version=""1.0"" encoding=""utf - 8\""?>
//<Device>
//    <Entities>
//        <Entity ID = ""1"" Type = ""simple"" Visible = ""True"">
//            <######/>
//            <TransformMatrix Value = ""1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1""/>
//            <Color R = ""255"" G = ""255"" B = ""255"" A = ""0""/>
//        </Entity>
//    </Entities>
//</Device>";

//            string MODdata = string.Format(@"ChannelSteel B = ""{0}"" H = ""{1}"" D = ""{2}"" T = ""{3}"" L = ""{4}""", B, H, D, T, L);
//            mod = mod.Replace("######", MODdata);
//            //string guid = Guid.NewGuid().ToString();
//            // Params.Output[0].Description = "MODType";
//            DA.SetData(1, InstanceGuid.ToString() + ".mod");
//            FileStream fs = new FileStream("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/MOD/" + InstanceGuid.ToString() + ".mod", FileMode.Create, FileAccess.ReadWrite);
//            StreamWriter sw = new StreamWriter(fs);
//            sw.WriteLine(mod);
//            sw.Close();
//            fs.Close();

//            DA.SetData(2, mod);
//        }

//        /// <summary>
//        /// The Exposure property controls where in the panel a component icon 
//        /// will appear. There are seven possible locations (primary to septenary), 
//        /// each of which can be combined with the GH_Exposure.obscure flag, which 
//        /// ensures the component will only be visible on panel dropdowns.
//        /// </summary>
//        public override GH_Exposure Exposure => GH_Exposure.primary;

//        /// <summary>
//        /// Provides an Icon for every component that will be visible in the User Interface.
//        /// Icons need to be 24x24 pixels.
//        /// You can add image files to your project resources and access them like this:
//        /// return Resources.IconForThisComponent;
//        /// </summary>
//        // protected override System.Drawing.Bitmap Icon => null;
//        protected override System.Drawing.Bitmap Icon
//        {
//            get
//            {
//                return Properties.Resources.ChannelSteel;
//            }
//        }

//        /// <summary>
//        /// Each component must have a unique Guid to identify it. 
//        /// It is vital this Guid doesn't change otherwise old ghx files 
//        /// that use the old ID will partially fail during loading.
//        /// </summary>
//        public override Guid ComponentGuid => new Guid("A6A12263-F783-446C-BD5C-9E458A2FC788");
//    }

//    public class Cuboid : GH_Component
//    {
//        /// <summary>
//        /// Each implementation of GH_Component must provide a public 
//        /// constructor without any arguments.
//        /// Category represents the Tab in which the component will appear, 
//        /// Subcategory the panel. If you use non-existing tab or panel names, 
//        /// new tabs/panels will automatically be created.
//        /// </summary>
//        public Cuboid()
//          : base("Cuboid", "Cuboid",
//            "Cuboid",
//            "GIM", "Primitive")
//        {
//        }

//        /// <summary>
//        /// Registers all the input parameters for this component.
//        /// </summary>
//        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
//        {
//            // Use the pManager object to register your input parameters.
//            // You can often supply default values when creating parameters.
//            // All parameters must have the correct access type. If you want 
//            // to import lists or trees of values, modify the ParamAccess flag.
//            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
//            pManager.AddNumberParameter("L", "L", "L", GH_ParamAccess.item, 400.0);
//            pManager.AddNumberParameter("W", "W", "W", GH_ParamAccess.item, 300.0);
//            pManager.AddNumberParameter("H", "H", "H", GH_ParamAccess.item, 200.0);
//            // pManager.AddNumberParameter("Outer Radius", "R1", "Outer radius for spiral", GH_ParamAccess.item, 10.0);
//            // pManager.AddIntegerParameter("Turns", "T", "Number of turns between radii", GH_ParamAccess.item, 10);

//            // If you want to change properties of certain parameters, 
//            // you can use the pManager instance to access them by index:
//            //pManager[0].Optional = true;
//        }

//        /// <summary>
//        /// Registers all the output parameters for this component.
//        /// </summary>
//        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
//        {
//            // Use the pManager object to register your output parameters.
//            // Output parameters do not have default values, but they too must have the correct access type.
//            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
//            pManager.AddBrepParameter("Cuboid", "Cuboid", "Cuboid", GH_ParamAccess.item);
//            pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.item);
//            pManager.AddTextParameter("MOD", "MOD", "MOD", GH_ParamAccess.item);

//            // Sometimes you want to hide a specific parameter from the Rhino preview.
//            // You can use the HideParameter() method as a quick way:
//            //pManager.HideParameter(0);
//        }

//        /// <summary>
//        /// This is the method that actually does the work.
//        /// </summary>
//        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
//        /// to store data in output parameters.</param>
//        protected override void SolveInstance(IGH_DataAccess DA)
//        {
//            // First, we need to retrieve all data from the input parameters.
//            // We'll start by declaring variables and assigning them starting values.
//            // Plane plane = Plane.WorldXY;
//            // double radius0 = 0.0;
//            // double radius1 = 0.0;
//            // int turns = 0;
//            double L = 400.0;
//            double W = 300.0;
//            double H = 200.0;

//            // Then we need to access the input parameters individually. 
//            // When data cannot be extracted from a parameter, we should abort this method.
//            // if (!DA.GetData(0, ref plane)) return;
//            // if (!DA.GetData(1, ref radius0)) return;
//            // if (!DA.GetData(2, ref radius1)) return;
//            // if (!DA.GetData(3, ref turns)) return;
//            if (!DA.GetData(0, ref L)) return;
//            if (!DA.GetData(1, ref W)) return;
//            if (!DA.GetData(2, ref H)) return;

//            // We should now validate the data and warn the user if invalid data is supplied.
//            // if (radius0 < 0.0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Inner radius must be bigger than or equal to zero");
//            //     return;
//            // }
//            // if (radius1 <= radius0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Outer radius must be bigger than the inner radius");
//            //     return;
//            // }
//            // if (turns <= 0)
//            // {
//            //     AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Spiral turn count must be bigger than or equal to one");
//            //     return;
//            // }
//            if (L <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "L must be bigger than zero");
//                return;
//            }
//            if (W <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "W must be bigger than zero");
//                return;
//            }
//            if (H <= 0)
//            {
//                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "H must be bigger than zero");
//                return;
//            }

//            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, 
//            // The actual functionality will be in a different method:
//            // Curve spiral = CreateSpiral(plane, radius0, radius1, turns);
//            Brep box = CreateBox(L, W, H);


//            // Finally assign the spiral to the output parameter.
//            // DA.SetData(0, spiral);
//            DA.SetData(0, box);

//            string mod = @"<?xml version=""1.0"" encoding=""utf - 8\""?>
//<Device>
//    <Entities>
//        <Entity ID = ""1"" Type = ""simple"" Visible = ""True"">                                                                                                                                                              
//            <######/>
//            <TransformMatrix Value = ""1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1""/>
//            <Color R = ""255"" G = ""255"" B = ""255"" A = ""0""/>
//        </Entity>
//    </Entities>
//</Device>";

//            string MODdata = string.Format(@"Cuboid L = ""{0}"" W = ""{1}"" H = ""{2}""", L, W, H);
//            mod = mod.Replace("######", MODdata);
//            //string guid = Guid.NewGuid().ToString();
//            //Params.Output[0].Description = "MODType";
//            DA.SetData(1, InstanceGuid.ToString() + ".mod");
//            FileStream fs = new FileStream("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/MOD/" + InstanceGuid.ToString() + ".mod", FileMode.Create, FileAccess.ReadWrite);
//            StreamWriter sw = new StreamWriter(fs);
//            sw.WriteLine(mod);
//            sw.Close();
//            fs.Close();

//            DA.SetData(2, mod);
//        }

//        // Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)
//        // {
//        //     Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);
//        //     Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);

//        //     Point3d[] p0;
//        //     Point3d[] p1;

//        //     l0.ToNurbsCurve().DivideByCount(turns, true, out p0);
//        //     l1.ToNurbsCurve().DivideByCount(turns, true, out p1);

//        //     PolyCurve spiral = new PolyCurve();

//        //     for (int i = 0; i < p0.Length - 1; i++)
//        //     {
//        //         Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);
//        //         Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);

//        //         spiral.Append(arc0);
//        //         spiral.Append(arc1);
//        //     }

//        //     return spiral;
//        // }

//        Brep CreateBox(double L, double W, double H)
//        {
//            Point3d pt0 = new Point3d(-L / 2, -W / 2, 0);
//            Point3d pt1 = new Point3d(L / 2, W / 2, H);
//            BoundingBox bounding = new BoundingBox(pt0, pt1);
//            Brep box = bounding.ToBrep();

//            return box;
//        }

//        /// <summary>
//        /// The Exposure property controls where in the panel a component icon 
//        /// will appear. There are seven possible locations (primary to septenary), 
//        /// each of which can be combined with the GH_Exposure.obscure flag, which 
//        /// ensures the component will only be visible on panel dropdowns.
//        /// </summary>
//        public override GH_Exposure Exposure => GH_Exposure.primary;

//        /// <summary>
//        /// Provides an Icon for every component that will be visible in the User Interface.
//        /// Icons need to be 24x24 pixels.
//        /// You can add image files to your project resources and access them like this:
//        /// return Resources.IconForThisComponent;
//        /// </summary>
//        // protected override System.Drawing.Bitmap Icon => null;
//        protected override System.Drawing.Bitmap Icon
//        {
//            get
//            {
//                return Properties.Resources.Cuboid;
//            }
//        }

//        /// <summary>
//        /// Each component must have a unique Guid to identify it. 
//        /// It is vital this Guid doesn't change otherwise old ghx files 
//        /// that use the old ID will partially fail during loading.
//        /// </summary>
//        public override Guid ComponentGuid => new Guid("D6A12263-F783-496C-BB5C-9E458A2F8788");
//    }
    //public class PHM : GH_Component
    //{
    //    /// <summary>
    //    /// Each implementation of GH_Component must provide a public 
    //    /// constructor without any arguments.
    //    /// Category represents the Tab in which the component will appear, 
    //    /// Subcategory the panel. If you use non-existing tab or panel names, 
    //    /// new tabs/panels will automatically be created.
    //    /// </summary>
    //    public PHM()
    //      : base("PHM", "PHM",
    //        "PHM",
    //        "GIM", "Folder")
    //    {
    //    }

    //    /// <summary>
    //    /// Registers all the input parameters for this component.
    //    /// </summary>
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        // Use the pManager object to register your input parameters.
    //        // You can often supply default values when creating parameters.
    //        // All parameters must have the correct access type. If you want 
    //        // to import lists or trees of values, modify the ParamAccess flag.
    //        // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
    //        pManager.AddBrepParameter("Brep", "Brep", "Brep", GH_ParamAccess.list);
    //        pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.list);
    //        pManager.AddTextParameter("TM", "TM", "TM", GH_ParamAccess.list);
    //    }

    //    /// <summary>
    //    /// Registers all the output parameters for this component.
    //    /// </summary>
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        // Use the pManager object to register your output parameters.
    //        // Output parameters do not have default values, but they too must have the correct access type.
    //        // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
    //        pManager.AddBrepParameter("Brep", "Brep", "Brep", GH_ParamAccess.list);
    //        pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.item);
    //        pManager.AddTextParameter("PHM", "PHM", "PHM", GH_ParamAccess.item);

    //        // Sometimes you want to hide a specific parameter from the Rhino preview.
    //        // You can use the HideParameter() method as a quick way:
    //        //pManager.HideParameter(0);
    //    }

    //    /// <summary>
    //    /// This is the method that actually does the work.
    //    /// </summary>
    //    /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
    //    /// to store data in output parameters.</param>
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        List<Brep> b = new List<Brep>() { };
    //        List<string> guid = new List<string>() { };
    //        List<string> trs = new List<string>() { };
    //        if (!DA.GetDataList(0, b)) return;
    //        if (!DA.GetDataList(1, guid)) return;
    //        if (!DA.GetDataList(2, trs)) return;

    //        if (b.Count != guid.Count && guid.Count != trs.Count)
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Brep/GUID/TM count is not equal");
    //            return;
    //        }

    //        List<Brep> b1 = new List<Brep>() { };
    //        for (int k = 0; k < b.Count; k++)
    //        {
    //            Transform unitTransform = new Transform();//默认矩阵为1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1
    //            double[] tr = trs[k].Split(',').Select(i => Convert.ToDouble(i)).ToArray();
    //            if (tr.Length != 16)
    //            {
    //                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "TM format is wrong");
    //                return;
    //            }
    //            unitTransform.M00 = tr[0];
    //            unitTransform.M01 = tr[1];
    //            unitTransform.M02 = tr[2];
    //            unitTransform.M03 = tr[3];
    //            unitTransform.M10 = tr[4];
    //            unitTransform.M11 = tr[5];
    //            unitTransform.M12 = tr[6];
    //            unitTransform.M13 = tr[7];
    //            unitTransform.M20 = tr[8];
    //            unitTransform.M21 = tr[9];
    //            unitTransform.M22 = tr[10];
    //            unitTransform.M23 = tr[11];
    //            unitTransform.M30 = tr[12];
    //            unitTransform.M31 = tr[13];
    //            unitTransform.M32 = tr[14];
    //            unitTransform.M33 = tr[15];
    //            unitTransform = unitTransform.Transpose();

    //            Brep temp = b[k];
    //            temp.Transform(unitTransform);
    //            b1.Add(temp);
    //        }
    //        //List<Brep> m = new List<Brep>() { };
    //        //List<string> p = new List<string>() { };
    //        //for(int k=0; k<trs.Count; k++)
    //        //{
    //        //    if (p.Contains(trs[k]))
    //        //    {
    //        //    }
    //        //    else
    //        //    {
    //        //        p.Add(trs[k]);
    //        //        m.Add(b1[k]);
    //        //    }
    //        //}
    //        ////b1 = b1.Distinct().ToList();
    //        //if (m.Count == 1)
    //        //{
    //        //    //DA.SetData(0, m[0]);
    //        //    DA.SetData(0, Brep.CreateBooleanUnion(m, 0.0001)[0]);
    //        //}
    //        //else
    //        //{
    //        //    DA.SetData(0, Brep.CreateBooleanUnion(m, 0.0001)[0]);
    //        //}
    //        DA.SetDataList(0, b1);

    //        string phm = "SOLIDMODELS.NUM=" + b.Count + "\n";
    //        for (int k = 0; k < b.Count; k++)
    //        {
    //            if (guid[k].EndsWith(".mod") || guid[k].EndsWith(".phm"))
    //            {
    //                phm = phm + "SOLIDMODEL" + k + "=" + guid[k] + "\n";
    //                phm = phm + "TRANSFORMMATRIX" + k + "=" + trs[k] + "\n";
    //                phm = phm + "COLOR" + k +"=255,255,255\n";
    //            }
    //            else
    //            {
    //                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "The source of PHM component should be MOD or PHM");
    //                return;
    //            }
    //        }
    //        //phm = phm.Replace("######", Params.Input[0].Sources[0].InstanceGuid + ".mod");
    //        //string guid = Guid.NewGuid().ToString();
    //        //Params.Output[0].Description = "PHMType";
    //        DA.SetData(1, InstanceGuid.ToString() + ".phm");
    //        FileStream fs = new FileStream("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/PHM/" + InstanceGuid.ToString() + ".phm", FileMode.Create, FileAccess.ReadWrite);
    //        StreamWriter sw = new StreamWriter(fs);
    //        sw.WriteLine(phm);
    //        sw.Close();
    //        fs.Close();

    //        DA.SetData(2, phm);
    //    }

    //    /// <summary>
    //    /// The Exposure property controls where in the panel a component icon 
    //    /// will appear. There are seven possible locations (primary to septenary), 
    //    /// each of which can be combined with the GH_Exposure.obscure flag, which 
    //    /// ensures the component will only be visible on panel dropdowns.
    //    /// </summary>
    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    /// <summary>
    //    /// Provides an Icon for every component that will be visible in the User Interface.
    //    /// Icons need to be 24x24 pixels.
    //    /// You can add image files to your project resources and access them like this:
    //    /// return Resources.IconForThisComponent;
    //    /// </summary>
    //    // protected override System.Drawing.Bitmap Icon => null;
    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.PHM;
    //        }
    //    }

    //    /// <summary>
    //    /// Each component must have a unique Guid to identify it. 
    //    /// It is vital this Guid doesn't change otherwise old ghx files 
    //    /// that use the old ID will partially fail during loading.
    //    /// </summary>
    //    public override Guid ComponentGuid => new Guid("D6A12263-F783-496D-BB5C-9E458A2F8788");
    //}

    //public class Clear : GH_Component
    //{
    //    /// <summary>
    //    /// Each implementation of GH_Component must provide a public 
    //    /// constructor without any arguments.
    //    /// Category represents the Tab in which the component will appear, 
    //    /// Subcategory the panel. If you use non-existing tab or panel names, 
    //    /// new tabs/panels will automatically be created.
    //    /// </summary>
    //    public Clear()
    //      : base("Clear", "Clear",
    //        "Clear",
    //        "GIM", "Folder")
    //    {
    //    }

    //    /// <summary>
    //    /// Registers all the input parameters for this component.
    //    /// </summary>
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        // Use the pManager object to register your input parameters.
    //        // You can often supply default values when creating parameters.
    //        // All parameters must have the correct access type. If you want 
    //        // to import lists or trees of values, modify the ParamAccess flag.
    //        // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
    //        pManager.AddBooleanParameter("Clear", "Clear", "Clear", GH_ParamAccess.item, false);
    //    }

    //    /// <summary>
    //    /// Registers all the output parameters for this component.
    //    /// </summary>
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //    }

    //    /// <summary>
    //    /// This is the method that actually does the work.
    //    /// </summary>
    //    /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
    //    /// to store data in output parameters.</param>
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        bool b = false;
    //        DA.GetData(0, ref b);

    //        if(!b)
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Choose True to clear GIM folder");
    //            return;
    //        }
    //        DelectDir("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/PHM");
    //        DelectDir("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/MOD");
    //        DelectDir("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/DEV");
    //        DelectDir("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/CBM");
    //    }

    //    public static void DelectDir(string srcPath)
    //    {
    //        try
    //        {
    //            DirectoryInfo dir = new DirectoryInfo(srcPath);
    //            FileSystemInfo[] fileinfo = dir.GetFileSystemInfos();  //返回目录中所有文件和子目录
    //            foreach (FileSystemInfo i in fileinfo)
    //            {
    //                if (i is DirectoryInfo)            //判断是否文件夹
    //                {
    //                    DirectoryInfo subdir = new DirectoryInfo(i.FullName);
    //                    subdir.Delete(true);          //删除子目录和文件
    //                }
    //                else
    //                {
    //                    File.Delete(i.FullName);      //删除指定文件
    //                }
    //            }
    //        }
    //        catch (Exception e)
    //        {
    //            throw;
    //        }
    //    }

    //    /// <summary>
    //    /// The Exposure property controls where in the panel a component icon 
    //    /// will appear. There are seven possible locations (primary to septenary), 
    //    /// each of which can be combined with the GH_Exposure.obscure flag, which 
    //    /// ensures the component will only be visible on panel dropdowns.
    //    /// </summary>
    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    /// <summary>
    //    /// Provides an Icon for every component that will be visible in the User Interface.
    //    /// Icons need to be 24x24 pixels.
    //    /// You can add image files to your project resources and access them like this:
    //    /// return Resources.IconForThisComponent;
    //    /// </summary>
    //    // protected override System.Drawing.Bitmap Icon => null;
    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.Clear;
    //        }
    //    }

    //    /// <summary>
    //    /// Each component must have a unique Guid to identify it. 
    //    /// It is vital this Guid doesn't change otherwise old ghx files 
    //    /// that use the old ID will partially fail during loading.
    //    /// </summary>
    //    public override Guid ComponentGuid => new Guid("D6A12293-F783-496D-BB5C-9A458A2F8788");
    //}

    //public class DEV : GH_Component
    //{
    //    /// <summary>
    //    /// Each implementation of GH_Component must provide a public 
    //    /// constructor without any arguments.
    //    /// Category represents the Tab in which the component will appear, 
    //    /// Subcategory the panel. If you use non-existing tab or panel names, 
    //    /// new tabs/panels will automatically be created.
    //    /// </summary>
    //    public DEV()
    //      : base("DEV", "DEV",
    //        "DEV",
    //        "GIM", "Folder")
    //    {
    //    }

    //    /// <summary>
    //    /// Registers all the input parameters for this component.
    //    /// </summary>
    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        // Use the pManager object to register your input parameters.
    //        // You can often supply default values when creating parameters.
    //        // All parameters must have the correct access type. If you want 
    //        // to import lists or trees of values, modify the ParamAccess flag.
    //        // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
    //        pManager.AddBrepParameter("Brep", "Brep", "Brep", GH_ParamAccess.list);
    //        pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.list);
    //        pManager.AddTextParameter("TM", "TM", "TM", GH_ParamAccess.list, new List<string>() { "1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1" });
    //    }

    //    /// <summary>
    //    /// Registers all the output parameters for this component.
    //    /// </summary>
    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        // Use the pManager object to register your output parameters.
    //        // Output parameters do not have default values, but they too must have the correct access type.
    //        // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
    //        pManager.AddBrepParameter("Brep", "Brep", "Brep", GH_ParamAccess.list);
    //        pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.item);
    //        pManager.AddTextParameter("DEV", "DEV", "DEV", GH_ParamAccess.item);

    //        // Sometimes you want to hide a specific parameter from the Rhino preview.
    //        // You can use the HideParameter() method as a quick way:
    //        //pManager.HideParameter(0);
    //    }

    //    /// <summary>
    //    /// This is the method that actually does the work.
    //    /// </summary>
    //    /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
    //    /// to store data in output parameters.</param>
    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        List<Brep> b = new List<Brep>() { };
    //        List<string> guid = new List<string>() { };
    //        List<string> trs = new List<string>() { "1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1" };
    //        if (!DA.GetDataList(0, b)) return;
    //        if (!DA.GetDataList(1, guid)) return;
    //        if (!DA.GetDataList(2, trs)) return;

    //        if (b.Count != guid.Count && guid.Count != trs.Count)
    //        {
    //            AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "Brep/GUID/TM count is not equal");
    //            return;
    //        }

    //        List<Brep> b1 = new List<Brep>() { };
    //        for (int k = 0; k < b.Count; k++)
    //        {
    //            Transform unitTransform = new Transform();//默认矩阵为1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1
    //            double[] tr = trs[k].Split(',').Select(i => Convert.ToDouble(i)).ToArray();
    //            if (tr.Length != 16)
    //            {
    //                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "TM format is wrong");
    //                return;
    //            }
    //            unitTransform.M00 = tr[0];
    //            unitTransform.M01 = tr[1];
    //            unitTransform.M02 = tr[2];
    //            unitTransform.M03 = tr[3];
    //            unitTransform.M10 = tr[4];
    //            unitTransform.M11 = tr[5];
    //            unitTransform.M12 = tr[6];
    //            unitTransform.M13 = tr[7];
    //            unitTransform.M20 = tr[8];
    //            unitTransform.M21 = tr[9];
    //            unitTransform.M22 = tr[10];
    //            unitTransform.M23 = tr[11];
    //            unitTransform.M30 = tr[12];
    //            unitTransform.M31 = tr[13];
    //            unitTransform.M32 = tr[14];
    //            unitTransform.M33 = tr[15];
    //            unitTransform = unitTransform.Transpose();

    //            b[k].Transform(unitTransform);
    //            b1.Add(b[k]);
    //        }
    //        //b1 = b1.Distinct().ToList();
    //        //if (b1.Count == 1)
    //        //{
    //        //    DA.SetData(0, b1[0]);
    //        //}
    //        //else
    //        //{
    //        //    DA.SetData(0, Brep.CreateBooleanUnion(b1, 0.0001)[0]);
    //        //}
    //        DA.SetDataList(0, b1);
    //        string dev = "BASEFAMILYPOINTER=\nSYMBOLNAME=\nTYPE=OTHERS\nSUBDEVICES.NUM=0\n";
    //        dev = dev +"SOLIDMODELS.NUM=" + b.Count + "\n";
    //        for (int k = 0; k < b.Count; k++)
    //        {
    //            if (guid[k].EndsWith(".phm") || guid[k].EndsWith(".dev"))
    //            {
    //                dev = dev + "SOLIDMODEL" + k + "=" + guid[k] + "\n";
    //                dev = dev + "TRANSFORMMATRIX" + k + "=" + trs[k] + "\n";
    //            }
    //            else
    //            {
    //                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, "The source of DEV component should be PHM or DEV");
    //                return;
    //            }
    //        }
    //        //phm = phm.Replace("######", Params.Input[0].Sources[0].InstanceGuid + ".mod");
    //        //string guid = Guid.NewGuid().ToString();
    //        //Params.Output[0].Description = "PHMType";
    //        DA.SetData(1, InstanceGuid.ToString() + ".dev");
    //        FileStream fs = new FileStream("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/DEV/" + InstanceGuid.ToString() + ".dev", FileMode.Create, FileAccess.ReadWrite);
    //        StreamWriter sw = new StreamWriter(fs);
    //        sw.WriteLine(dev);
    //        sw.Close();
    //        fs.Close();

    //        DA.SetData(2, dev);
    //    }

    //    /// <summary>
    //    /// The Exposure property controls where in the panel a component icon 
    //    /// will appear. There are seven possible locations (primary to septenary), 
    //    /// each of which can be combined with the GH_Exposure.obscure flag, which 
    //    /// ensures the component will only be visible on panel dropdowns.
    //    /// </summary>
    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    /// <summary>
    //    /// Provides an Icon for every component that will be visible in the User Interface.
    //    /// Icons need to be 24x24 pixels.
    //    /// You can add image files to your project resources and access them like this:
    //    /// return Resources.IconForThisComponent;
    //    /// </summary>
    //    // protected override System.Drawing.Bitmap Icon => null;
    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.DEV;
    //        }
    //    }

    //    /// <summary>
    //    /// Each component must have a unique Guid to identify it. 
    //    /// It is vital this Guid doesn't change otherwise old ghx files 
    //    /// that use the old ID will partially fail during loading.
    //    /// </summary>
    //    public override Guid ComponentGuid => new Guid("D6A12263-F783-496D-B25C-9E458A2F8788");
    //}


    // 2022.9.13
    //public class ImportSTP : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public ImportSTP() : base(name, name, "", "SIM", "File")
    //    {
    //    }

    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddBooleanParameter("", "Import", "", GH_ParamAccess.item);
    //        pManager.AddTextParameter("", "Path", "", GH_ParamAccess.item);
    //    }

    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddBooleanParameter("", "Success", "", GH_ParamAccess.item);
    //    }

    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        bool Import = false;
    //        string path = "";
    //        DA.GetData(0, ref Import);
    //        DA.GetData(1, ref path);
    //        if (Import && File.Exists(path))
    //        {
    //            Rhino.RhinoDoc.ActiveDoc.Import(path);
    //            DA.SetData(0, true);
    //        }
    //        else
    //        {
    //            DA.SetData(0, false);
    //        }
    //    }

    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.ImportSTP;
    //        }
    //    }

    //    public override Guid ComponentGuid => new Guid("D6A12263-F783-496D-BD5C-9E458C5F8788");
    //}


    // 2022.9.14
    //public class ExportSAT : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;
    //    public ExportSAT() : base(name, name, "", "SIM", "File")
    //    {
    //    }

    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddBooleanParameter("", "Export", "", GH_ParamAccess.item);
    //        pManager.AddBrepParameter("", "Breps", "", GH_ParamAccess.list);
    //        pManager.AddTextParameter("", "Path", "", GH_ParamAccess.item);
    //    }

    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddBooleanParameter("", "Success", "", GH_ParamAccess.item);
    //    }

    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        bool Export = false;
    //        List<Brep> Breps = new List<Brep>();
    //        string path = "";
    //        DA.GetData(0, ref Export);
    //        DA.GetDataList(1, Breps);
    //        DA.GetData(2, ref path);
    //        if (Export && Breps.Count != 0 && path.EndsWith(".sat"))
    //        {
    //            string name = "ExportSATLayer";
    //            Rhino.DocObjects.Layer layer =  Rhino.RhinoDoc.ActiveDoc.Layers.FindName(name);
    //            if (layer == null)
    //            {
    //            }
    //            else
    //            {
    //                Rhino.RhinoDoc.ActiveDoc.Layers.Delete(layer.Index, true);
    //            }
    //            Rhino.RhinoDoc.ActiveDoc.Layers.Add(name, System.Drawing.Color.Black);
    //            int index = Rhino.RhinoDoc.ActiveDoc.Layers.FindName(name).Index;
    //            Rhino.DocObjects.ObjectAttributes attributes = new Rhino.DocObjects.ObjectAttributes();
    //            attributes.LayerIndex = index;
    //            foreach (Brep i in Breps)
    //            {
    //                Rhino.RhinoDoc.ActiveDoc.Objects.AddBrep(i, attributes);
    //            }
    //            Rhino.DocObjects.RhinoObject[] objects = Rhino.RhinoDoc.ActiveDoc.Objects.FindByLayer(name);
    //            if (objects.Length >= 1)
    //            {
    //                for (int i = 0; i < objects.Length; i++)
    //                {
    //                    objects[i].Select(true);
    //                }
    //                Rhino.RhinoDoc.ActiveDoc.ExportSelected(path);
    //                DA.SetData(0, true);
    //            }
    //            else
    //            {
    //                DA.SetData(0, false);
    //            }
                
    //        }
    //        else
    //        {
    //            DA.SetData(0, false);
    //        }
    //    }

    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.ExportSAT;
    //        }
    //    }

    //    public override Guid ComponentGuid => new Guid("D6A12263-F783-496D-BD5C-9E458C5F8A88");
    //}


    // 2022.9.15



    // 2022.9.15
    // 2022.9.16
    // 2022.9.17


    // 2022.9.17
    // 2022.9.21
    //public class ExportXML : GH_Component
    //{
    //    public static string name = System.Reflection.MethodBase.GetCurrentMethod().DeclaringType.Name;

    //    public ExportXML() : base(name, name, "", "SIM", "File")
    //    {
    //    }

    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("", "GHXPath", "", GH_ParamAccess.item, "*.ghx");
    //    }

    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("", "XML", "", GH_ParamAccess.item);
    //    }

    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        string GHXPath = "";
    //        DA.GetData(0, ref GHXPath);
    //        if (GHXPath.EndsWith(".ghx") && File.Exists(GHXPath))
    //        {
    //            string xml = GHXParser(GHXPath);
    //            DA.SetData(0, xml);
    //        }
    //        else
    //        {
    //            DA.SetData(0, "");
    //        }
    //    }

    //    public static string GHXParser(string GHXPath)
    //    {
    //        XmlDocument doc = new XmlDocument();
    //        doc.Load(GHXPath);
    //        XmlNodeList listNodes = doc.DocumentElement.SelectNodes("/Archive/chunks/chunk/chunks/chunk");
    //        XmlNode ObjectNode = null;
    //        XmlDocument docOut = new XmlDocument();
    //        XmlElement xelKey = docOut.CreateElement("GHX");
    //        docOut.AppendChild(xelKey);
    //        foreach (XmlNode node in listNodes)
    //        {
    //            foreach (XmlAttribute j in node.Attributes)
    //            {
    //                if (j.Value == "DefinitionObjects")
    //                {
    //                    ObjectNode = node;
    //                    break;
    //                }
    //                else
    //                {
    //                }
    //            }
    //        }
    //        foreach (XmlNode node in ObjectNode.SelectNodes("chunks/chunk"))
    //        {
    //            XmlElement xelKeyObject = docOut.CreateElement("Object");
    //            xelKey.AppendChild(xelKeyObject);
    //            foreach (XmlNode node1 in node.SelectNodes("items/item"))
    //            {
    //                foreach (XmlAttribute j in node1.Attributes)
    //                {
    //                    if (j.Value == "GUID")
    //                    {
    //                        XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                        xelKeyXXX.InnerText = node1.InnerText;
    //                        xelKeyObject.AppendChild(xelKeyXXX);
    //                    }
    //                    else if (j.Value == "Name")
    //                    {
    //                        XmlElement xelKeyXXX = docOut.CreateElement("Name");
    //                        if (node1.InnerText == "Number Slider")
    //                        {
    //                            xelKeyXXX.InnerText = "Panel";
    //                        }
    //                        else
    //                        {
    //                            xelKeyXXX.InnerText = node1.InnerText;
    //                        }
    //                        xelKeyObject.AppendChild(xelKeyXXX);
    //                    }
    //                    else
    //                    {
    //                    }
    //                }
    //            }
    //            foreach (XmlNode node1 in node.SelectNodes("chunks/chunk"))
    //            {
    //                foreach (XmlAttribute j in node1.Attributes)
    //                {
    //                    if (j.Value == "Container")
    //                    {
    //                        List<string> strings = new List<string>();
    //                        foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                        {
    //                            strings.Add(k.InnerXml);
    //                        }
    //                        if (strings.Contains("Panel"))
    //                        {
    //                            XmlElement xelKeyOut = docOut.CreateElement("Output");
    //                            xelKeyObject.AppendChild(xelKeyOut);
    //                            foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                            {
    //                                foreach (XmlAttribute m in k.Attributes)
    //                                {
    //                                    Console.WriteLine(m.Value);
    //                                    if (m.Value == "InstanceGuid")
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                                        xelKeyXXX.InnerText = k.InnerText;
    //                                        xelKeyOut.AppendChild(xelKeyXXX);
    //                                    }
    //                                    else if (m.Value == "UserText")
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement("Value");
    //                                        xelKeyXXX.InnerText = k.InnerText;
    //                                        xelKeyOut.AppendChild(xelKeyXXX);
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                            }
    //                        }
    //                        else if (strings.Contains("Number Slider"))
    //                        {
    //                            XmlElement xelKeyOut = docOut.CreateElement("Output");
    //                            xelKeyObject.AppendChild(xelKeyOut);
    //                            foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                            {
    //                                foreach (XmlAttribute m in k.Attributes)
    //                                {
    //                                    Console.WriteLine(m.Value);
    //                                    if (m.Value == "InstanceGuid")
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                                        xelKeyXXX.InnerText = k.InnerText;
    //                                        xelKeyOut.AppendChild(xelKeyXXX);
    //                                    }
    //                                    else if (m.Value == "NickName")
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement(String.Format("__{0}Value", k.InnerText));
    //                                        foreach (XmlNode n in node1.SelectNodes("chunks/chunk/items/item"))
    //                                        {
    //                                            foreach (XmlAttribute p in n.Attributes)
    //                                            {
    //                                                if (p.Value == "Value")
    //                                                {
    //                                                    xelKeyXXX.InnerText = n.InnerText;
    //                                                }
    //                                                else
    //                                                {
    //                                                }
    //                                            }
    //                                        }
    //                                        xelKeyOut.AppendChild(xelKeyXXX);
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else
    //                    {
    //                    }
    //                }
    //            }
    //            foreach (XmlNode node1 in node.SelectNodes("chunks/chunk/chunks/chunk"))
    //            {
    //                foreach (XmlAttribute j in node1.Attributes)
    //                {
    //                    if (j.Value == "Attributes")
    //                    {
    //                        foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                        {
    //                            foreach (XmlAttribute m in k.Attributes)
    //                            {
    //                                if (m.Value == "Pivot")
    //                                {
    //                                    foreach (XmlNode n in k.ChildNodes)
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement("Position_" + n.Name);
    //                                        xelKeyXXX.InnerText = n.InnerText;
    //                                        xelKeyObject.AppendChild(xelKeyXXX);
    //                                    };
    //                                }
    //                                else
    //                                {
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else if (j.Value == "param_input")
    //                    {
    //                        XmlElement xelKeyIn = docOut.CreateElement("Input");
    //                        xelKeyObject.AppendChild(xelKeyIn);
    //                        foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                        {
    //                            foreach (XmlAttribute m in k.Attributes)
    //                            {
    //                                if (m.Value == "NickName")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("Name");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyIn.AppendChild(xelKeyXXX);
    //                                }
    //                                else if (m.Value == "InstanceGuid")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyIn.AppendChild(xelKeyXXX);
    //                                }
    //                                else if (m.Value == "Source")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("Source");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyIn.AppendChild(xelKeyXXX);
    //                                }
    //                                else
    //                                {
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else if (j.Value == "param_output")
    //                    {
    //                        XmlElement xelKeyOut = docOut.CreateElement("Output");
    //                        xelKeyObject.AppendChild(xelKeyOut);
    //                        foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                        {
    //                            foreach (XmlAttribute m in k.Attributes)
    //                            {
    //                                if (m.Value == "NickName")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("Name");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyOut.AppendChild(xelKeyXXX);
    //                                }
    //                                else if (m.Value == "InstanceGuid")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyOut.AppendChild(xelKeyXXX);
    //                                }
    //                                else
    //                                {
    //                                }
    //                            }
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //        string XMLPath = Path.ChangeExtension(GHXPath, ".xml");
    //        docOut.Save(XMLPath);
    //        return XMLReader(XMLPath);
    //    }

    //    public static string XMLReader(string XMLPath)
    //    {
    //        StringBuilder Builder = new StringBuilder();
    //        using (StreamReader Reader = new StreamReader(XMLPath))
    //        {
    //            string Line;
    //            while ((Line = Reader.ReadLine()) != null)
    //            {
    //                Builder.AppendLine(Line);
    //            }
    //        }
    //        return Builder.ToString();
    //    }

    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return Properties.Resources.ExportXML;
    //        }
    //    }

    //    public override Guid ComponentGuid => new Guid("ADA12263-F783-446C-BB5C-9E458A2F8788");
    //}


    //public class REFERENCE : GH_Component
    //{
    //    public REFERENCE() : base("REFERENCE", "REFERENCE", "REFERENCE", "MongoDB", "File") { }

    //    protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("GHXPath", "GHXPath", "GHXPath", GH_ParamAccess.item);
    //    }

    //    protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
    //    {
    //        pManager.AddTextParameter("XMLPath", "XMLPath", "XMLPath", GH_ParamAccess.item);
    //    }

    //    protected override void SolveInstance(IGH_DataAccess DA)
    //    {
    //        string GHXPath = null;
    //        DA.GetData(0, ref GHXPath);
    //        if (GHXPath.EndsWith(".ghx") && File.Exists(GHXPath))
    //        {
    //            string XMLPath = GHXParser(GHXPath);
    //            DA.SetData(0, XMLPath);
    //        }
    //    }

    //    public static string GHXParser(string GHXPath)
    //    {
    //        string URL = "mongodb://localhost:27017";
    //        MongoClient Client = new MongoClient(URL);
    //        IMongoDatabase Database = Client.GetDatabase("ShipInformationModel");
    //        IMongoCollection<BsonDocument> Collection = Database.GetCollection<BsonDocument>("REFERENCE");
    //        XmlDocument doc = new XmlDocument();
    //        doc.Load(GHXPath);
    //        XmlNodeList listNodes = doc.DocumentElement.SelectNodes("/Archive/chunks/chunk/chunks/chunk");
    //        XmlNode ObjectNode = null;
    //        XmlDocument docOut = new XmlDocument();
    //        XmlElement xelKey = docOut.CreateElement("GHX");
    //        docOut.AppendChild(xelKey);
    //        foreach (XmlNode node in listNodes)
    //        {
    //            foreach (XmlAttribute j in node.Attributes)
    //            {
    //                if (j.Value == "DefinitionObjects")
    //                {
    //                    ObjectNode = node;
    //                    break;
    //                }
    //                else
    //                {
    //                }
    //            }
    //        }
    //        foreach (XmlNode node in ObjectNode.SelectNodes("chunks/chunk"))
    //        {
    //            XmlElement xelKeyObject = docOut.CreateElement("Object");
    //            xelKey.AppendChild(xelKeyObject);
    //            foreach (XmlNode node1 in node.SelectNodes("items/item"))
    //            {
    //                foreach (XmlAttribute j in node1.Attributes)
    //                {
    //                    if (j.Value == "GUID")
    //                    {
    //                        XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                        xelKeyXXX.InnerText = node1.InnerText;
    //                        xelKeyObject.AppendChild(xelKeyXXX);
    //                    }
    //                    else if (j.Value == "Name")
    //                    {
    //                        XmlElement xelKeyXXX = docOut.CreateElement("Name");
    //                        if (node1.InnerText == "Number Slider")
    //                        {
    //                            xelKeyXXX.InnerText = "Panel";
    //                        }
    //                        else
    //                        {
    //                            xelKeyXXX.InnerText = node1.InnerText;
    //                        }
    //                        xelKeyObject.AppendChild(xelKeyXXX);
    //                    }
    //                    else
    //                    {
    //                    }
    //                }
    //            }
    //            foreach (XmlNode node1 in node.SelectNodes("chunks/chunk"))
    //            {
    //                foreach (XmlAttribute j in node1.Attributes)
    //                {
    //                    if (j.Value == "Container")
    //                    {
    //                        List<string> strings = new List<string>();
    //                        foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                        {
    //                            strings.Add(k.InnerXml);
    //                        }
    //                        if (strings.Contains("Panel"))
    //                        {
    //                            XmlElement xelKeyOut = docOut.CreateElement("Output");
    //                            xelKeyObject.AppendChild(xelKeyOut);
    //                            foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                            {
    //                                foreach (XmlAttribute m in k.Attributes)
    //                                {
    //                                    Console.WriteLine(m.Value);
    //                                    if (m.Value == "InstanceGuid")
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                                        xelKeyXXX.InnerText = k.InnerText;
    //                                        xelKeyOut.AppendChild(xelKeyXXX);
    //                                    }
    //                                    else if (m.Value == "UserText")
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement("Value");
    //                                        xelKeyXXX.InnerText = k.InnerText;
    //                                        xelKeyOut.AppendChild(xelKeyXXX);
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                            }
    //                        }
    //                        else if (strings.Contains("Number Slider"))
    //                        {
    //                            XmlElement xelKeyOut = docOut.CreateElement("Output");
    //                            xelKeyObject.AppendChild(xelKeyOut);
    //                            foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                            {
    //                                foreach (XmlAttribute m in k.Attributes)
    //                                {
    //                                    Console.WriteLine(m.Value);
    //                                    if (m.Value == "InstanceGuid")
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                                        xelKeyXXX.InnerText = k.InnerText;
    //                                        xelKeyOut.AppendChild(xelKeyXXX);
    //                                    }
    //                                    else if (m.Value == "NickName")
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement(String.Format("__{0}Value", k.InnerText));
    //                                        foreach (XmlNode n in node1.SelectNodes("chunks/chunk/items/item"))
    //                                        {
    //                                            foreach (XmlAttribute p in n.Attributes)
    //                                            {
    //                                                if (p.Value == "Value")
    //                                                {
    //                                                    xelKeyXXX.InnerText = n.InnerText;
    //                                                    var document = new BsonDocument { { "ID", 1 }, { k.InnerText, n.InnerText } };
    //                                                    Collection.InsertOne(document);
    //                                                }
    //                                                else
    //                                                {
    //                                                }
    //                                            }
    //                                        }
    //                                        xelKeyOut.AppendChild(xelKeyXXX);
    //                                    }
    //                                    else
    //                                    {
    //                                    }
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else
    //                    {
    //                    }
    //                }
    //            }
    //            foreach (XmlNode node1 in node.SelectNodes("chunks/chunk/chunks/chunk"))
    //            {
    //                foreach (XmlAttribute j in node1.Attributes)
    //                {
    //                    if (j.Value == "Attributes")
    //                    {
    //                        foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                        {
    //                            foreach (XmlAttribute m in k.Attributes)
    //                            {
    //                                if (m.Value == "Pivot")
    //                                {
    //                                    foreach (XmlNode n in k.ChildNodes)
    //                                    {
    //                                        XmlElement xelKeyXXX = docOut.CreateElement("Position_" + n.Name);
    //                                        xelKeyXXX.InnerText = n.InnerText;
    //                                        xelKeyObject.AppendChild(xelKeyXXX);
    //                                    };
    //                                }
    //                                else
    //                                {
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else if (j.Value == "param_input")
    //                    {
    //                        XmlElement xelKeyIn = docOut.CreateElement("Input");
    //                        xelKeyObject.AppendChild(xelKeyIn);
    //                        foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                        {
    //                            foreach (XmlAttribute m in k.Attributes)
    //                            {
    //                                if (m.Value == "NickName")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("Name");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyIn.AppendChild(xelKeyXXX);
    //                                }
    //                                else if (m.Value == "InstanceGuid")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyIn.AppendChild(xelKeyXXX);
    //                                }
    //                                else if (m.Value == "Source")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("Source");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyIn.AppendChild(xelKeyXXX);
    //                                }
    //                                else
    //                                {
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else if (j.Value == "param_output")
    //                    {
    //                        XmlElement xelKeyOut = docOut.CreateElement("Output");
    //                        xelKeyObject.AppendChild(xelKeyOut);
    //                        foreach (XmlNode k in node1.SelectNodes("items/item"))
    //                        {
    //                            foreach (XmlAttribute m in k.Attributes)
    //                            {
    //                                if (m.Value == "NickName")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("Name");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyOut.AppendChild(xelKeyXXX);
    //                                }
    //                                else if (m.Value == "InstanceGuid")
    //                                {
    //                                    XmlElement xelKeyXXX = docOut.CreateElement("GUID");
    //                                    xelKeyXXX.InnerText = k.InnerText;
    //                                    xelKeyOut.AppendChild(xelKeyXXX);
    //                                }
    //                                else
    //                                {
    //                                }
    //                            }
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //        string XMLPath = Path.ChangeExtension(GHXPath, ".xml");
    //        docOut.Save(XMLPath);
    //        var document1 = new BsonDocument { { "ID", 1 }, { "REFERENCE", XMLPath } };
    //        Collection.InsertOne(document1);
    //        return XMLPath;
    //    }

    //    public override GH_Exposure Exposure => GH_Exposure.primary;

    //    protected override System.Drawing.Bitmap Icon
    //    {
    //        get
    //        {
    //            return null;
    //        }
    //    }

    //    public override Guid ComponentGuid => new Guid("ADA12263-F783-496C-BB5C-9E458A2F8788");
    //}

//    public class CBM : GH_Component
//    {
//        /// <summary>
//        /// Each implementation of GH_Component must provide a public 
//        /// constructor without any arguments.
//        /// Category represents the Tab in which the component will appear, 
//        /// Subcategory the panel. If you use non-existing tab or panel names, 
//        /// new tabs/panels will automatically be created.
//        /// </summary>
//        public CBM()
//          : base("CBM", "CBM",
//            "CBM",
//            "GIM", "Folder")
//        {
//        }

//        /// <summary>
//        /// Registers all the input parameters for this component.
//        /// </summary>
//        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
//        {
//            // Use the pManager object to register your input parameters.
//            // You can often supply default values when creating parameters.
//            // All parameters must have the correct access type. If you want 
//            // to import lists or trees of values, modify the ParamAccess flag.
//            // pManager.AddPlaneParameter("Plane", "P", "Base plane for spiral", GH_ParamAccess.item, Plane.WorldXY);
//            pManager.AddTextParameter("GUID", "GUID", "GUID", GH_ParamAccess.item);
//        }

//        /// <summary>
//        /// Registers all the output parameters for this component.
//        /// </summary>
//        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
//        {
//            // Use the pManager object to register your output parameters.
//            // Output parameters do not have default values, but they too must have the correct access type.
//            // pManager.AddCurveParameter("Spiral", "S", "Spiral curve", GH_ParamAccess.item);
//            pManager.AddTextParameter("CBM", "CBM", "CBM", GH_ParamAccess.item);

//            // Sometimes you want to hide a specific parameter from the Rhino preview.
//            // You can use the HideParameter() method as a quick way:
//            //pManager.HideParameter(0);
//        }

//        /// <summary>
//        /// This is the method that actually does the work.
//        /// </summary>
//        /// <param name="DA">The DA object can be used to retrieve data from input parameters and 
//        /// to store data in output parameters.</param>
//        protected override void SolveInstance(IGH_DataAccess DA)
//        {
//            string guid = "";
//            if (!DA.GetData(0, ref guid)) return;
//            string cbm = @"BLHA=0.00000000,0.00000000,0.00,0.000
//SUBSYSTEM=######
//TYPE=TS";
//            cbm = cbm.Replace("######", guid + ".dev");
//            FileStream fs = new FileStream("C:/Users/jinha/AppData/Roaming/Grasshopper/Libraries/GIM/CBM/project.cbm", FileMode.Create, FileAccess.ReadWrite);
//            StreamWriter sw = new StreamWriter(fs);
//            sw.WriteLine(cbm);
//            sw.Close();
//            fs.Close();

//            DA.SetData(0, cbm);
//        }

//        /// <summary>
//        /// The Exposure property controls where in the panel a component icon 
//        /// will appear. There are seven possible locations (primary to septenary), 
//        /// each of which can be combined with the GH_Exposure.obscure flag, which 
//        /// ensures the component will only be visible on panel dropdowns.
//        /// </summary>
//        public override GH_Exposure Exposure => GH_Exposure.primary;

//        /// <summary>
//        /// Provides an Icon for every component that will be visible in the User Interface.
//        /// Icons need to be 24x24 pixels.
//        /// You can add image files to your project resources and access them like this:
//        /// return Resources.IconForThisComponent;
//        /// </summary>
//        // protected override System.Drawing.Bitmap Icon => null;
//        protected override System.Drawing.Bitmap Icon
//        {
//            get
//            {
//                return Properties.Resources.CBM;
//            }
//        }

//        /// <summary>
//        /// Each component must have a unique Guid to identify it. 
//        /// It is vital this Guid doesn't change otherwise old ghx files 
//        /// that use the old ID will partially fail during loading.
//        /// </summary>
//        public override Guid ComponentGuid => new Guid("D6A12263-F783-496D-BB5C-9E458C5F8788");
    //}
}